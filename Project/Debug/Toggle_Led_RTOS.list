
Toggle_Led_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d424  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800d5b8  0800d5b8  0000e5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c8  0800d9c8  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9c8  0800d9c8  0000e9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9d0  0800d9d0  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9d0  0800d9d0  0000e9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9d4  0800d9d4  0000e9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d9d8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d28  200001d8  0800dbb0  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  0800dbb0  0000ff00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb7b  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d1  00000000  00000000  0002ed83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00032e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000161c  00000000  00000000  00034ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053a4  00000000  00000000  000360cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f3ff  00000000  00000000  0003b470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001120a6  00000000  00000000  0005a86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c915  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ac0  00000000  00000000  0016c958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00175418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d59c 	.word	0x0800d59c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d59c 	.word	0x0800d59c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 f957 	bl	80021ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 fa8a 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fd1c 	bl	8001980 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f48:	f000 fad8 	bl	80014fc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 fcb8 	bl	80018c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f50:	f000 fce6 	bl	8001920 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000f54:	f000 fc32 	bl	80017bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f58:	f000 fbd6 	bl	8001708 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000f5c:	f000 fc88 	bl	8001870 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000f60:	f000 fb42 	bl	80015e8 <MX_TIM1_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Iniciar PWM en TIM4 Channel 1 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f64:	2104      	movs	r1, #4
 8000f66:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <main+0x58>)
 8000f68:	f004 ff2a 	bl	8005dc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <main+0x5c>)
 8000f70:	f004 ff26 	bl	8005dc0 <HAL_TIM_PWM_Start>

  /* Inicialización de FreeRTOS */
  osKernelInitialize();
 8000f74:	f006 ff36 	bl	8007de4 <osKernelInitialize>

  /* Crear tarea para lectura y actualización del PWM */
  adc_task_handle = osThreadNew(Task_ADC_Read_And_Update_PWM, NULL, NULL);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <main+0x60>)
 8000f7e:	f006 ff7b 	bl	8007e78 <osThreadNew>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <main+0x64>)
 8000f86:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f88:	f006 ff50 	bl	8007e2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <main+0x54>
 8000f90:	2000032c 	.word	0x2000032c
 8000f94:	200002e0 	.word	0x200002e0
 8000f98:	08000fa1 	.word	0x08000fa1
 8000f9c:	200004a0 	.word	0x200004a0

08000fa0 <Task_ADC_Read_And_Update_PWM>:



/* Tarea: Leer ADC, actualizar PWM y transmitir voltaje */
void Task_ADC_Read_And_Update_PWM(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	6078      	str	r0, [r7, #4]
    float voltage;
    char msg[50];

    for (;;)
    {
        if (adc_task_active) // Verificar si la tarea está activa
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <Task_ADC_Read_And_Update_PWM+0xc8>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d048      	beq.n	8001044 <Task_ADC_Read_And_Update_PWM+0xa4>
        {
            // Leer ADC y calcular voltaje
            Read_ADC(&adc_value, &voltage);
 8000fb2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000fb6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f89b 	bl	80010f8 <Read_ADC>

            // Actualizar ciclo útil del PWM según la diferencia
            Update_PWM_DutyCycle(voltage);
 8000fc2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	f000 f8d7 	bl	800117c <Update_PWM_DutyCycle>

            voltage= (voltage/5.2)*100;
 8000fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fab9 	bl	8000548 <__aeabi_f2d>
 8000fd6:	a322      	add	r3, pc, #136	@ (adr r3, 8001060 <Task_ADC_Read_And_Update_PWM+0xc0>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fc36 	bl	800084c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <Task_ADC_Read_And_Update_PWM+0xcc>)
 8000fee:	f7ff fb03 	bl	80005f8 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fdd5 	bl	8000ba8 <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	643b      	str	r3, [r7, #64]	@ 0x40


            // Transmitir por UART
            snprintf(msg, sizeof(msg), "Voltage: %.2f C\r\n", voltage);
 8001002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa9f 	bl	8000548 <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	f107 000c 	add.w	r0, r7, #12
 8001012:	e9cd 2300 	strd	r2, r3, [sp]
 8001016:	4a16      	ldr	r2, [pc, #88]	@ (8001070 <Task_ADC_Read_And_Update_PWM+0xd0>)
 8001018:	2132      	movs	r1, #50	@ 0x32
 800101a:	f00a f97f 	bl	800b31c <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f924 	bl	8000270 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f107 010c 	add.w	r1, r7, #12
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	480f      	ldr	r0, [pc, #60]	@ (8001074 <Task_ADC_Read_And_Update_PWM+0xd4>)
 8001036:	f005 fdd3 	bl	8006be0 <HAL_UART_Transmit>

            // Esperar 300 ms
            osDelay(300);
 800103a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800103e:	f006 ffad 	bl	8007f9c <osDelay>
 8001042:	e7b1      	b.n	8000fa8 <Task_ADC_Read_And_Update_PWM+0x8>
        }
        else
        {
            // Si la tarea no está activa, apagar PWM (duty = 0)
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <Task_ADC_Read_And_Update_PWM+0xd8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <Task_ADC_Read_And_Update_PWM+0xdc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2200      	movs	r2, #0
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
            osDelay(100);
 8001054:	2064      	movs	r0, #100	@ 0x64
 8001056:	f006 ffa1 	bl	8007f9c <osDelay>
        if (adc_task_active) // Verificar si la tarea está activa
 800105a:	e7a5      	b.n	8000fa8 <Task_ADC_Read_And_Update_PWM+0x8>
 800105c:	f3af 8000 	nop.w
 8001060:	cccccccd 	.word	0xcccccccd
 8001064:	4014cccc 	.word	0x4014cccc
 8001068:	20000498 	.word	0x20000498
 800106c:	40590000 	.word	0x40590000
 8001070:	0800d5c4 	.word	0x0800d5c4
 8001074:	20000258 	.word	0x20000258
 8001078:	2000032c 	.word	0x2000032c
 800107c:	200002e0 	.word	0x200002e0

08001080 <HAL_GPIO_EXTI_Callback>:



/* Callback de la interrupción del botón */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1) // Botón conectado al pin GPIO_PIN_1
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d125      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x5c>
    {
        uint32_t current_time = HAL_GetTick();
 8001090:	f001 f916 	bl	80022c0 <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]
        if ((current_time - debounce_time) >= 200) // Filtro de rebote con 100 ms
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2bc7      	cmp	r3, #199	@ 0xc7
 80010a0:	d91c      	bls.n	80010dc <HAL_GPIO_EXTI_Callback+0x5c>
        {
            debounce_time = current_time; // Actualizar tiempo de la última pulsación
 80010a2:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <HAL_GPIO_EXTI_Callback+0x64>)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6013      	str	r3, [r2, #0]

            if (adc_task_active)
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x68>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00a      	beq.n	80010c8 <HAL_GPIO_EXTI_Callback+0x48>
            {
                // Detener la tarea
                adc_task_active = 0;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"ADC Stopped\r\n", 13, HAL_MAX_DELAY);
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	220d      	movs	r2, #13
 80010be:	490b      	ldr	r1, [pc, #44]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x6c>)
 80010c0:	480b      	ldr	r0, [pc, #44]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x70>)
 80010c2:	f005 fd8d 	bl	8006be0 <HAL_UART_Transmit>
                adc_task_active = 1;
                HAL_UART_Transmit(&huart2, (uint8_t *)"ADC Started\r\n", 13, HAL_MAX_DELAY);
            }
        }
    }
}
 80010c6:	e009      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x5c>
                adc_task_active = 1;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <HAL_GPIO_EXTI_Callback+0x68>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"ADC Started\r\n", 13, HAL_MAX_DELAY);
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	220d      	movs	r2, #13
 80010d4:	4907      	ldr	r1, [pc, #28]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x74>)
 80010d6:	4806      	ldr	r0, [pc, #24]	@ (80010f0 <HAL_GPIO_EXTI_Callback+0x70>)
 80010d8:	f005 fd82 	bl	8006be0 <HAL_UART_Transmit>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000049c 	.word	0x2000049c
 80010e8:	20000498 	.word	0x20000498
 80010ec:	0800d5d8 	.word	0x0800d5d8
 80010f0:	20000258 	.word	0x20000258
 80010f4:	0800d5e8 	.word	0x0800d5e8

080010f8 <Read_ADC>:

/* Leer ADC y calcular voltaje */
void Read_ADC(uint32_t *adc_value, float *voltage)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(&hadc1);
 8001102:	481d      	ldr	r0, [pc, #116]	@ (8001178 <Read_ADC+0x80>)
 8001104:	f001 fc7c 	bl	8002a00 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001108:	2164      	movs	r1, #100	@ 0x64
 800110a:	481b      	ldr	r0, [pc, #108]	@ (8001178 <Read_ADC+0x80>)
 800110c:	f001 fd66 	bl	8002bdc <HAL_ADC_PollForConversion>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d121      	bne.n	800115a <Read_ADC+0x62>
    {
        *adc_value = HAL_ADC_GetValue(&hadc1);
 8001116:	4818      	ldr	r0, [pc, #96]	@ (8001178 <Read_ADC+0x80>)
 8001118:	f001 fe38 	bl	8002d8c <HAL_ADC_GetValue>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
        *voltage = (*adc_value * 3.3) / 4095.0; // Conversión a voltaje
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9ec 	bl	8000504 <__aeabi_ui2d>
 800112c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001168 <Read_ADC+0x70>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff fa61 	bl	80005f8 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001170 <Read_ADC+0x78>)
 8001140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001144:	f7ff fb82 	bl	800084c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd2a 	bl	8000ba8 <__aeabi_d2f>
 8001154:	4602      	mov	r2, r0
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	601a      	str	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 800115a:	4807      	ldr	r0, [pc, #28]	@ (8001178 <Read_ADC+0x80>)
 800115c:	f001 fd0a 	bl	8002b74 <HAL_ADC_Stop>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	66666666 	.word	0x66666666
 800116c:	400a6666 	.word	0x400a6666
 8001170:	00000000 	.word	0x00000000
 8001174:	40affe00 	.word	0x40affe00
 8001178:	200001f4 	.word	0x200001f4

0800117c <Update_PWM_DutyCycle>:

/* Actualizar el ciclo útil del PWM de forma “paramétrica” */
/* Ajusta aquí la referencia y la cantidad de intervalos */

void Update_PWM_DutyCycle(float voltage)
{
 800117c:	b480      	push	{r7}
 800117e:	b08b      	sub	sp, #44	@ 0x2c
 8001180:	af00      	add	r7, sp, #0
 8001182:	ed87 0a01 	vstr	s0, [r7, #4]
    // 1) Calcular la diferencia con la referencia
    float diff = REFERENCE_VOLTAGE-voltage;
 8001186:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8001424 <Update_PWM_DutyCycle+0x2a8>
 800118a:	edd7 7a01 	vldr	s15, [r7, #4]
 800118e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001192:	edc7 7a08 	vstr	s15, [r7, #32]

    // 2) Calcular el tamaño de cada intervalo
    float intervalSize = REFERENCE_VOLTAGE / (float)NUM_INTERVALS;
 8001196:	4ba4      	ldr	r3, [pc, #656]	@ (8001428 <Update_PWM_DutyCycle+0x2ac>)
 8001198:	61fb      	str	r3, [r7, #28]
    // Si REFERENCE_VOLTAGE = 2.5, intervalSize = 2.5/8 = 0.3125

    // 3) Definir el duty cycle (0..1) según el rango de 'diff'
    float dutyPercent;

    if (diff>=0){
 800119a:	edd7 7a08 	vldr	s15, [r7, #32]
 800119e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	f2c0 8097 	blt.w	80012d8 <Update_PWM_DutyCycle+0x15c>
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80011aa:	4ba0      	ldr	r3, [pc, #640]	@ (800142c <Update_PWM_DutyCycle+0x2b0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34


        // Comparamos de mayor a menor:
        if (diff >= intervalSize * 7)
 80011b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b6:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80011ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011be:	ed97 7a08 	vldr	s14, [r7, #32]
 80011c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	db02      	blt.n	80011d2 <Update_PWM_DutyCycle+0x56>
        {
            // Ej. diff >= 2.1875 => muy por debajo de la referencia => PWM alto
            dutyPercent = 0.99f;
 80011cc:	4b98      	ldr	r3, [pc, #608]	@ (8001430 <Update_PWM_DutyCycle+0x2b4>)
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80011d0:	e06c      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else if (diff >= intervalSize * 6) // [1.875, 2.1875)
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011de:	ed97 7a08 	vldr	s14, [r7, #32]
 80011e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	db02      	blt.n	80011f2 <Update_PWM_DutyCycle+0x76>
        {
            dutyPercent = 0.99f;
 80011ec:	4b90      	ldr	r3, [pc, #576]	@ (8001430 <Update_PWM_DutyCycle+0x2b4>)
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f0:	e05c      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else if (diff >= intervalSize * 5) // [1.5625, 1.875)
 80011f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80011fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8001202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	db02      	blt.n	8001212 <Update_PWM_DutyCycle+0x96>
        {
            dutyPercent = 0.95f;
 800120c:	4b89      	ldr	r3, [pc, #548]	@ (8001434 <Update_PWM_DutyCycle+0x2b8>)
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001210:	e04c      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else if (diff >= intervalSize * 4) // [1.25, 1.5625)
 8001212:	edd7 7a07 	vldr	s15, [r7, #28]
 8001216:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800121a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	db02      	blt.n	8001232 <Update_PWM_DutyCycle+0xb6>
        {
            dutyPercent = 0.85f;
 800122c:	4b82      	ldr	r3, [pc, #520]	@ (8001438 <Update_PWM_DutyCycle+0x2bc>)
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001230:	e03c      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else if (diff >= intervalSize * 3) // [0.9375, 1.25)
 8001232:	edd7 7a07 	vldr	s15, [r7, #28]
 8001236:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800123a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	db02      	blt.n	8001252 <Update_PWM_DutyCycle+0xd6>
        {
            dutyPercent = 0.70f;
 800124c:	4b7b      	ldr	r3, [pc, #492]	@ (800143c <Update_PWM_DutyCycle+0x2c0>)
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001250:	e02c      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else if (diff >= intervalSize * 2) // [0.625, 0.9375)
 8001252:	edd7 7a07 	vldr	s15, [r7, #28]
 8001256:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800125a:	ed97 7a08 	vldr	s14, [r7, #32]
 800125e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	db02      	blt.n	800126e <Update_PWM_DutyCycle+0xf2>
        {
            dutyPercent = 0.65f;
 8001268:	4b75      	ldr	r3, [pc, #468]	@ (8001440 <Update_PWM_DutyCycle+0x2c4>)
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
 800126c:	e01e      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else if (diff >= intervalSize * 1) // [0.3125, 0.625)
 800126e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001272:	edd7 7a07 	vldr	s15, [r7, #28]
 8001276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	db02      	blt.n	8001286 <Update_PWM_DutyCycle+0x10a>
        {
            dutyPercent = 0.40f;
 8001280:	4b70      	ldr	r3, [pc, #448]	@ (8001444 <Update_PWM_DutyCycle+0x2c8>)
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
 8001284:	e012      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else if (diff >= intervalSize * 0) // [0.0, 0.3125)
 8001286:	edd7 7a07 	vldr	s15, [r7, #28]
 800128a:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001448 <Update_PWM_DutyCycle+0x2cc>
 800128e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001292:	ed97 7a08 	vldr	s14, [r7, #32]
 8001296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	db02      	blt.n	80012a6 <Update_PWM_DutyCycle+0x12a>
        {
            dutyPercent = 0.15f;
 80012a0:	4b6a      	ldr	r3, [pc, #424]	@ (800144c <Update_PWM_DutyCycle+0x2d0>)
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a4:	e002      	b.n	80012ac <Update_PWM_DutyCycle+0x130>
        }
        else
        {
            // diff < 0 => el voltaje está por encima de la referencia
            dutyPercent = 0.0f;
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // 4) Convierte el duty cycle a valor de CCR (Registro de Comparación)
        uint32_t period = htim3.Init.Period;
 80012ac:	4b68      	ldr	r3, [pc, #416]	@ (8001450 <Update_PWM_DutyCycle+0x2d4>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
        uint32_t pwm_value = (uint32_t)(dutyPercent * (float)period);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c8:	ee17 3a90 	vmov	r3, s15
 80012cc:	60fb      	str	r3, [r7, #12]

        // 5) Actualiza el CCR para generar el PWM
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm_value);
 80012ce:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <Update_PWM_DutyCycle+0x2d4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	639a      	str	r2, [r3, #56]	@ 0x38
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);

    }


}
 80012d6:	e09e      	b.n	8001416 <Update_PWM_DutyCycle+0x29a>
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80012d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001450 <Update_PWM_DutyCycle+0x2d4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	@ 0x38
    	diff = voltage- REFERENCE_VOLTAGE;
 80012e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e4:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001424 <Update_PWM_DutyCycle+0x2a8>
 80012e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ec:	edc7 7a08 	vstr	s15, [r7, #32]
        if (diff >= intervalSize * 7)
 80012f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f4:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	db02      	blt.n	8001310 <Update_PWM_DutyCycle+0x194>
            dutyPercent = 0.99f;
 800130a:	4b49      	ldr	r3, [pc, #292]	@ (8001430 <Update_PWM_DutyCycle+0x2b4>)
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
 800130e:	e06d      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
        else if (diff >= intervalSize * 6) // [1.875, 2.1875)
 8001310:	edd7 7a07 	vldr	s15, [r7, #28]
 8001314:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	db02      	blt.n	8001330 <Update_PWM_DutyCycle+0x1b4>
            dutyPercent = 0.99f;
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <Update_PWM_DutyCycle+0x2b4>)
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
 800132e:	e05d      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
        else if (diff >= intervalSize * 5) // [1.5625, 1.875)
 8001330:	edd7 7a07 	vldr	s15, [r7, #28]
 8001334:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	db02      	blt.n	8001350 <Update_PWM_DutyCycle+0x1d4>
            dutyPercent = 0.95f;
 800134a:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <Update_PWM_DutyCycle+0x2b8>)
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
 800134e:	e04d      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
        else if (diff >= intervalSize * 4) // [1.25, 1.5625)
 8001350:	edd7 7a07 	vldr	s15, [r7, #28]
 8001354:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	db02      	blt.n	8001370 <Update_PWM_DutyCycle+0x1f4>
            dutyPercent = 0.85f;
 800136a:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <Update_PWM_DutyCycle+0x2bc>)
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
 800136e:	e03d      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
        else if (diff >= intervalSize * 3) // [0.9375, 1.25)
 8001370:	edd7 7a07 	vldr	s15, [r7, #28]
 8001374:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	db02      	blt.n	8001390 <Update_PWM_DutyCycle+0x214>
            dutyPercent = 0.65f;
 800138a:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <Update_PWM_DutyCycle+0x2c4>)
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
 800138e:	e02d      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
        else if (diff >= intervalSize * 2) // [0.625, 0.9375)
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001398:	ed97 7a08 	vldr	s14, [r7, #32]
 800139c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a4:	db02      	blt.n	80013ac <Update_PWM_DutyCycle+0x230>
            dutyPercent = 0.55f;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <Update_PWM_DutyCycle+0x2d8>)
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013aa:	e01f      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
        else if (diff >= intervalSize * 1) // [0.3125, 0.625)
 80013ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80013b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	db02      	blt.n	80013c4 <Update_PWM_DutyCycle+0x248>
            dutyPercent = 0.40f;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <Update_PWM_DutyCycle+0x2c8>)
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c2:	e013      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
        else if (diff >= intervalSize * 0) // [0.0, 0.3125)
 80013c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001448 <Update_PWM_DutyCycle+0x2cc>
 80013cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80013d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	db03      	blt.n	80013e6 <Update_PWM_DutyCycle+0x26a>
            dutyPercent = 0.25f;
 80013de:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e4:	e002      	b.n	80013ec <Update_PWM_DutyCycle+0x270>
            dutyPercent = 0.0f;
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t period = htim1.Init.Period;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <Update_PWM_DutyCycle+0x2b0>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        uint32_t pwm_value = (uint32_t)(dutyPercent * (float)period);
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001408:	ee17 3a90 	vmov	r3, s15
 800140c:	617b      	str	r3, [r7, #20]
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <Update_PWM_DutyCycle+0x2b0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001416:	bf00      	nop
 8001418:	372c      	adds	r7, #44	@ 0x2c
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	3fcccccd 	.word	0x3fcccccd
 8001428:	3e4ccccd 	.word	0x3e4ccccd
 800142c:	200002e0 	.word	0x200002e0
 8001430:	3f7d70a4 	.word	0x3f7d70a4
 8001434:	3f733333 	.word	0x3f733333
 8001438:	3f59999a 	.word	0x3f59999a
 800143c:	3f333333 	.word	0x3f333333
 8001440:	3f266666 	.word	0x3f266666
 8001444:	3ecccccd 	.word	0x3ecccccd
 8001448:	00000000 	.word	0x00000000
 800144c:	3e19999a 	.word	0x3e19999a
 8001450:	2000032c 	.word	0x2000032c
 8001454:	3f0ccccd 	.word	0x3f0ccccd

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	@ 0x58
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2244      	movs	r2, #68	@ 0x44
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f009 ffcf 	bl	800b40a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800147a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800147e:	f003 f8df 	bl	8004640 <HAL_PWREx_ControlVoltageScaling>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001488:	f000 fafa 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001496:	2310      	movs	r3, #16
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149a:	2302      	movs	r3, #2
 800149c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149e:	2302      	movs	r3, #2
 80014a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014a6:	230a      	movs	r3, #10
 80014a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014aa:	2307      	movs	r3, #7
 80014ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 f916 	bl	80046ec <HAL_RCC_OscConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014c6:	f000 fadb 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ca:	230f      	movs	r3, #15
 80014cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ce:	2303      	movs	r3, #3
 80014d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	2104      	movs	r1, #4
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fcde 	bl	8004ea4 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ee:	f000 fac7 	bl	8001a80 <Error_Handler>
  }
}
 80014f2:	bf00      	nop
 80014f4:	3758      	adds	r7, #88	@ 0x58
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800151e:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001520:	4a2f      	ldr	r2, [pc, #188]	@ (80015e0 <MX_ADC1_Init+0xe4>)
 8001522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152a:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <MX_ADC1_Init+0xe0>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <MX_ADC1_Init+0xe0>)
 800153e:	2204      	movs	r2, #4
 8001540:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001544:	2200      	movs	r2, #0
 8001546:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <MX_ADC1_Init+0xe0>)
 800154a:	2201      	movs	r2, #1
 800154c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800154e:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001550:	2201      	movs	r2, #1
 8001552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001554:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <MX_ADC1_Init+0xe0>)
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001564:	2200      	movs	r2, #0
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <MX_ADC1_Init+0xe0>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001572:	2200      	movs	r2, #0
 8001574:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157e:	4817      	ldr	r0, [pc, #92]	@ (80015dc <MX_ADC1_Init+0xe0>)
 8001580:	f001 f8ee 	bl	8002760 <HAL_ADC_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800158a:	f000 fa79 	bl	8001a80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4810      	ldr	r0, [pc, #64]	@ (80015dc <MX_ADC1_Init+0xe0>)
 800159a:	f002 fc29 	bl	8003df0 <HAL_ADCEx_MultiModeConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015a4:	f000 fa6c 	bl	8001a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_ADC1_Init+0xe8>)
 80015aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ac:	2306      	movs	r3, #6
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015b4:	237f      	movs	r3, #127	@ 0x7f
 80015b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015b8:	2304      	movs	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_ADC1_Init+0xe0>)
 80015c6:	f001 fe27 	bl	8003218 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80015d0:	f000 fa56 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200001f4 	.word	0x200001f4
 80015e0:	50040000 	.word	0x50040000
 80015e4:	10c00010 	.word	0x10c00010

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b096      	sub	sp, #88	@ 0x58
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	222c      	movs	r2, #44	@ 0x2c
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f009 fef8 	bl	800b40a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161a:	4b39      	ldr	r3, [pc, #228]	@ (8001700 <MX_TIM1_Init+0x118>)
 800161c:	4a39      	ldr	r2, [pc, #228]	@ (8001704 <MX_TIM1_Init+0x11c>)
 800161e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001620:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <MX_TIM1_Init+0x118>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <MX_TIM1_Init+0x118>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800162c:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <MX_TIM1_Init+0x118>)
 800162e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <MX_TIM1_Init+0x118>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <MX_TIM1_Init+0x118>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <MX_TIM1_Init+0x118>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001646:	482e      	ldr	r0, [pc, #184]	@ (8001700 <MX_TIM1_Init+0x118>)
 8001648:	f004 fb63 	bl	8005d12 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 fa15 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001662:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001666:	4619      	mov	r1, r3
 8001668:	4825      	ldr	r0, [pc, #148]	@ (8001700 <MX_TIM1_Init+0x118>)
 800166a:	f005 f965 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001674:	f000 fa04 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001678:	2360      	movs	r3, #96	@ 0x60
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001694:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	4818      	ldr	r0, [pc, #96]	@ (8001700 <MX_TIM1_Init+0x118>)
 800169e:	f004 fc95 	bl	8005fcc <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016a8:	f000 f9ea 	bl	8001a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	@ (8001700 <MX_TIM1_Init+0x118>)
 80016e2:	f005 f9b1 	bl	8006a48 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80016ec:	f000 f9c8 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f0:	4803      	ldr	r0, [pc, #12]	@ (8001700 <MX_TIM1_Init+0x118>)
 80016f2:	f000 fae9 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 80016f6:	bf00      	nop
 80016f8:	3758      	adds	r7, #88	@ 0x58
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200002e0 	.word	0x200002e0
 8001704:	40012c00 	.word	0x40012c00

08001708 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171a:	463b      	mov	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172c:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_TIM3_Init+0xac>)
 800172e:	4a22      	ldr	r2, [pc, #136]	@ (80017b8 <MX_TIM3_Init+0xb0>)
 8001730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <MX_TIM3_Init+0xac>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <MX_TIM3_Init+0xac>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <MX_TIM3_Init+0xac>)
 8001740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <MX_TIM3_Init+0xac>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <MX_TIM3_Init+0xac>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001752:	4818      	ldr	r0, [pc, #96]	@ (80017b4 <MX_TIM3_Init+0xac>)
 8001754:	f004 fadd 	bl	8005d12 <HAL_TIM_PWM_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800175e:	f000 f98f 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	4810      	ldr	r0, [pc, #64]	@ (80017b4 <MX_TIM3_Init+0xac>)
 8001772:	f005 f8e1 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800177c:	f000 f980 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	@ 0x60
 8001782:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	2204      	movs	r2, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <MX_TIM3_Init+0xac>)
 8001798:	f004 fc18 	bl	8005fcc <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80017a2:	f000 f96d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <MX_TIM3_Init+0xac>)
 80017a8:	f000 fa8e 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	@ 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000032c 	.word	0x2000032c
 80017b8:	40000400 	.word	0x40000400

080017bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ce:	463b      	mov	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <MX_TIM4_Init+0xac>)
 80017e2:	4a22      	ldr	r2, [pc, #136]	@ (800186c <MX_TIM4_Init+0xb0>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <MX_TIM4_Init+0xac>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <MX_TIM4_Init+0xac>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <MX_TIM4_Init+0xac>)
 80017f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <MX_TIM4_Init+0xac>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <MX_TIM4_Init+0xac>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001806:	4818      	ldr	r0, [pc, #96]	@ (8001868 <MX_TIM4_Init+0xac>)
 8001808:	f004 fa83 	bl	8005d12 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001812:	f000 f935 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4810      	ldr	r0, [pc, #64]	@ (8001868 <MX_TIM4_Init+0xac>)
 8001826:	f005 f887 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001830:	f000 f926 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	@ 0x60
 8001836:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	@ (8001868 <MX_TIM4_Init+0xac>)
 800184c:	f004 fbbe 	bl	8005fcc <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001856:	f000 f913 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800185a:	4803      	ldr	r0, [pc, #12]	@ (8001868 <MX_TIM4_Init+0xac>)
 800185c:	f000 fa34 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	@ 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000378 	.word	0x20000378
 800186c:	40000800 	.word	0x40000800

08001870 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001874:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <MX_TIM16_Init+0x48>)
 8001876:	4a11      	ldr	r2, [pc, #68]	@ (80018bc <MX_TIM16_Init+0x4c>)
 8001878:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <MX_TIM16_Init+0x48>)
 800187c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001880:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <MX_TIM16_Init+0x48>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_TIM16_Init+0x48>)
 800188a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800188e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_TIM16_Init+0x48>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MX_TIM16_Init+0x48>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_TIM16_Init+0x48>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_TIM16_Init+0x48>)
 80018a4:	f004 f9de 	bl	8005c64 <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80018ae:	f000 f8e7 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200003c4 	.word	0x200003c4
 80018bc:	40014400 	.word	0x40014400

080018c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c4:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018c6:	4a15      	ldr	r2, [pc, #84]	@ (800191c <MX_USART2_UART_Init+0x5c>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_USART2_UART_Init+0x58>)
 8001904:	f005 f91e 	bl	8006b44 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800190e:	f000 f8b7 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000258 	.word	0x20000258
 800191c:	40004400 	.word	0x40004400

08001920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001924:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 8001926:	4a15      	ldr	r2, [pc, #84]	@ (800197c <MX_USART3_UART_Init+0x5c>)
 8001928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 800192c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_USART3_UART_Init+0x58>)
 8001964:	f005 f8ee 	bl	8006b44 <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800196e:	f000 f887 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000410 	.word	0x20000410
 800197c:	40004800 	.word	0x40004800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a37      	ldr	r2, [pc, #220]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a31      	ldr	r2, [pc, #196]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <MX_GPIO_Init+0xf8>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e6:	f002 fded 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	481e      	ldr	r0, [pc, #120]	@ (8001a7c <MX_GPIO_Init+0xfc>)
 8001a02:	f002 fc35 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 B_RIGHT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|B_RIGHT_Pin;
 8001a06:	2312      	movs	r3, #18
 8001a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1e:	f002 fc27 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LEFT_Pin */
  GPIO_InitStruct.Pin = LED_LEFT_Pin;
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f002 fc18 	bl	8004270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2105      	movs	r1, #5
 8001a44:	2007      	movs	r0, #7
 8001a46:	f002 fb5e 	bl	8004106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a4a:	2007      	movs	r0, #7
 8001a4c:	f002 fb77 	bl	800413e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2105      	movs	r1, #5
 8001a54:	200a      	movs	r0, #10
 8001a56:	f002 fb56 	bl	8004106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f002 fb6f 	bl	800413e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2105      	movs	r1, #5
 8001a64:	2028      	movs	r0, #40	@ 0x28
 8001a66:	f002 fb4e 	bl	8004106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a6a:	2028      	movs	r0, #40	@ 0x28
 8001a6c:	f002 fb67 	bl	800413e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48000800 	.word	0x48000800

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <Error_Handler+0x8>

08001a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	4a10      	ldr	r2, [pc, #64]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <HAL_MspInit+0x4c>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	f06f 0001 	mvn.w	r0, #1
 8001aca:	f002 fb1c 	bl	8004106 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0ac      	sub	sp, #176	@ 0xb0
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2288      	movs	r2, #136	@ 0x88
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 fc84 	bl	800b40a <memset>
  if(hadc->Instance==ADC1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a39      	ldr	r2, [pc, #228]	@ (8001bec <HAL_ADC_MspInit+0x110>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d16a      	bne.n	8001be2 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b10:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b12:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b22:	2308      	movs	r3, #8
 8001b24:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b26:	2307      	movs	r3, #7
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b36:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f003 fbd5 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b48:	f7ff ff9a 	bl	8001a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b4c:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b50:	4a27      	ldr	r2, [pc, #156]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b68:	4a21      	ldr	r2, [pc, #132]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b80:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_ADC_MspInit+0x114>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b94:	2308      	movs	r3, #8
 8001b96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001baa:	4619      	mov	r1, r3
 8001bac:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <HAL_ADC_MspInit+0x118>)
 8001bae:	f002 fb5f 	bl	8004270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bb8:	230b      	movs	r3, #11
 8001bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bce:	f002 fb4f 	bl	8004270 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	2012      	movs	r0, #18
 8001bd8:	f002 fa95 	bl	8004106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001bdc:	2012      	movs	r0, #18
 8001bde:	f002 faae 	bl	800413e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001be2:	bf00      	nop
 8001be4:	37b0      	adds	r7, #176	@ 0xb0
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	50040000 	.word	0x50040000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000800 	.word	0x48000800

08001bf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <HAL_TIM_PWM_MspInit+0x80>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10c      	bne.n	8001c24 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c16:	4b19      	ldr	r3, [pc, #100]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c22:	e022      	b.n	8001c6a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a15      	ldr	r2, [pc, #84]	@ (8001c80 <HAL_TIM_PWM_MspInit+0x88>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d10c      	bne.n	8001c48 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2e:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	4a12      	ldr	r2, [pc, #72]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
}
 8001c46:	e010      	b.n	8001c6a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10b      	bne.n	8001c6a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	4a09      	ldr	r2, [pc, #36]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <HAL_TIM_PWM_MspInit+0x84>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40012c00 	.word	0x40012c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800

08001c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_TIM_Base_MspInit+0x38>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10b      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40014400 	.word	0x40014400
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a34      	ldr	r2, [pc, #208]	@ (8001db8 <HAL_TIM_MspPostInit+0xf0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d11e      	bne.n	8001d28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	4a33      	ldr	r2, [pc, #204]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf6:	4b31      	ldr	r3, [pc, #196]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d22:	f002 faa5 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d26:	e042      	b.n	8001dae <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a24      	ldr	r2, [pc, #144]	@ (8001dc0 <HAL_TIM_MspPostInit+0xf8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d11c      	bne.n	8001d6c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d36:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4817      	ldr	r0, [pc, #92]	@ (8001dc4 <HAL_TIM_MspPostInit+0xfc>)
 8001d66:	f002 fa83 	bl	8004270 <HAL_GPIO_Init>
}
 8001d6a:	e020      	b.n	8001dae <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <HAL_TIM_MspPostInit+0x100>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d11b      	bne.n	8001dae <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <HAL_TIM_MspPostInit+0xf4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d8e:	2340      	movs	r3, #64	@ 0x40
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4808      	ldr	r0, [pc, #32]	@ (8001dcc <HAL_TIM_MspPostInit+0x104>)
 8001daa:	f002 fa61 	bl	8004270 <HAL_GPIO_Init>
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40012c00 	.word	0x40012c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	40000800 	.word	0x40000800
 8001dcc:	48000400 	.word	0x48000400

08001dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0ae      	sub	sp, #184	@ 0xb8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2288      	movs	r2, #136	@ 0x88
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f009 fb0a 	bl	800b40a <memset>
  if(huart->Instance==USART2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001f24 <HAL_UART_MspInit+0x154>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d144      	bne.n	8001e8a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fa6d 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e18:	f7ff fe32 	bl	8001a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1c:	4b42      	ldr	r3, [pc, #264]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	4a41      	ldr	r2, [pc, #260]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e28:	4b3f      	ldr	r3, [pc, #252]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	4b3c      	ldr	r3, [pc, #240]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e40:	4b39      	ldr	r3, [pc, #228]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e64:	2307      	movs	r3, #7
 8001e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e74:	f002 f9fc 	bl	8004270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2105      	movs	r1, #5
 8001e7c:	2026      	movs	r0, #38	@ 0x26
 8001e7e:	f002 f942 	bl	8004106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e82:	2026      	movs	r0, #38	@ 0x26
 8001e84:	f002 f95b 	bl	800413e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e88:	e047      	b.n	8001f1a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a27      	ldr	r2, [pc, #156]	@ (8001f2c <HAL_UART_MspInit+0x15c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d142      	bne.n	8001f1a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e94:	2304      	movs	r3, #4
 8001e96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fa23 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001eac:	f7ff fde8 	bl	8001a80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001eb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	4a16      	ldr	r2, [pc, #88]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <HAL_UART_MspInit+0x158>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ee0:	2330      	movs	r3, #48	@ 0x30
 8001ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f02:	4619      	mov	r1, r3
 8001f04:	480a      	ldr	r0, [pc, #40]	@ (8001f30 <HAL_UART_MspInit+0x160>)
 8001f06:	f002 f9b3 	bl	8004270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	2027      	movs	r0, #39	@ 0x27
 8001f10:	f002 f8f9 	bl	8004106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f14:	2027      	movs	r0, #39	@ 0x27
 8001f16:	f002 f912 	bl	800413e <HAL_NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	37b8      	adds	r7, #184	@ 0xb8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40004400 	.word	0x40004400
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40004800 	.word	0x40004800
 8001f30:	48000800 	.word	0x48000800

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <NMI_Handler+0x4>

08001f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <HardFault_Handler+0x4>

08001f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <MemManage_Handler+0x4>

08001f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6e:	f000 f993 	bl	8002298 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f72:	f007 fc3b 	bl	80097ec <xTaskGetSchedulerState>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d001      	beq.n	8001f80 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f7c:	f008 fa34 	bl	800a3e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f002 fb33 	bl	80045f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_RIGHT_Pin);
 8001f96:	2010      	movs	r0, #16
 8001f98:	f002 fb2c 	bl	80045f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <ADC1_2_IRQHandler+0x10>)
 8001fa6:	f000 feff 	bl	8002da8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200001f4 	.word	0x200001f4

08001fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <USART2_IRQHandler+0x10>)
 8001fba:	f004 fe9b 	bl	8006cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000258 	.word	0x20000258

08001fc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <USART3_IRQHandler+0x10>)
 8001fce:	f004 fe91 	bl	8006cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000410 	.word	0x20000410

08001fdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fe0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fe4:	f002 fb06 	bl	80045f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return 1;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_kill>:

int _kill(int pid, int sig)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002006:	f009 fa53 	bl	800b4b0 <__errno>
 800200a:	4603      	mov	r3, r0
 800200c:	2216      	movs	r2, #22
 800200e:	601a      	str	r2, [r3, #0]
  return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_exit>:

void _exit (int status)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ffe7 	bl	8001ffc <_kill>
  while (1) {}    /* Make sure we hang here */
 800202e:	bf00      	nop
 8002030:	e7fd      	b.n	800202e <_exit+0x12>

08002032 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e00a      	b.n	800205a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002044:	f3af 8000 	nop.w
 8002048:	4601      	mov	r1, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	60ba      	str	r2, [r7, #8]
 8002050:	b2ca      	uxtb	r2, r1
 8002052:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	dbf0      	blt.n	8002044 <_read+0x12>
  }

  return len;
 8002062:	687b      	ldr	r3, [r7, #4]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	e009      	b.n	8002092 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	60ba      	str	r2, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	dbf1      	blt.n	800207e <_write+0x12>
  }
  return len;
 800209a:	687b      	ldr	r3, [r7, #4]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_close>:

int _close(int file)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020cc:	605a      	str	r2, [r3, #4]
  return 0;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_isatty>:

int _isatty(int file)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e4:	2301      	movs	r3, #1
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002114:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <_sbrk+0x5c>)
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <_sbrk+0x60>)
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <_sbrk+0x64>)
 800212a:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <_sbrk+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800213c:	f009 f9b8 	bl	800b4b0 <__errno>
 8002140:	4603      	mov	r3, r0
 8002142:	220c      	movs	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	e009      	b.n	8002160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <_sbrk+0x64>)
 800215c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20018000 	.word	0x20018000
 800216c:	00000400 	.word	0x00000400
 8002170:	200004a4 	.word	0x200004a4
 8002174:	20001f00 	.word	0x20001f00

08002178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <SystemInit+0x20>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <SystemInit+0x20>)
 8002184:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a0:	f7ff ffea 	bl	8002178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	@ (80021dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <LoopForever+0xe>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	@ (80021e8 <LoopForever+0x16>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ca:	f009 f977 	bl	800b4bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ce:	f7fe feb3 	bl	8000f38 <main>

080021d2 <LoopForever>:

LoopForever:
    b LoopForever
 80021d2:	e7fe      	b.n	80021d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80021e0:	0800d9d8 	.word	0x0800d9d8
  ldr r2, =_sbss
 80021e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021e8:	20001f00 	.word	0x20001f00

080021ec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC3_IRQHandler>

080021ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f001 ff79 	bl	80040f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fe:	200f      	movs	r0, #15
 8002200:	f000 f80e 	bl	8002220 <HAL_InitTick>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	e001      	b.n	8002214 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002210:	f7ff fc3c 	bl	8001a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002214:	79fb      	ldrb	r3, [r7, #7]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <HAL_InitTick+0x6c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d023      	beq.n	800227c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002234:	4b16      	ldr	r3, [pc, #88]	@ (8002290 <HAL_InitTick+0x70>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b14      	ldr	r3, [pc, #80]	@ (800228c <HAL_InitTick+0x6c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f001 ff85 	bl	800415a <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d809      	bhi.n	8002270 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225c:	2200      	movs	r2, #0
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f001 ff4f 	bl	8004106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002268:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <HAL_InitTick+0x74>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e007      	b.n	8002280 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e004      	b.n	8002280 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e001      	b.n	8002280 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000008 	.word	0x20000008
 8002290:	20000000 	.word	0x20000000
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000008 	.word	0x20000008
 80022bc:	200004a8 	.word	0x200004a8

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	200004a8 	.word	0x200004a8

080022d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	609a      	str	r2, [r3, #8]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3360      	adds	r3, #96	@ 0x60
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <LL_ADC_SetOffset+0x44>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	4313      	orrs	r3, r2
 8002370:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	03fff000 	.word	0x03fff000

08002388 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3360      	adds	r3, #96	@ 0x60
 8002396:	461a      	mov	r2, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3360      	adds	r3, #96	@ 0x60
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3330      	adds	r3, #48	@ 0x30
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	4413      	add	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	211f      	movs	r1, #31
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	f003 011f 	and.w	r1, r3, #31
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	431a      	orrs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002474:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3314      	adds	r3, #20
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0e5b      	lsrs	r3, r3, #25
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	4413      	add	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	0d1b      	lsrs	r3, r3, #20
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2107      	movs	r1, #7
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	401a      	ands	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	0d1b      	lsrs	r3, r3, #20
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	431a      	orrs	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0318 	and.w	r3, r3, #24
 8002506:	4908      	ldr	r1, [pc, #32]	@ (8002528 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002508:	40d9      	lsrs	r1, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	400b      	ands	r3, r1
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	431a      	orrs	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	0007ffff 	.word	0x0007ffff

0800252c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 031f 	and.w	r3, r3, #31
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6093      	str	r3, [r2, #8]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800259c:	d101      	bne.n	80025a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025ec:	d101      	bne.n	80025f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <LL_ADC_IsEnabled+0x18>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <LL_ADC_IsEnabled+0x1a>
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d101      	bne.n	800268e <LL_ADC_IsDisableOngoing+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_ADC_IsDisableOngoing+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026d8:	f043 0210 	orr.w	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d101      	bne.n	8002704 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002722:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b08      	cmp	r3, #8
 800274c:	d101      	bne.n	8002752 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e130      	b.n	80029dc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff f9a7 	bl	8001adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fef1 	bl	8002588 <LL_ADC_IsDeepPowerDownEnabled>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d004      	beq.n	80027b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fed7 	bl	8002564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff0c 	bl	80025d8 <LL_ADC_IsInternalRegulatorEnabled>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fef0 	bl	80025b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d0:	4b84      	ldr	r3, [pc, #528]	@ (80029e4 <HAL_ADC_Init+0x284>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	4a84      	ldr	r2, [pc, #528]	@ (80029e8 <HAL_ADC_Init+0x288>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	3301      	adds	r3, #1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027e4:	e002      	b.n	80027ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f9      	bne.n	80027e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff feee 	bl	80025d8 <LL_ADC_IsInternalRegulatorEnabled>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10d      	bne.n	800281e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff ff62 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8002828:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 80c9 	bne.w	80029ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 80c5 	bne.w	80029ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002848:	f043 0202 	orr.w	r2, r3, #2
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fefb 	bl	8002650 <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d115      	bne.n	800288c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002860:	4862      	ldr	r0, [pc, #392]	@ (80029ec <HAL_ADC_Init+0x28c>)
 8002862:	f7ff fef5 	bl	8002650 <LL_ADC_IsEnabled>
 8002866:	4604      	mov	r4, r0
 8002868:	4861      	ldr	r0, [pc, #388]	@ (80029f0 <HAL_ADC_Init+0x290>)
 800286a:	f7ff fef1 	bl	8002650 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	431c      	orrs	r4, r3
 8002872:	4860      	ldr	r0, [pc, #384]	@ (80029f4 <HAL_ADC_Init+0x294>)
 8002874:	f7ff feec 	bl	8002650 <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	4323      	orrs	r3, r4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4619      	mov	r1, r3
 8002886:	485c      	ldr	r0, [pc, #368]	@ (80029f8 <HAL_ADC_Init+0x298>)
 8002888:	f7ff fd26 	bl	80022d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e5b      	ldrb	r3, [r3, #25]
 8002890:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002896:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800289c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d106      	bne.n	80028c8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	3b01      	subs	r3, #1
 80028c0:	045b      	lsls	r3, r3, #17
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b44      	ldr	r3, [pc, #272]	@ (80029fc <HAL_ADC_Init+0x29c>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff1c 	bl	800273a <LL_ADC_INJ_IsConversionOngoing>
 8002902:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d13d      	bne.n	8002986 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13a      	bne.n	8002986 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002914:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800291c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800292c:	f023 0302 	bic.w	r3, r3, #2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	69b9      	ldr	r1, [r7, #24]
 8002936:	430b      	orrs	r3, r1
 8002938:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002940:	2b01      	cmp	r3, #1
 8002942:	d118      	bne.n	8002976 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800294e:	f023 0304 	bic.w	r3, r3, #4
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002966:	430a      	orrs	r2, r1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	611a      	str	r2, [r3, #16]
 8002974:	e007      	b.n	8002986 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d10c      	bne.n	80029a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	f023 010f 	bic.w	r1, r3, #15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80029a6:	e007      	b.n	80029b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 020f 	bic.w	r2, r2, #15
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029bc:	f023 0303 	bic.w	r3, r3, #3
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80029c8:	e007      	b.n	80029da <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029da:	7ffb      	ldrb	r3, [r7, #31]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3724      	adds	r7, #36	@ 0x24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	20000000 	.word	0x20000000
 80029e8:	053e2d63 	.word	0x053e2d63
 80029ec:	50040000 	.word	0x50040000
 80029f0:	50040100 	.word	0x50040100
 80029f4:	50040200 	.word	0x50040200
 80029f8:	50040300 	.word	0x50040300
 80029fc:	fff0c007 	.word	0xfff0c007

08002a00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a08:	4857      	ldr	r0, [pc, #348]	@ (8002b68 <HAL_ADC_Start+0x168>)
 8002a0a:	f7ff fd8f 	bl	800252c <LL_ADC_GetMultimode>
 8002a0e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe69 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 809c 	bne.w	8002b5a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_Start+0x30>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e097      	b.n	8002b60 <HAL_ADC_Start+0x160>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f001 f89b 	bl	8003b74 <ADC_Enable>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a42:	7dfb      	ldrb	r3, [r7, #23]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 8083 	bne.w	8002b50 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a42      	ldr	r2, [pc, #264]	@ (8002b6c <HAL_ADC_Start+0x16c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d002      	beq.n	8002a6e <HAL_ADC_Start+0x6e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	e000      	b.n	8002a70 <HAL_ADC_Start+0x70>
 8002a6e:	4b40      	ldr	r3, [pc, #256]	@ (8002b70 <HAL_ADC_Start+0x170>)
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d002      	beq.n	8002a7e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a82:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f023 0206 	bic.w	r2, r3, #6
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	221c      	movs	r2, #28
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b6c <HAL_ADC_Start+0x16c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d002      	beq.n	8002acc <HAL_ADC_Start+0xcc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e000      	b.n	8002ace <HAL_ADC_Start+0xce>
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_ADC_Start+0x170>)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d008      	beq.n	8002ae8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d002      	beq.n	8002ae8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b09      	cmp	r3, #9
 8002ae6:	d114      	bne.n	8002b12 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002afe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fdc6 	bl	800269c <LL_ADC_REG_StartConversion>
 8002b10:	e025      	b.n	8002b5e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <HAL_ADC_Start+0x16c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d002      	beq.n	8002b2e <HAL_ADC_Start+0x12e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e000      	b.n	8002b30 <HAL_ADC_Start+0x130>
 8002b2e:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <HAL_ADC_Start+0x170>)
 8002b30:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00f      	beq.n	8002b5e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b4e:	e006      	b.n	8002b5e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002b58:	e001      	b.n	8002b5e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	50040300 	.word	0x50040300
 8002b6c:	50040100 	.word	0x50040100
 8002b70:	50040000 	.word	0x50040000

08002b74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Stop+0x16>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e023      	b.n	8002bd2 <HAL_ADC_Stop+0x5e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b92:	2103      	movs	r1, #3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 ff31 	bl	80039fc <ADC_ConversionStop>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d111      	bne.n	8002bc8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f001 f86b 	bl	8003c80 <ADC_Disable>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be6:	4866      	ldr	r0, [pc, #408]	@ (8002d80 <HAL_ADC_PollForConversion+0x1a4>)
 8002be8:	f7ff fca0 	bl	800252c <LL_ADC_GetMultimode>
 8002bec:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e02a      	b.n	8002c52 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d111      	bne.n	8002c32 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0a4      	b.n	8002d76 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c30:	e00f      	b.n	8002c52 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c32:	4853      	ldr	r0, [pc, #332]	@ (8002d80 <HAL_ADC_PollForConversion+0x1a4>)
 8002c34:	f7ff fc88 	bl	8002548 <LL_ADC_GetMultiDMATransfer>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e093      	b.n	8002d76 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c4e:	2304      	movs	r3, #4
 8002c50:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c52:	f7ff fb35 	bl	80022c0 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c58:	e021      	b.n	8002c9e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d01d      	beq.n	8002c9e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c62:	f7ff fb2d 	bl	80022c0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <HAL_ADC_PollForConversion+0x9c>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d112      	bne.n	8002c9e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8a:	f043 0204 	orr.w	r2, r3, #4
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e06b      	b.n	8002d76 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0d6      	beq.n	8002c5a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fb94 	bl	80023ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01c      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e5b      	ldrb	r3, [r3, #25]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d118      	bne.n	8002d02 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d111      	bne.n	8002d02 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d105      	bne.n	8002d02 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <HAL_ADC_PollForConversion+0x1a8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d002      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x136>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	e000      	b.n	8002d14 <HAL_ADC_PollForConversion+0x138>
 8002d12:	4b1d      	ldr	r3, [pc, #116]	@ (8002d88 <HAL_ADC_PollForConversion+0x1ac>)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d008      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d002      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b09      	cmp	r3, #9
 8002d2c:	d104      	bne.n	8002d38 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e00c      	b.n	8002d52 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a11      	ldr	r2, [pc, #68]	@ (8002d84 <HAL_ADC_PollForConversion+0x1a8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d002      	beq.n	8002d48 <HAL_ADC_PollForConversion+0x16c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	e000      	b.n	8002d4a <HAL_ADC_PollForConversion+0x16e>
 8002d48:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_ADC_PollForConversion+0x1ac>)
 8002d4a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d104      	bne.n	8002d62 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e008      	b.n	8002d74 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	220c      	movs	r2, #12
 8002d72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	50040300 	.word	0x50040300
 8002d84:	50040100 	.word	0x50040100
 8002d88:	50040000 	.word	0x50040000

08002d8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	@ 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc4:	4882      	ldr	r0, [pc, #520]	@ (8002fd0 <HAL_ADC_IRQHandler+0x228>)
 8002dc6:	f7ff fbb1 	bl	800252c <LL_ADC_GetMultimode>
 8002dca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d017      	beq.n	8002e06 <HAL_ADC_IRQHandler+0x5e>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d012      	beq.n	8002e06 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 ffee 	bl	8003dda <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2202      	movs	r2, #2
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x72>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10a      	bne.n	8002e30 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8083 	beq.w	8002f2c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d07d      	beq.n	8002f2c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff facc 	bl	80023ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d062      	beq.n	8002f1e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd4 <HAL_ADC_IRQHandler+0x22c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d002      	beq.n	8002e68 <HAL_ADC_IRQHandler+0xc0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	e000      	b.n	8002e6a <HAL_ADC_IRQHandler+0xc2>
 8002e68:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd8 <HAL_ADC_IRQHandler+0x230>)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d008      	beq.n	8002e84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d002      	beq.n	8002e84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d104      	bne.n	8002e8e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	e00c      	b.n	8002ea8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a50      	ldr	r2, [pc, #320]	@ (8002fd4 <HAL_ADC_IRQHandler+0x22c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d002      	beq.n	8002e9e <HAL_ADC_IRQHandler+0xf6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	e000      	b.n	8002ea0 <HAL_ADC_IRQHandler+0xf8>
 8002e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd8 <HAL_ADC_IRQHandler+0x230>)
 8002ea0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d135      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d12e      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fc11 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d11a      	bne.n	8002f06 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020c 	bic.w	r2, r2, #12
 8002ede:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d112      	bne.n	8002f1e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f04:	e00b      	b.n	8002f1e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f95c 	bl	80031dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	220c      	movs	r2, #12
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x198>
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 809f 	beq.w	800308a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8099 	beq.w	800308a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fa77 	bl	8002468 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f7a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fa32 	bl	80023ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f86:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a11      	ldr	r2, [pc, #68]	@ (8002fd4 <HAL_ADC_IRQHandler+0x22c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d002      	beq.n	8002f98 <HAL_ADC_IRQHandler+0x1f0>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_ADC_IRQHandler+0x1f2>
 8002f98:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <HAL_ADC_IRQHandler+0x230>)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d008      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d002      	beq.n	8002fb4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	d104      	bne.n	8002fbe <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	e013      	b.n	8002fe6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_ADC_IRQHandler+0x22c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_ADC_IRQHandler+0x234>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	e007      	b.n	8002fde <HAL_ADC_IRQHandler+0x236>
 8002fce:	bf00      	nop
 8002fd0:	50040300 	.word	0x50040300
 8002fd4:	50040100 	.word	0x50040100
 8002fd8:	50040000 	.word	0x50040000
 8002fdc:	4b7d      	ldr	r3, [pc, #500]	@ (80031d4 <HAL_ADC_IRQHandler+0x42c>)
 8002fde:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d047      	beq.n	800307c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <HAL_ADC_IRQHandler+0x25e>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d03f      	beq.n	800307c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003002:	2b00      	cmp	r3, #0
 8003004:	d13a      	bne.n	800307c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003010:	2b40      	cmp	r3, #64	@ 0x40
 8003012:	d133      	bne.n	800307c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d12e      	bne.n	800307c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fb89 	bl	800273a <LL_ADC_INJ_IsConversionOngoing>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11a      	bne.n	8003064 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800303c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d112      	bne.n	800307c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
 8003062:	e00b      	b.n	800307c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fe84 	bl	8003d8a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2260      	movs	r2, #96	@ 0x60
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d011      	beq.n	80030b8 <HAL_ADC_IRQHandler+0x310>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8a0 	bl	80031f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2280      	movs	r2, #128	@ 0x80
 80030b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x340>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fe6a 	bl	8003db2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_ADC_IRQHandler+0x370>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fe5c 	bl	8003dc6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d036      	beq.n	8003190 <HAL_ADC_IRQHandler+0x3e8>
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d031      	beq.n	8003190 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003134:	2301      	movs	r3, #1
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
 8003138:	e014      	b.n	8003164 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003140:	4825      	ldr	r0, [pc, #148]	@ (80031d8 <HAL_ADC_IRQHandler+0x430>)
 8003142:	f7ff fa01 	bl	8002548 <LL_ADC_GetMultiDMATransfer>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800314c:	2301      	movs	r3, #1
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003150:	e008      	b.n	8003164 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003160:	2301      	movs	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10e      	bne.n	8003188 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	f043 0202 	orr.w	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f83e 	bl	8003204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003196:	2b00      	cmp	r3, #0
 8003198:	d018      	beq.n	80031cc <HAL_ADC_IRQHandler+0x424>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	f043 0208 	orr.w	r2, r3, #8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031c4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fde9 	bl	8003d9e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031cc:	bf00      	nop
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	50040000 	.word	0x50040000
 80031d8:	50040300 	.word	0x50040300

080031dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b0b6      	sub	sp, #216	@ 0xd8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x22>
 8003236:	2302      	movs	r3, #2
 8003238:	e3c9      	b.n	80039ce <HAL_ADC_ConfigChannel+0x7b6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fa50 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 83aa 	bne.w	80039a8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b05      	cmp	r3, #5
 8003262:	d824      	bhi.n	80032ae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	3b02      	subs	r3, #2
 800326a:	2b03      	cmp	r3, #3
 800326c:	d81b      	bhi.n	80032a6 <HAL_ADC_ConfigChannel+0x8e>
 800326e:	a201      	add	r2, pc, #4	@ (adr r2, 8003274 <HAL_ADC_ConfigChannel+0x5c>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003285 	.word	0x08003285
 8003278:	0800328d 	.word	0x0800328d
 800327c:	08003295 	.word	0x08003295
 8003280:	0800329d 	.word	0x0800329d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003284:	230c      	movs	r3, #12
 8003286:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800328a:	e010      	b.n	80032ae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800328c:	2312      	movs	r3, #18
 800328e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003292:	e00c      	b.n	80032ae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003294:	2318      	movs	r3, #24
 8003296:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800329a:	e008      	b.n	80032ae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800329c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032a4:	e003      	b.n	80032ae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80032a6:	2306      	movs	r3, #6
 80032a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80032ac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80032bc:	f7ff f8a8 	bl	8002410 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fa11 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 80032ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fa31 	bl	800273a <LL_ADC_INJ_IsConversionOngoing>
 80032d8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 81a4 	bne.w	800362e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 819f 	bne.w	800362e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f7ff f8c6 	bl	800248e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d00a      	beq.n	800333a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6919      	ldr	r1, [r3, #16]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003334:	f7ff f804 	bl	8002340 <LL_ADC_SetOffset>
 8003338:	e179      	b.n	800362e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f821 	bl	8002388 <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x14e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff f816 	bl	8002388 <LL_ADC_GetOffsetChannel>
 800335c:	4603      	mov	r3, r0
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	e01e      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x18c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f80b 	bl	8002388 <LL_ADC_GetOffsetChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003388:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800338c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e004      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003398:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1a4>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	e018      	b.n	80033ee <HAL_ADC_ConfigChannel+0x1d6>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033c8:	fa93 f3a3 	rbit	r3, r3
 80033cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80033d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80033d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80033e0:	2320      	movs	r3, #32
 80033e2:	e004      	b.n	80033ee <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d106      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe ffda 	bl	80023b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ffbe 	bl	8002388 <LL_ADC_GetOffsetChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_ADC_ConfigChannel+0x214>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe ffb3 	bl	8002388 <LL_ADC_GetOffsetChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	e01e      	b.n	800346a <HAL_ADC_ConfigChannel+0x252>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe ffa8 	bl	8002388 <LL_ADC_GetOffsetChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800344a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800344e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e004      	b.n	8003468 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800345e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x26a>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0e9b      	lsrs	r3, r3, #26
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	e018      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x29c>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003496:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800349a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800349e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80034a6:	2320      	movs	r3, #32
 80034a8:	e004      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80034aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d106      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2200      	movs	r2, #0
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe ff77 	bl	80023b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe ff5b 	bl	8002388 <LL_ADC_GetOffsetChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x2da>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff50 	bl	8002388 <LL_ADC_GetOffsetChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	e01e      	b.n	8003530 <HAL_ADC_ConfigChannel+0x318>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe ff45 	bl	8002388 <LL_ADC_GetOffsetChannel>
 80034fe:	4603      	mov	r3, r0
 8003500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003510:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e004      	b.n	800352e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x330>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	e014      	b.n	8003572 <HAL_ADC_ConfigChannel+0x35a>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800355c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e004      	b.n	8003572 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003568:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003572:	429a      	cmp	r2, r3
 8003574:	d106      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe ff18 	bl	80023b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2103      	movs	r1, #3
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fefc 	bl	8002388 <LL_ADC_GetOffsetChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x398>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2103      	movs	r1, #3
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fef1 	bl	8002388 <LL_ADC_GetOffsetChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	f003 021f 	and.w	r2, r3, #31
 80035ae:	e017      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x3c8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2103      	movs	r1, #3
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fee6 	bl	8002388 <LL_ADC_GetOffsetChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80035c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035ca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80035cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e003      	b.n	80035de <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80035d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x3e0>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	e011      	b.n	800361c <HAL_ADC_ConfigChannel+0x404>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003608:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800360a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003610:	2320      	movs	r3, #32
 8003612:	e003      	b.n	800361c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800361c:	429a      	cmp	r2, r3
 800361e:	d106      	bne.n	800362e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	2103      	movs	r1, #3
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fec3 	bl	80023b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff f80c 	bl	8002650 <LL_ADC_IsEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 8140 	bne.w	80038c0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6819      	ldr	r1, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	461a      	mov	r2, r3
 800364e:	f7fe ff49 	bl	80024e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	4a8f      	ldr	r2, [pc, #572]	@ (8003894 <HAL_ADC_ConfigChannel+0x67c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	f040 8131 	bne.w	80038c0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x46e>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	3301      	adds	r3, #1
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2b09      	cmp	r3, #9
 800367c:	bf94      	ite	ls
 800367e:	2301      	movls	r3, #1
 8003680:	2300      	movhi	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e019      	b.n	80036ba <HAL_ADC_ConfigChannel+0x4a2>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003696:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800369e:	2320      	movs	r3, #32
 80036a0:	e003      	b.n	80036aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80036a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	bf94      	ite	ls
 80036b4:	2301      	movls	r3, #1
 80036b6:	2300      	movhi	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d079      	beq.n	80037b2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_ADC_ConfigChannel+0x4c2>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	0e9b      	lsrs	r3, r3, #26
 80036d0:	3301      	adds	r3, #1
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036d8:	e015      	b.n	8003706 <HAL_ADC_ConfigChannel+0x4ee>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036f2:	2320      	movs	r3, #32
 80036f4:	e003      	b.n	80036fe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	069b      	lsls	r3, r3, #26
 8003702:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x50e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0e9b      	lsrs	r3, r3, #26
 8003718:	3301      	adds	r3, #1
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2101      	movs	r1, #1
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	e017      	b.n	8003756 <HAL_ADC_ConfigChannel+0x53e>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003736:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800373e:	2320      	movs	r3, #32
 8003740:	e003      	b.n	800374a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	3301      	adds	r3, #1
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	ea42 0103 	orr.w	r1, r2, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <HAL_ADC_ConfigChannel+0x564>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	0e9b      	lsrs	r3, r3, #26
 800376c:	3301      	adds	r3, #1
 800376e:	f003 021f 	and.w	r2, r3, #31
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	051b      	lsls	r3, r3, #20
 800377a:	e018      	b.n	80037ae <HAL_ADC_ConfigChannel+0x596>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003794:	2320      	movs	r3, #32
 8003796:	e003      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	fab3 f383 	clz	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f003 021f 	and.w	r2, r3, #31
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ae:	430b      	orrs	r3, r1
 80037b0:	e081      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x5b6>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	0e9b      	lsrs	r3, r3, #26
 80037c4:	3301      	adds	r3, #1
 80037c6:	069b      	lsls	r3, r3, #26
 80037c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037cc:	e015      	b.n	80037fa <HAL_ADC_ConfigChannel+0x5e2>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80037e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037e6:	2320      	movs	r3, #32
 80037e8:	e003      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	069b      	lsls	r3, r3, #26
 80037f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_ADC_ConfigChannel+0x602>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	0e9b      	lsrs	r3, r3, #26
 800380c:	3301      	adds	r3, #1
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	e017      	b.n	800384a <HAL_ADC_ConfigChannel+0x632>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	61bb      	str	r3, [r7, #24]
  return result;
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003832:	2320      	movs	r3, #32
 8003834:	e003      	b.n	800383e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	fab3 f383 	clz	r3, r3
 800383c:	b2db      	uxtb	r3, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	ea42 0103 	orr.w	r1, r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10d      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x65e>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0e9b      	lsrs	r3, r3, #26
 8003860:	3301      	adds	r3, #1
 8003862:	f003 021f 	and.w	r2, r3, #31
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	3b1e      	subs	r3, #30
 800386e:	051b      	lsls	r3, r3, #20
 8003870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003874:	e01e      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x69c>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	60fb      	str	r3, [r7, #12]
  return result;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800388e:	2320      	movs	r3, #32
 8003890:	e006      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x688>
 8003892:	bf00      	nop
 8003894:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	3301      	adds	r3, #1
 80038a2:	f003 021f 	and.w	r2, r3, #31
 80038a6:	4613      	mov	r3, r2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	4413      	add	r3, r2
 80038ac:	3b1e      	subs	r3, #30
 80038ae:	051b      	lsls	r3, r3, #20
 80038b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ba:	4619      	mov	r1, r3
 80038bc:	f7fe fde7 	bl	800248e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d07a      	beq.n	80039c2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038cc:	4843      	ldr	r0, [pc, #268]	@ (80039dc <HAL_ADC_ConfigChannel+0x7c4>)
 80038ce:	f7fe fd29 	bl	8002324 <LL_ADC_GetCommonPathInternalCh>
 80038d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a41      	ldr	r2, [pc, #260]	@ (80039e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d12c      	bne.n	800393a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d126      	bne.n	800393a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a3c      	ldr	r2, [pc, #240]	@ (80039e4 <HAL_ADC_ConfigChannel+0x7cc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_ADC_ConfigChannel+0x6e8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a3b      	ldr	r2, [pc, #236]	@ (80039e8 <HAL_ADC_ConfigChannel+0x7d0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d15d      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003904:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003908:	4619      	mov	r1, r3
 800390a:	4834      	ldr	r0, [pc, #208]	@ (80039dc <HAL_ADC_ConfigChannel+0x7c4>)
 800390c:	f7fe fcf7 	bl	80022fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003910:	4b36      	ldr	r3, [pc, #216]	@ (80039ec <HAL_ADC_ConfigChannel+0x7d4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	4a36      	ldr	r2, [pc, #216]	@ (80039f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800392a:	e002      	b.n	8003932 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	3b01      	subs	r3, #1
 8003930:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f9      	bne.n	800392c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003938:	e040      	b.n	80039bc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2d      	ldr	r2, [pc, #180]	@ (80039f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d118      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d112      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a23      	ldr	r2, [pc, #140]	@ (80039e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_ADC_ConfigChannel+0x74c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a22      	ldr	r2, [pc, #136]	@ (80039e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d12d      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800396c:	4619      	mov	r1, r3
 800396e:	481b      	ldr	r0, [pc, #108]	@ (80039dc <HAL_ADC_ConfigChannel+0x7c4>)
 8003970:	f7fe fcc5 	bl	80022fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003974:	e024      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1f      	ldr	r2, [pc, #124]	@ (80039f8 <HAL_ADC_ConfigChannel+0x7e0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d120      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d11a      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a14      	ldr	r2, [pc, #80]	@ (80039e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d115      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800399a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800399e:	4619      	mov	r1, r3
 80039a0:	480e      	ldr	r0, [pc, #56]	@ (80039dc <HAL_ADC_ConfigChannel+0x7c4>)
 80039a2:	f7fe fcac 	bl	80022fe <LL_ADC_SetCommonPathInternalCh>
 80039a6:	e00c      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80039ba:	e002      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	37d8      	adds	r7, #216	@ 0xd8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	80080000 	.word	0x80080000
 80039dc:	50040300 	.word	0x50040300
 80039e0:	c7520000 	.word	0xc7520000
 80039e4:	50040000 	.word	0x50040000
 80039e8:	50040200 	.word	0x50040200
 80039ec:	20000000 	.word	0x20000000
 80039f0:	053e2d63 	.word	0x053e2d63
 80039f4:	cb840000 	.word	0xcb840000
 80039f8:	80000001 	.word	0x80000001

080039fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fe6a 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8003a18:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fe8b 	bl	800273a <LL_ADC_INJ_IsConversionOngoing>
 8003a24:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8098 	beq.w	8003b64 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d02a      	beq.n	8003a98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7e5b      	ldrb	r3, [r3, #25]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d126      	bne.n	8003a98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7e1b      	ldrb	r3, [r3, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d122      	bne.n	8003a98 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a52:	2301      	movs	r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a56:	e014      	b.n	8003a82 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4a45      	ldr	r2, [pc, #276]	@ (8003b70 <ADC_ConversionStop+0x174>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d90d      	bls.n	8003a7c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a64:	f043 0210 	orr.w	r2, r3, #16
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e074      	b.n	8003b66 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	d1e3      	bne.n	8003a58 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2240      	movs	r2, #64	@ 0x40
 8003a96:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d014      	beq.n	8003ac8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fe22 	bl	80026ec <LL_ADC_REG_IsConversionOngoing>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fddf 	bl	8002676 <LL_ADC_IsDisableOngoing>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fdfe 	bl	80026c4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d014      	beq.n	8003af8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fe31 	bl	800273a <LL_ADC_INJ_IsConversionOngoing>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe fdc7 	bl	8002676 <LL_ADC_IsDisableOngoing>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fe0d 	bl	8002712 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d005      	beq.n	8003b0a <ADC_ConversionStop+0x10e>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d105      	bne.n	8003b10 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003b04:	230c      	movs	r3, #12
 8003b06:	617b      	str	r3, [r7, #20]
        break;
 8003b08:	e005      	b.n	8003b16 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	617b      	str	r3, [r7, #20]
        break;
 8003b0e:	e002      	b.n	8003b16 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b10:	2304      	movs	r3, #4
 8003b12:	617b      	str	r3, [r7, #20]
        break;
 8003b14:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b16:	f7fe fbd3 	bl	80022c0 <HAL_GetTick>
 8003b1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b1c:	e01b      	b.n	8003b56 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b1e:	f7fe fbcf 	bl	80022c0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d914      	bls.n	8003b56 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1dc      	bne.n	8003b1e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	a33fffff 	.word	0xa33fffff

08003b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe fd63 	bl	8002650 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d169      	bne.n	8003c64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	4b36      	ldr	r3, [pc, #216]	@ (8003c70 <ADC_Enable+0xfc>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba2:	f043 0210 	orr.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	f043 0201 	orr.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e055      	b.n	8003c66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe fd1e 	bl	8002600 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bc4:	482b      	ldr	r0, [pc, #172]	@ (8003c74 <ADC_Enable+0x100>)
 8003bc6:	f7fe fbad 	bl	8002324 <LL_ADC_GetCommonPathInternalCh>
 8003bca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bd4:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <ADC_Enable+0x104>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <ADC_Enable+0x108>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bee:	e002      	b.n	8003bf6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f9      	bne.n	8003bf0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bfc:	f7fe fb60 	bl	80022c0 <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c02:	e028      	b.n	8003c56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fd21 	bl	8002650 <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d104      	bne.n	8003c1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fcf1 	bl	8002600 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c1e:	f7fe fb4f 	bl	80022c0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d914      	bls.n	8003c56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d00d      	beq.n	8003c56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3e:	f043 0210 	orr.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e007      	b.n	8003c66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d1cf      	bne.n	8003c04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	8000003f 	.word	0x8000003f
 8003c74:	50040300 	.word	0x50040300
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	053e2d63 	.word	0x053e2d63

08003c80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe fcf2 	bl	8002676 <LL_ADC_IsDisableOngoing>
 8003c92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fcd9 	bl	8002650 <LL_ADC_IsEnabled>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d047      	beq.n	8003d34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d144      	bne.n	8003d34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030d 	and.w	r3, r3, #13
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d10c      	bne.n	8003cd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fcb3 	bl	8002628 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cca:	f7fe faf9 	bl	80022c0 <HAL_GetTick>
 8003cce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cd0:	e029      	b.n	8003d26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	f043 0210 	orr.w	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e023      	b.n	8003d36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cee:	f7fe fae7 	bl	80022c0 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d914      	bls.n	8003d26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	f043 0210 	orr.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	f043 0201 	orr.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e007      	b.n	8003d36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1dc      	bne.n	8003cee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <LL_ADC_IsEnabled>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <LL_ADC_IsEnabled+0x18>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_ADC_IsEnabled+0x1a>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d101      	bne.n	8003d7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b09f      	sub	sp, #124	@ 0x7c
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e093      	b.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e16:	2300      	movs	r3, #0
 8003e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a47      	ldr	r2, [pc, #284]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d102      	bne.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e28:	4b46      	ldr	r3, [pc, #280]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	e001      	b.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e072      	b.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff86 	bl	8003d64 <LL_ADC_REG_IsConversionOngoing>
 8003e58:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff ff80 	bl	8003d64 <LL_ADC_REG_IsConversionOngoing>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d154      	bne.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d151      	bne.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e70:	4b35      	ldr	r3, [pc, #212]	@ (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003e72:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02c      	beq.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e8e:	035b      	lsls	r3, r3, #13
 8003e90:	430b      	orrs	r3, r1
 8003e92:	431a      	orrs	r2, r3
 8003e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e98:	4829      	ldr	r0, [pc, #164]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e9a:	f7ff ff50 	bl	8003d3e <LL_ADC_IsEnabled>
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4828      	ldr	r0, [pc, #160]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ea2:	f7ff ff4c 	bl	8003d3e <LL_ADC_IsEnabled>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	431c      	orrs	r4, r3
 8003eaa:	4828      	ldr	r0, [pc, #160]	@ (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003eac:	f7ff ff47 	bl	8003d3e <LL_ADC_IsEnabled>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	4323      	orrs	r3, r4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d137      	bne.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ec0:	f023 030f 	bic.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	6811      	ldr	r1, [r2, #0]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ed4:	e028      	b.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ee2:	4817      	ldr	r0, [pc, #92]	@ (8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ee4:	f7ff ff2b 	bl	8003d3e <LL_ADC_IsEnabled>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	4816      	ldr	r0, [pc, #88]	@ (8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003eec:	f7ff ff27 	bl	8003d3e <LL_ADC_IsEnabled>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	431c      	orrs	r4, r3
 8003ef4:	4815      	ldr	r0, [pc, #84]	@ (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003ef6:	f7ff ff22 	bl	8003d3e <LL_ADC_IsEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4323      	orrs	r3, r4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d112      	bne.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f0a:	f023 030f 	bic.w	r3, r3, #15
 8003f0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f10:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f12:	e009      	b.n	8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003f26:	e000      	b.n	8003f2a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f32:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	377c      	adds	r7, #124	@ 0x7c
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	50040000 	.word	0x50040000
 8003f44:	50040100 	.word	0x50040100
 8003f48:	50040300 	.word	0x50040300
 8003f4c:	50040200 	.word	0x50040200

08003f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f60:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <__NVIC_SetPriorityGrouping+0x44>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f82:	4a04      	ldr	r2, [pc, #16]	@ (8003f94 <__NVIC_SetPriorityGrouping+0x44>)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	60d3      	str	r3, [r2, #12]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f9c:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	0a1b      	lsrs	r3, r3, #8
 8003fa2:	f003 0307 	and.w	r3, r3, #7
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	db0b      	blt.n	8003fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	f003 021f 	and.w	r2, r3, #31
 8003fcc:	4907      	ldr	r1, [pc, #28]	@ (8003fec <__NVIC_EnableIRQ+0x38>)
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000e100 	.word	0xe000e100

08003ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	6039      	str	r1, [r7, #0]
 8003ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004000:	2b00      	cmp	r3, #0
 8004002:	db0a      	blt.n	800401a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	490c      	ldr	r1, [pc, #48]	@ (800403c <__NVIC_SetPriority+0x4c>)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	0112      	lsls	r2, r2, #4
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	440b      	add	r3, r1
 8004014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004018:	e00a      	b.n	8004030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4908      	ldr	r1, [pc, #32]	@ (8004040 <__NVIC_SetPriority+0x50>)
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	3b04      	subs	r3, #4
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	440b      	add	r3, r1
 800402e:	761a      	strb	r2, [r3, #24]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	e000e100 	.word	0xe000e100
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f1c3 0307 	rsb	r3, r3, #7
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf28      	it	cs
 8004062:	2304      	movcs	r3, #4
 8004064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3304      	adds	r3, #4
 800406a:	2b06      	cmp	r3, #6
 800406c:	d902      	bls.n	8004074 <NVIC_EncodePriority+0x30>
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3b03      	subs	r3, #3
 8004072:	e000      	b.n	8004076 <NVIC_EncodePriority+0x32>
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004078:	f04f 32ff 	mov.w	r2, #4294967295
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43da      	mvns	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	401a      	ands	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800408c:	f04f 31ff 	mov.w	r1, #4294967295
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	43d9      	mvns	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800409c:	4313      	orrs	r3, r2
         );
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3724      	adds	r7, #36	@ 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040bc:	d301      	bcc.n	80040c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040be:	2301      	movs	r3, #1
 80040c0:	e00f      	b.n	80040e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040c2:	4a0a      	ldr	r2, [pc, #40]	@ (80040ec <SysTick_Config+0x40>)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ca:	210f      	movs	r1, #15
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	f7ff ff8e 	bl	8003ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <SysTick_Config+0x40>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040da:	4b04      	ldr	r3, [pc, #16]	@ (80040ec <SysTick_Config+0x40>)
 80040dc:	2207      	movs	r2, #7
 80040de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	e000e010 	.word	0xe000e010

080040f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ff29 	bl	8003f50 <__NVIC_SetPriorityGrouping>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b086      	sub	sp, #24
 800410a:	af00      	add	r7, sp, #0
 800410c:	4603      	mov	r3, r0
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004118:	f7ff ff3e 	bl	8003f98 <__NVIC_GetPriorityGrouping>
 800411c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	6978      	ldr	r0, [r7, #20]
 8004124:	f7ff ff8e 	bl	8004044 <NVIC_EncodePriority>
 8004128:	4602      	mov	r2, r0
 800412a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff5d 	bl	8003ff0 <__NVIC_SetPriority>
}
 8004136:	bf00      	nop
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff31 	bl	8003fb4 <__NVIC_EnableIRQ>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ffa2 	bl	80040ac <SysTick_Config>
 8004168:	4603      	mov	r3, r0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004172:	b480      	push	{r7}
 8004174:	b085      	sub	sp, #20
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d008      	beq.n	800419c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e022      	b.n	80041e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 020e 	bic.w	r2, r2, #14
 80041aa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c0:	f003 021c 	and.w	r2, r3, #28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f202 	lsl.w	r2, r1, r2
 80041ce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d005      	beq.n	8004212 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2204      	movs	r2, #4
 800420a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e029      	b.n	8004266 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 020e 	bic.w	r2, r2, #14
 8004220:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	f003 021c 	and.w	r2, r3, #28
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f202 	lsl.w	r2, r1, r2
 8004244:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4798      	blx	r3
    }
  }
  return status;
 8004266:	7bfb      	ldrb	r3, [r7, #15]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800427e:	e17f      	b.n	8004580 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	fa01 f303 	lsl.w	r3, r1, r3
 800428c:	4013      	ands	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8171 	beq.w	800457a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d005      	beq.n	80042b0 <HAL_GPIO_Init+0x40>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d130      	bne.n	8004312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	2203      	movs	r2, #3
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4013      	ands	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042e6:	2201      	movs	r2, #1
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	f003 0201 	and.w	r2, r3, #1
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b03      	cmp	r3, #3
 800431c:	d118      	bne.n	8004350 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004324:	2201      	movs	r2, #1
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	08db      	lsrs	r3, r3, #3
 800433a:	f003 0201 	and.w	r2, r3, #1
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	2b03      	cmp	r3, #3
 800435a:	d017      	beq.n	800438c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	2203      	movs	r2, #3
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d123      	bne.n	80043e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	08da      	lsrs	r2, r3, #3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3208      	adds	r2, #8
 80043a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	220f      	movs	r2, #15
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	08da      	lsrs	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	3208      	adds	r2, #8
 80043da:	6939      	ldr	r1, [r7, #16]
 80043dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0203 	and.w	r2, r3, #3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80ac 	beq.w	800457a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004422:	4b5f      	ldr	r3, [pc, #380]	@ (80045a0 <HAL_GPIO_Init+0x330>)
 8004424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004426:	4a5e      	ldr	r2, [pc, #376]	@ (80045a0 <HAL_GPIO_Init+0x330>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6613      	str	r3, [r2, #96]	@ 0x60
 800442e:	4b5c      	ldr	r3, [pc, #368]	@ (80045a0 <HAL_GPIO_Init+0x330>)
 8004430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800443a:	4a5a      	ldr	r2, [pc, #360]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	089b      	lsrs	r3, r3, #2
 8004440:	3302      	adds	r3, #2
 8004442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004446:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	220f      	movs	r2, #15
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004464:	d025      	beq.n	80044b2 <HAL_GPIO_Init+0x242>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4f      	ldr	r2, [pc, #316]	@ (80045a8 <HAL_GPIO_Init+0x338>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01f      	beq.n	80044ae <HAL_GPIO_Init+0x23e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a4e      	ldr	r2, [pc, #312]	@ (80045ac <HAL_GPIO_Init+0x33c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d019      	beq.n	80044aa <HAL_GPIO_Init+0x23a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a4d      	ldr	r2, [pc, #308]	@ (80045b0 <HAL_GPIO_Init+0x340>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_GPIO_Init+0x236>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a4c      	ldr	r2, [pc, #304]	@ (80045b4 <HAL_GPIO_Init+0x344>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00d      	beq.n	80044a2 <HAL_GPIO_Init+0x232>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a4b      	ldr	r2, [pc, #300]	@ (80045b8 <HAL_GPIO_Init+0x348>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <HAL_GPIO_Init+0x22e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a4a      	ldr	r2, [pc, #296]	@ (80045bc <HAL_GPIO_Init+0x34c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_GPIO_Init+0x22a>
 8004496:	2306      	movs	r3, #6
 8004498:	e00c      	b.n	80044b4 <HAL_GPIO_Init+0x244>
 800449a:	2307      	movs	r3, #7
 800449c:	e00a      	b.n	80044b4 <HAL_GPIO_Init+0x244>
 800449e:	2305      	movs	r3, #5
 80044a0:	e008      	b.n	80044b4 <HAL_GPIO_Init+0x244>
 80044a2:	2304      	movs	r3, #4
 80044a4:	e006      	b.n	80044b4 <HAL_GPIO_Init+0x244>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e004      	b.n	80044b4 <HAL_GPIO_Init+0x244>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e002      	b.n	80044b4 <HAL_GPIO_Init+0x244>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_GPIO_Init+0x244>
 80044b2:	2300      	movs	r3, #0
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	f002 0203 	and.w	r2, r2, #3
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	4093      	lsls	r3, r2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044c4:	4937      	ldr	r1, [pc, #220]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	3302      	adds	r3, #2
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044d2:	4b3b      	ldr	r3, [pc, #236]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044f6:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044fc:	4b30      	ldr	r3, [pc, #192]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	43db      	mvns	r3, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004520:	4a27      	ldr	r2, [pc, #156]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004526:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	43db      	mvns	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800454a:	4a1d      	ldr	r2, [pc, #116]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004550:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	43db      	mvns	r3, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004574:	4a12      	ldr	r2, [pc, #72]	@ (80045c0 <HAL_GPIO_Init+0x350>)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3301      	adds	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fa22 f303 	lsr.w	r3, r2, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	f47f ae78 	bne.w	8004280 <HAL_GPIO_Init+0x10>
  }
}
 8004590:	bf00      	nop
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40010000 	.word	0x40010000
 80045a8:	48000400 	.word	0x48000400
 80045ac:	48000800 	.word	0x48000800
 80045b0:	48000c00 	.word	0x48000c00
 80045b4:	48001000 	.word	0x48001000
 80045b8:	48001400 	.word	0x48001400
 80045bc:	48001800 	.word	0x48001800
 80045c0:	40010400 	.word	0x40010400

080045c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
 80045d0:	4613      	mov	r3, r2
 80045d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d006      	beq.n	8004618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800460a:	4a05      	ldr	r2, [pc, #20]	@ (8004620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fd34 	bl	8001080 <HAL_GPIO_EXTI_Callback>
  }
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40010400 	.word	0x40010400

08004624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004628:	4b04      	ldr	r3, [pc, #16]	@ (800463c <HAL_PWREx_GetVoltageRange+0x18>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40007000 	.word	0x40007000

08004640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464e:	d130      	bne.n	80046b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004650:	4b23      	ldr	r3, [pc, #140]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800465c:	d038      	beq.n	80046d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004666:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004668:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800466e:	4b1d      	ldr	r3, [pc, #116]	@ (80046e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2232      	movs	r2, #50	@ 0x32
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	0c9b      	lsrs	r3, r3, #18
 8004680:	3301      	adds	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004684:	e002      	b.n	800468c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3b01      	subs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468c:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004698:	d102      	bne.n	80046a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f2      	bne.n	8004686 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ac:	d110      	bne.n	80046d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e00f      	b.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046be:	d007      	beq.n	80046d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046c8:	4a05      	ldr	r2, [pc, #20]	@ (80046e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40007000 	.word	0x40007000
 80046e4:	20000000 	.word	0x20000000
 80046e8:	431bde83 	.word	0x431bde83

080046ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e3ca      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b97      	ldr	r3, [pc, #604]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004708:	4b94      	ldr	r3, [pc, #592]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80e4 	beq.w	80048e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_RCC_OscConfig+0x4a>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b0c      	cmp	r3, #12
 800472a:	f040 808b 	bne.w	8004844 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 8087 	bne.w	8004844 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004736:	4b89      	ldr	r3, [pc, #548]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_RCC_OscConfig+0x62>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e3a2      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	4b82      	ldr	r3, [pc, #520]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d004      	beq.n	8004768 <HAL_RCC_OscConfig+0x7c>
 800475e:	4b7f      	ldr	r3, [pc, #508]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004766:	e005      	b.n	8004774 <HAL_RCC_OscConfig+0x88>
 8004768:	4b7c      	ldr	r3, [pc, #496]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004774:	4293      	cmp	r3, r2
 8004776:	d223      	bcs.n	80047c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fd55 	bl	800522c <RCC_SetFlashLatencyFromMSIRange>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e383      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800478c:	4b73      	ldr	r3, [pc, #460]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a72      	ldr	r2, [pc, #456]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b70      	ldr	r3, [pc, #448]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	496d      	ldr	r1, [pc, #436]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047aa:	4b6c      	ldr	r3, [pc, #432]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	4968      	ldr	r1, [pc, #416]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
 80047be:	e025      	b.n	800480c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047c0:	4b66      	ldr	r3, [pc, #408]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a65      	ldr	r2, [pc, #404]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047c6:	f043 0308 	orr.w	r3, r3, #8
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b63      	ldr	r3, [pc, #396]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	4960      	ldr	r1, [pc, #384]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047de:	4b5f      	ldr	r3, [pc, #380]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	495b      	ldr	r1, [pc, #364]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fd15 	bl	800522c <RCC_SetFlashLatencyFromMSIRange>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e343      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800480c:	f000 fc4a 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8004810:	4602      	mov	r2, r0
 8004812:	4b52      	ldr	r3, [pc, #328]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	4950      	ldr	r1, [pc, #320]	@ (8004960 <HAL_RCC_OscConfig+0x274>)
 800481e:	5ccb      	ldrb	r3, [r1, r3]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	4a4e      	ldr	r2, [pc, #312]	@ (8004964 <HAL_RCC_OscConfig+0x278>)
 800482a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800482c:	4b4e      	ldr	r3, [pc, #312]	@ (8004968 <HAL_RCC_OscConfig+0x27c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fd fcf5 	bl	8002220 <HAL_InitTick>
 8004836:	4603      	mov	r3, r0
 8004838:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d052      	beq.n	80048e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	e327      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d032      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800484c:	4b43      	ldr	r3, [pc, #268]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a42      	ldr	r2, [pc, #264]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004858:	f7fd fd32 	bl	80022c0 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004860:	f7fd fd2e 	bl	80022c0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e310      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004872:	4b3a      	ldr	r3, [pc, #232]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800487e:	4b37      	ldr	r3, [pc, #220]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a36      	ldr	r2, [pc, #216]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	4b34      	ldr	r3, [pc, #208]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4931      	ldr	r1, [pc, #196]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800489c:	4b2f      	ldr	r3, [pc, #188]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	492c      	ldr	r1, [pc, #176]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	e01a      	b.n	80048e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048b2:	4b2a      	ldr	r3, [pc, #168]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a29      	ldr	r2, [pc, #164]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048be:	f7fd fcff 	bl	80022c0 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048c6:	f7fd fcfb 	bl	80022c0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e2dd      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048d8:	4b20      	ldr	r3, [pc, #128]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x1da>
 80048e4:	e000      	b.n	80048e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d074      	beq.n	80049de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d005      	beq.n	8004906 <HAL_RCC_OscConfig+0x21a>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d10e      	bne.n	800491e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d10b      	bne.n	800491e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d064      	beq.n	80049dc <HAL_RCC_OscConfig+0x2f0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d160      	bne.n	80049dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e2ba      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x24a>
 8004928:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a0b      	ldr	r2, [pc, #44]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800492e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e026      	b.n	8004984 <HAL_RCC_OscConfig+0x298>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800493e:	d115      	bne.n	800496c <HAL_RCC_OscConfig+0x280>
 8004940:	4b06      	ldr	r3, [pc, #24]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a05      	ldr	r2, [pc, #20]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004946:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b03      	ldr	r3, [pc, #12]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a02      	ldr	r2, [pc, #8]	@ (800495c <HAL_RCC_OscConfig+0x270>)
 8004952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e014      	b.n	8004984 <HAL_RCC_OscConfig+0x298>
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000
 8004960:	0800d610 	.word	0x0800d610
 8004964:	20000000 	.word	0x20000000
 8004968:	20000004 	.word	0x20000004
 800496c:	4ba0      	ldr	r3, [pc, #640]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a9f      	ldr	r2, [pc, #636]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4b9d      	ldr	r3, [pc, #628]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a9c      	ldr	r2, [pc, #624]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 800497e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd fc98 	bl	80022c0 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd fc94 	bl	80022c0 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	@ 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e276      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a6:	4b92      	ldr	r3, [pc, #584]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x2a8>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fc84 	bl	80022c0 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd fc80 	bl	80022c0 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	@ 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e262      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ce:	4b88      	ldr	r3, [pc, #544]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x2d0>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d060      	beq.n	8004aac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_OscConfig+0x310>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d119      	bne.n	8004a2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d116      	bne.n	8004a2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fc:	4b7c      	ldr	r3, [pc, #496]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_OscConfig+0x328>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e23f      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a14:	4b76      	ldr	r3, [pc, #472]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	4973      	ldr	r1, [pc, #460]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a28:	e040      	b.n	8004aac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d023      	beq.n	8004a7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a32:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6e      	ldr	r2, [pc, #440]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fc3f 	bl	80022c0 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a46:	f7fd fc3b 	bl	80022c0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e21d      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a58:	4b65      	ldr	r3, [pc, #404]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b62      	ldr	r3, [pc, #392]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	495f      	ldr	r1, [pc, #380]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
 8004a78:	e018      	b.n	8004aac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fd fc1b 	bl	80022c0 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8e:	f7fd fc17 	bl	80022c0 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e1f9      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa0:	4b53      	ldr	r3, [pc, #332]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f0      	bne.n	8004a8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d03c      	beq.n	8004b32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01c      	beq.n	8004afa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fd fbf6 	bl	80022c0 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fd fbf2 	bl	80022c0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1d4      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aea:	4b41      	ldr	r3, [pc, #260]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0ef      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x3ec>
 8004af8:	e01b      	b.n	8004b32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004afa:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b00:	4a3b      	ldr	r2, [pc, #236]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fbd9 	bl	80022c0 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b12:	f7fd fbd5 	bl	80022c0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e1b7      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b24:	4b32      	ldr	r3, [pc, #200]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ef      	bne.n	8004b12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80a6 	beq.w	8004c8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b40:	2300      	movs	r3, #0
 8004b42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b44:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b50:	4b27      	ldr	r3, [pc, #156]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b54:	4a26      	ldr	r2, [pc, #152]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b5c:	4b24      	ldr	r3, [pc, #144]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6c:	4b21      	ldr	r3, [pc, #132]	@ (8004bf4 <HAL_RCC_OscConfig+0x508>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d118      	bne.n	8004baa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b78:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <HAL_RCC_OscConfig+0x508>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf4 <HAL_RCC_OscConfig+0x508>)
 8004b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b84:	f7fd fb9c 	bl	80022c0 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8c:	f7fd fb98 	bl	80022c0 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e17a      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_RCC_OscConfig+0x508>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d108      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4d8>
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bc2:	e029      	b.n	8004c18 <HAL_RCC_OscConfig+0x52c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b05      	cmp	r3, #5
 8004bca:	d115      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x50c>
 8004bcc:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd2:	4a07      	ldr	r2, [pc, #28]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be2:	4a03      	ldr	r2, [pc, #12]	@ (8004bf0 <HAL_RCC_OscConfig+0x504>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x52c>
 8004bee:	bf00      	nop
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	4b9c      	ldr	r3, [pc, #624]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	4a9b      	ldr	r2, [pc, #620]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c08:	4b98      	ldr	r3, [pc, #608]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0e:	4a97      	ldr	r2, [pc, #604]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d016      	beq.n	8004c4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7fd fb4e 	bl	80022c0 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c28:	f7fd fb4a 	bl	80022c0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e12a      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ed      	beq.n	8004c28 <HAL_RCC_OscConfig+0x53c>
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4e:	f7fd fb37 	bl	80022c0 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fd fb33 	bl	80022c0 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e113      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c6c:	4b7f      	ldr	r3, [pc, #508]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1ed      	bne.n	8004c56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c7a:	7ffb      	ldrb	r3, [r7, #31]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c80:	4b7a      	ldr	r3, [pc, #488]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c84:	4a79      	ldr	r2, [pc, #484]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80fe 	beq.w	8004e92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	f040 80d0 	bne.w	8004e40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ca0:	4b72      	ldr	r3, [pc, #456]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 0203 	and.w	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d130      	bne.n	8004d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d127      	bne.n	8004d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d11f      	bne.n	8004d16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ce0:	2a07      	cmp	r2, #7
 8004ce2:	bf14      	ite	ne
 8004ce4:	2201      	movne	r2, #1
 8004ce6:	2200      	moveq	r2, #0
 8004ce8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d113      	bne.n	8004d16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	085b      	lsrs	r3, r3, #1
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d109      	bne.n	8004d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d06e      	beq.n	8004df4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d069      	beq.n	8004df0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d1c:	4b53      	ldr	r3, [pc, #332]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d28:	4b50      	ldr	r3, [pc, #320]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0ad      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d38:	4b4c      	ldr	r3, [pc, #304]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a4b      	ldr	r2, [pc, #300]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d44:	f7fd fabc 	bl	80022c0 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fd fab8 	bl	80022c0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e09a      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5e:	4b43      	ldr	r3, [pc, #268]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d6a:	4b40      	ldr	r3, [pc, #256]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	4b40      	ldr	r3, [pc, #256]	@ (8004e70 <HAL_RCC_OscConfig+0x784>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d7a:	3a01      	subs	r2, #1
 8004d7c:	0112      	lsls	r2, r2, #4
 8004d7e:	4311      	orrs	r1, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d84:	0212      	lsls	r2, r2, #8
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d8c:	0852      	lsrs	r2, r2, #1
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0552      	lsls	r2, r2, #21
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d98:	0852      	lsrs	r2, r2, #1
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	0652      	lsls	r2, r2, #25
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004da4:	0912      	lsrs	r2, r2, #4
 8004da6:	0452      	lsls	r2, r2, #17
 8004da8:	430a      	orrs	r2, r1
 8004daa:	4930      	ldr	r1, [pc, #192]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004db0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dc8:	f7fd fa7a 	bl	80022c0 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd fa76 	bl	80022c0 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e058      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de2:	4b22      	ldr	r3, [pc, #136]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dee:	e050      	b.n	8004e92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e04f      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d148      	bne.n	8004e92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e00:	4b1a      	ldr	r3, [pc, #104]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a19      	ldr	r2, [pc, #100]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e0c:	4b17      	ldr	r3, [pc, #92]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e18:	f7fd fa52 	bl	80022c0 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fd fa4e 	bl	80022c0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e030      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	4b0e      	ldr	r3, [pc, #56]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x734>
 8004e3e:	e028      	b.n	8004e92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d023      	beq.n	8004e8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b09      	ldr	r3, [pc, #36]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a08      	ldr	r2, [pc, #32]	@ (8004e6c <HAL_RCC_OscConfig+0x780>)
 8004e4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fd fa35 	bl	80022c0 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	e00c      	b.n	8004e74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd fa31 	bl	80022c0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d905      	bls.n	8004e74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e013      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e74:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <HAL_RCC_OscConfig+0x7b0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ec      	bne.n	8004e5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e80:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <HAL_RCC_OscConfig+0x7b0>)
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	4905      	ldr	r1, [pc, #20]	@ (8004e9c <HAL_RCC_OscConfig+0x7b0>)
 8004e86:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <HAL_RCC_OscConfig+0x7b4>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60cb      	str	r3, [r1, #12]
 8004e8c:	e001      	b.n	8004e92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	feeefffc 	.word	0xfeeefffc

08004ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0e7      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b75      	ldr	r3, [pc, #468]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d910      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b72      	ldr	r3, [pc, #456]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 0207 	bic.w	r2, r3, #7
 8004ece:	4970      	ldr	r1, [pc, #448]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0cf      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	4b66      	ldr	r3, [pc, #408]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d908      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f04:	4b63      	ldr	r3, [pc, #396]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4960      	ldr	r1, [pc, #384]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04c      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d107      	bne.n	8004f3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2a:	4b5a      	ldr	r3, [pc, #360]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d121      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0a6      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f42:	4b54      	ldr	r3, [pc, #336]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d115      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e09a      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f5a:	4b4e      	ldr	r3, [pc, #312]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e08e      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e086      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4b46      	ldr	r3, [pc, #280]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4943      	ldr	r1, [pc, #268]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd f998 	bl	80022c0 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fd f994 	bl	80022c0 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e06e      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	4b3a      	ldr	r3, [pc, #232]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 020c 	and.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d1eb      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d010      	beq.n	8004fea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	4b31      	ldr	r3, [pc, #196]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d208      	bcs.n	8004fea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	492b      	ldr	r1, [pc, #172]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d210      	bcs.n	800501a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff8:	4b25      	ldr	r3, [pc, #148]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 0207 	bic.w	r2, r3, #7
 8005000:	4923      	ldr	r1, [pc, #140]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005008:	4b21      	ldr	r3, [pc, #132]	@ (8005090 <HAL_RCC_ClockConfig+0x1ec>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d001      	beq.n	800501a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e036      	b.n	8005088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005026:	4b1b      	ldr	r3, [pc, #108]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4918      	ldr	r1, [pc, #96]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005044:	4b13      	ldr	r3, [pc, #76]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4910      	ldr	r1, [pc, #64]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005058:	f000 f824 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <HAL_RCC_ClockConfig+0x1f0>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	490b      	ldr	r1, [pc, #44]	@ (8005098 <HAL_RCC_ClockConfig+0x1f4>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	4a09      	ldr	r2, [pc, #36]	@ (800509c <HAL_RCC_ClockConfig+0x1f8>)
 8005076:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005078:	4b09      	ldr	r3, [pc, #36]	@ (80050a0 <HAL_RCC_ClockConfig+0x1fc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fd f8cf 	bl	8002220 <HAL_InitTick>
 8005082:	4603      	mov	r3, r0
 8005084:	72fb      	strb	r3, [r7, #11]

  return status;
 8005086:	7afb      	ldrb	r3, [r7, #11]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40022000 	.word	0x40022000
 8005094:	40021000 	.word	0x40021000
 8005098:	0800d610 	.word	0x0800d610
 800509c:	20000000 	.word	0x20000000
 80050a0:	20000004 	.word	0x20000004

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	@ 0x24
 80050a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050b2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050bc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x34>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d121      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d11e      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050d8:	4b34      	ldr	r3, [pc, #208]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050e4:	4b31      	ldr	r3, [pc, #196]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 80050e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e005      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050f4:	4b2d      	ldr	r3, [pc, #180]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005100:	4a2b      	ldr	r2, [pc, #172]	@ (80051b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10d      	bne.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005114:	e00a      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d102      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e004      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d101      	bne.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005128:	4b23      	ldr	r3, [pc, #140]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800512a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d134      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005132:	4b1e      	ldr	r3, [pc, #120]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d003      	beq.n	800514a <HAL_RCC_GetSysClockFreq+0xa6>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d003      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0xac>
 8005148:	e005      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800514a:	4b1a      	ldr	r3, [pc, #104]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800514c:	617b      	str	r3, [r7, #20]
      break;
 800514e:	e005      	b.n	800515c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005150:	4b19      	ldr	r3, [pc, #100]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005152:	617b      	str	r3, [r7, #20]
      break;
 8005154:	e002      	b.n	800515c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	617b      	str	r3, [r7, #20]
      break;
 800515a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800515c:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	3301      	adds	r3, #1
 8005168:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800516a:	4b10      	ldr	r3, [pc, #64]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	fb03 f202 	mul.w	r2, r3, r2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005182:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	0e5b      	lsrs	r3, r3, #25
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	3301      	adds	r3, #1
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800519c:	69bb      	ldr	r3, [r7, #24]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3724      	adds	r7, #36	@ 0x24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	0800d628 	.word	0x0800d628
 80051b4:	00f42400 	.word	0x00f42400
 80051b8:	007a1200 	.word	0x007a1200

080051bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c0:	4b03      	ldr	r3, [pc, #12]	@ (80051d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000000 	.word	0x20000000

080051d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051d8:	f7ff fff0 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	0a1b      	lsrs	r3, r3, #8
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4904      	ldr	r1, [pc, #16]	@ (80051fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40021000 	.word	0x40021000
 80051fc:	0800d620 	.word	0x0800d620

08005200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005204:	f7ff ffda 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8005208:	4602      	mov	r2, r0
 800520a:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	0adb      	lsrs	r3, r3, #11
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	4904      	ldr	r1, [pc, #16]	@ (8005228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005216:	5ccb      	ldrb	r3, [r1, r3]
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	0800d620 	.word	0x0800d620

0800522c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005238:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005244:	f7ff f9ee 	bl	8004624 <HAL_PWREx_GetVoltageRange>
 8005248:	6178      	str	r0, [r7, #20]
 800524a:	e014      	b.n	8005276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005250:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005256:	6593      	str	r3, [r2, #88]	@ 0x58
 8005258:	4b22      	ldr	r3, [pc, #136]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005264:	f7ff f9de 	bl	8004624 <HAL_PWREx_GetVoltageRange>
 8005268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800526a:	4b1e      	ldr	r3, [pc, #120]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	4a1d      	ldr	r2, [pc, #116]	@ (80052e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005274:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800527c:	d10b      	bne.n	8005296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b80      	cmp	r3, #128	@ 0x80
 8005282:	d919      	bls.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2ba0      	cmp	r3, #160	@ 0xa0
 8005288:	d902      	bls.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800528a:	2302      	movs	r3, #2
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	e013      	b.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005290:	2301      	movs	r3, #1
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	e010      	b.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b80      	cmp	r3, #128	@ 0x80
 800529a:	d902      	bls.n	80052a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800529c:	2303      	movs	r3, #3
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	e00a      	b.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b80      	cmp	r3, #128	@ 0x80
 80052a6:	d102      	bne.n	80052ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052a8:	2302      	movs	r3, #2
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	e004      	b.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b70      	cmp	r3, #112	@ 0x70
 80052b2:	d101      	bne.n	80052b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052b4:	2301      	movs	r3, #1
 80052b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 0207 	bic.w	r2, r3, #7
 80052c0:	4909      	ldr	r1, [pc, #36]	@ (80052e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052c8:	4b07      	ldr	r3, [pc, #28]	@ (80052e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d001      	beq.n	80052da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40022000 	.word	0x40022000

080052ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052f4:	2300      	movs	r3, #0
 80052f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052f8:	2300      	movs	r3, #0
 80052fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005304:	2b00      	cmp	r3, #0
 8005306:	d041      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800530c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005310:	d02a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005312:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005316:	d824      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005318:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800531c:	d008      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800531e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005322:	d81e      	bhi.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800532c:	d010      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800532e:	e018      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005330:	4b86      	ldr	r3, [pc, #536]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a85      	ldr	r2, [pc, #532]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800533c:	e015      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fabb 	bl	80058c0 <RCCEx_PLLSAI1_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800534e:	e00c      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3320      	adds	r3, #32
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fba6 	bl	8005aa8 <RCCEx_PLLSAI2_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	74fb      	strb	r3, [r7, #19]
      break;
 8005366:	e000      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005370:	4b76      	ldr	r3, [pc, #472]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800537e:	4973      	ldr	r1, [pc, #460]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005386:	e001      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d041      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800539c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053a0:	d02a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80053a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053a6:	d824      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053ac:	d008      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053b2:	d81e      	bhi.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053bc:	d010      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053be:	e018      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053c0:	4b62      	ldr	r3, [pc, #392]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a61      	ldr	r2, [pc, #388]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053cc:	e015      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fa73 	bl	80058c0 <RCCEx_PLLSAI1_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053de:	e00c      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3320      	adds	r3, #32
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fb5e 	bl	8005aa8 <RCCEx_PLLSAI2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053f0:	e003      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	74fb      	strb	r3, [r7, #19]
      break;
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80053f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053fa:	7cfb      	ldrb	r3, [r7, #19]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005400:	4b52      	ldr	r3, [pc, #328]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005406:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800540e:	494f      	ldr	r1, [pc, #316]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005416:	e001      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80a0 	beq.w	800556a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542a:	2300      	movs	r3, #0
 800542c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800542e:	4b47      	ldr	r3, [pc, #284]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800543e:	2300      	movs	r3, #0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005444:	4b41      	ldr	r3, [pc, #260]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005448:	4a40      	ldr	r2, [pc, #256]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800544e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005450:	4b3e      	ldr	r3, [pc, #248]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800545c:	2301      	movs	r3, #1
 800545e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005460:	4b3b      	ldr	r3, [pc, #236]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3a      	ldr	r2, [pc, #232]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800546c:	f7fc ff28 	bl	80022c0 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005472:	e009      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005474:	f7fc ff24 	bl	80022c0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d902      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	74fb      	strb	r3, [r7, #19]
        break;
 8005486:	e005      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005488:	4b31      	ldr	r3, [pc, #196]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0ef      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005494:	7cfb      	ldrb	r3, [r7, #19]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d15c      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800549a:	4b2c      	ldr	r3, [pc, #176]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01f      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d019      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b8:	4b24      	ldr	r3, [pc, #144]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054c4:	4b21      	ldr	r3, [pc, #132]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	4a20      	ldr	r2, [pc, #128]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054d4:	4b1d      	ldr	r3, [pc, #116]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054da:	4a1c      	ldr	r2, [pc, #112]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054e4:	4a19      	ldr	r2, [pc, #100]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fc fee3 	bl	80022c0 <HAL_GetTick>
 80054fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fc:	e00b      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fc fedf 	bl	80022c0 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d902      	bls.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	74fb      	strb	r3, [r7, #19]
            break;
 8005514:	e006      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ec      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10c      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800552a:	4b08      	ldr	r3, [pc, #32]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800553a:	4904      	ldr	r1, [pc, #16]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005542:	e009      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005544:	7cfb      	ldrb	r3, [r7, #19]
 8005546:	74bb      	strb	r3, [r7, #18]
 8005548:	e006      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005558:	7c7b      	ldrb	r3, [r7, #17]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d105      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555e:	4b9e      	ldr	r3, [pc, #632]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005562:	4a9d      	ldr	r2, [pc, #628]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005568:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005576:	4b98      	ldr	r3, [pc, #608]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557c:	f023 0203 	bic.w	r2, r3, #3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	4994      	ldr	r1, [pc, #592]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005598:	4b8f      	ldr	r3, [pc, #572]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559e:	f023 020c 	bic.w	r2, r3, #12
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a6:	498c      	ldr	r1, [pc, #560]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ba:	4b87      	ldr	r3, [pc, #540]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	4983      	ldr	r1, [pc, #524]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055dc:	4b7e      	ldr	r3, [pc, #504]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	497b      	ldr	r1, [pc, #492]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055fe:	4b76      	ldr	r3, [pc, #472]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005604:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560c:	4972      	ldr	r1, [pc, #456]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005620:	4b6d      	ldr	r3, [pc, #436]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005626:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562e:	496a      	ldr	r1, [pc, #424]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005642:	4b65      	ldr	r3, [pc, #404]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005648:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005650:	4961      	ldr	r1, [pc, #388]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005664:	4b5c      	ldr	r3, [pc, #368]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005672:	4959      	ldr	r1, [pc, #356]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005686:	4b54      	ldr	r3, [pc, #336]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800568c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005694:	4950      	ldr	r1, [pc, #320]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056a8:	4b4b      	ldr	r3, [pc, #300]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b6:	4948      	ldr	r1, [pc, #288]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056ca:	4b43      	ldr	r3, [pc, #268]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d8:	493f      	ldr	r1, [pc, #252]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d028      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ec:	4b3a      	ldr	r3, [pc, #232]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056fa:	4937      	ldr	r1, [pc, #220]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800570a:	d106      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570c:	4b32      	ldr	r3, [pc, #200]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a31      	ldr	r2, [pc, #196]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005716:	60d3      	str	r3, [r2, #12]
 8005718:	e011      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005722:	d10c      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3304      	adds	r3, #4
 8005728:	2101      	movs	r1, #1
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f8c8 	bl	80058c0 <RCCEx_PLLSAI1_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800573a:	7cfb      	ldrb	r3, [r7, #19]
 800573c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d028      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800574a:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005750:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005758:	491f      	ldr	r1, [pc, #124]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005768:	d106      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576a:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4a1a      	ldr	r2, [pc, #104]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005770:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005774:	60d3      	str	r3, [r2, #12]
 8005776:	e011      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800577c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005780:	d10c      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3304      	adds	r3, #4
 8005786:	2101      	movs	r1, #1
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f899 	bl	80058c0 <RCCEx_PLLSAI1_Config>
 800578e:	4603      	mov	r3, r0
 8005790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005792:	7cfb      	ldrb	r3, [r7, #19]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d02b      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b6:	4908      	ldr	r1, [pc, #32]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057c6:	d109      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b03      	ldr	r3, [pc, #12]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a02      	ldr	r2, [pc, #8]	@ (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]
 80057d4:	e014      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	2101      	movs	r1, #1
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f867 	bl	80058c0 <RCCEx_PLLSAI1_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02f      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800580c:	4b2b      	ldr	r3, [pc, #172]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800581a:	4928      	ldr	r1, [pc, #160]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005826:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800582a:	d10d      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	2102      	movs	r1, #2
 8005832:	4618      	mov	r0, r3
 8005834:	f000 f844 	bl	80058c0 <RCCEx_PLLSAI1_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d014      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005842:	7cfb      	ldrb	r3, [r7, #19]
 8005844:	74bb      	strb	r3, [r7, #18]
 8005846:	e011      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800584c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005850:	d10c      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3320      	adds	r3, #32
 8005856:	2102      	movs	r1, #2
 8005858:	4618      	mov	r0, r3
 800585a:	f000 f925 	bl	8005aa8 <RCCEx_PLLSAI2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005878:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005886:	490d      	ldr	r1, [pc, #52]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800589a:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058aa:	4904      	ldr	r1, [pc, #16]	@ (80058bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000

080058c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ce:	4b75      	ldr	r3, [pc, #468]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058da:	4b72      	ldr	r3, [pc, #456]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0203 	and.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d10d      	bne.n	8005906 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
       ||
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058f2:	4b6c      	ldr	r3, [pc, #432]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
       ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d047      	beq.n	8005996 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
 800590a:	e044      	b.n	8005996 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d018      	beq.n	8005946 <RCCEx_PLLSAI1_Config+0x86>
 8005914:	2b03      	cmp	r3, #3
 8005916:	d825      	bhi.n	8005964 <RCCEx_PLLSAI1_Config+0xa4>
 8005918:	2b01      	cmp	r3, #1
 800591a:	d002      	beq.n	8005922 <RCCEx_PLLSAI1_Config+0x62>
 800591c:	2b02      	cmp	r3, #2
 800591e:	d009      	beq.n	8005934 <RCCEx_PLLSAI1_Config+0x74>
 8005920:	e020      	b.n	8005964 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005922:	4b60      	ldr	r3, [pc, #384]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d11d      	bne.n	800596a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005932:	e01a      	b.n	800596a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005934:	4b5b      	ldr	r3, [pc, #364]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d116      	bne.n	800596e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005944:	e013      	b.n	800596e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005946:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10f      	bne.n	8005972 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005952:	4b54      	ldr	r3, [pc, #336]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005962:	e006      	b.n	8005972 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e004      	b.n	8005974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005972:	bf00      	nop
    }

    if(status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800597a:	4b4a      	ldr	r3, [pc, #296]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6819      	ldr	r1, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	3b01      	subs	r3, #1
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	430b      	orrs	r3, r1
 8005990:	4944      	ldr	r1, [pc, #272]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d17d      	bne.n	8005a98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800599c:	4b41      	ldr	r3, [pc, #260]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a40      	ldr	r2, [pc, #256]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a8:	f7fc fc8a 	bl	80022c0 <HAL_GetTick>
 80059ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059ae:	e009      	b.n	80059c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059b0:	f7fc fc86 	bl	80022c0 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d902      	bls.n	80059c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	73fb      	strb	r3, [r7, #15]
        break;
 80059c2:	e005      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059c4:	4b37      	ldr	r3, [pc, #220]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1ef      	bne.n	80059b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d160      	bne.n	8005a98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d111      	bne.n	8005a00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059dc:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80059e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6892      	ldr	r2, [r2, #8]
 80059ec:	0211      	lsls	r1, r2, #8
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	0912      	lsrs	r2, r2, #4
 80059f4:	0452      	lsls	r2, r2, #17
 80059f6:	430a      	orrs	r2, r1
 80059f8:	492a      	ldr	r1, [pc, #168]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	610b      	str	r3, [r1, #16]
 80059fe:	e027      	b.n	8005a50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d112      	bne.n	8005a2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a06:	4b27      	ldr	r3, [pc, #156]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6892      	ldr	r2, [r2, #8]
 8005a16:	0211      	lsls	r1, r2, #8
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6912      	ldr	r2, [r2, #16]
 8005a1c:	0852      	lsrs	r2, r2, #1
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	0552      	lsls	r2, r2, #21
 8005a22:	430a      	orrs	r2, r1
 8005a24:	491f      	ldr	r1, [pc, #124]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	610b      	str	r3, [r1, #16]
 8005a2a:	e011      	b.n	8005a50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
 8005a3c:	0211      	lsls	r1, r2, #8
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6952      	ldr	r2, [r2, #20]
 8005a42:	0852      	lsrs	r2, r2, #1
 8005a44:	3a01      	subs	r2, #1
 8005a46:	0652      	lsls	r2, r2, #25
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	4916      	ldr	r1, [pc, #88]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a50:	4b14      	ldr	r3, [pc, #80]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a13      	ldr	r2, [pc, #76]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fc fc30 	bl	80022c0 <HAL_GetTick>
 8005a60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a62:	e009      	b.n	8005a78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a64:	f7fc fc2c 	bl	80022c0 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d902      	bls.n	8005a78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	73fb      	strb	r3, [r7, #15]
          break;
 8005a76:	e005      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a78:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0ef      	beq.n	8005a64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a8a:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	4904      	ldr	r1, [pc, #16]	@ (8005aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000

08005aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d018      	beq.n	8005af4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ac2:	4b67      	ldr	r3, [pc, #412]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0203 	and.w	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d10d      	bne.n	8005aee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ada:	4b61      	ldr	r3, [pc, #388]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d047      	beq.n	8005b7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
 8005af2:	e044      	b.n	8005b7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d018      	beq.n	8005b2e <RCCEx_PLLSAI2_Config+0x86>
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d825      	bhi.n	8005b4c <RCCEx_PLLSAI2_Config+0xa4>
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d002      	beq.n	8005b0a <RCCEx_PLLSAI2_Config+0x62>
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d009      	beq.n	8005b1c <RCCEx_PLLSAI2_Config+0x74>
 8005b08:	e020      	b.n	8005b4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b0a:	4b55      	ldr	r3, [pc, #340]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11d      	bne.n	8005b52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b1a:	e01a      	b.n	8005b52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b1c:	4b50      	ldr	r3, [pc, #320]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d116      	bne.n	8005b56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2c:	e013      	b.n	8005b56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10f      	bne.n	8005b5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b3a:	4b49      	ldr	r3, [pc, #292]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b4a:	e006      	b.n	8005b5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b50:	e004      	b.n	8005b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b52:	bf00      	nop
 8005b54:	e002      	b.n	8005b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10d      	bne.n	8005b7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b62:	4b3f      	ldr	r3, [pc, #252]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6819      	ldr	r1, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	430b      	orrs	r3, r1
 8005b78:	4939      	ldr	r1, [pc, #228]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d167      	bne.n	8005c54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b84:	4b36      	ldr	r3, [pc, #216]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a35      	ldr	r2, [pc, #212]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b90:	f7fc fb96 	bl	80022c0 <HAL_GetTick>
 8005b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b96:	e009      	b.n	8005bac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b98:	f7fc fb92 	bl	80022c0 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d902      	bls.n	8005bac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8005baa:	e005      	b.n	8005bb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bac:	4b2c      	ldr	r3, [pc, #176]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ef      	bne.n	8005b98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d14a      	bne.n	8005c54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d111      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bc4:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6892      	ldr	r2, [r2, #8]
 8005bd4:	0211      	lsls	r1, r2, #8
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68d2      	ldr	r2, [r2, #12]
 8005bda:	0912      	lsrs	r2, r2, #4
 8005bdc:	0452      	lsls	r2, r2, #17
 8005bde:	430a      	orrs	r2, r1
 8005be0:	491f      	ldr	r1, [pc, #124]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	614b      	str	r3, [r1, #20]
 8005be6:	e011      	b.n	8005c0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005be8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005bf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6892      	ldr	r2, [r2, #8]
 8005bf8:	0211      	lsls	r1, r2, #8
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6912      	ldr	r2, [r2, #16]
 8005bfe:	0852      	lsrs	r2, r2, #1
 8005c00:	3a01      	subs	r2, #1
 8005c02:	0652      	lsls	r2, r2, #25
 8005c04:	430a      	orrs	r2, r1
 8005c06:	4916      	ldr	r1, [pc, #88]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c0c:	4b14      	ldr	r3, [pc, #80]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a13      	ldr	r2, [pc, #76]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fc fb52 	bl	80022c0 <HAL_GetTick>
 8005c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c1e:	e009      	b.n	8005c34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c20:	f7fc fb4e 	bl	80022c0 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d902      	bls.n	8005c34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	73fb      	strb	r3, [r7, #15]
          break;
 8005c32:	e005      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ef      	beq.n	8005c20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c46:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	4904      	ldr	r1, [pc, #16]	@ (8005c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000

08005c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e049      	b.n	8005d0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fb fffc 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f000 faa6 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e049      	b.n	8005db8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fb ff5d 	bl	8001bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 fa4f 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <HAL_TIM_PWM_Start+0x24>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e03c      	b.n	8005e5e <HAL_TIM_PWM_Start+0x9e>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d109      	bne.n	8005dfe <HAL_TIM_PWM_Start+0x3e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	bf14      	ite	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	2300      	moveq	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	e02f      	b.n	8005e5e <HAL_TIM_PWM_Start+0x9e>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d109      	bne.n	8005e18 <HAL_TIM_PWM_Start+0x58>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e022      	b.n	8005e5e <HAL_TIM_PWM_Start+0x9e>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d109      	bne.n	8005e32 <HAL_TIM_PWM_Start+0x72>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	bf14      	ite	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	2300      	moveq	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	e015      	b.n	8005e5e <HAL_TIM_PWM_Start+0x9e>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d109      	bne.n	8005e4c <HAL_TIM_PWM_Start+0x8c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e008      	b.n	8005e5e <HAL_TIM_PWM_Start+0x9e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e09c      	b.n	8005fa0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_PWM_Start+0xb6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e74:	e023      	b.n	8005ebe <HAL_TIM_PWM_Start+0xfe>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_PWM_Start+0xc6>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e84:	e01b      	b.n	8005ebe <HAL_TIM_PWM_Start+0xfe>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_PWM_Start+0xd6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e94:	e013      	b.n	8005ebe <HAL_TIM_PWM_Start+0xfe>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0xe6>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ea4:	e00b      	b.n	8005ebe <HAL_TIM_PWM_Start+0xfe>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0xf6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eb4:	e003      	b.n	8005ebe <HAL_TIM_PWM_Start+0xfe>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fd10 	bl	80068ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a35      	ldr	r2, [pc, #212]	@ (8005fa8 <HAL_TIM_PWM_Start+0x1e8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_TIM_PWM_Start+0x13e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a34      	ldr	r2, [pc, #208]	@ (8005fac <HAL_TIM_PWM_Start+0x1ec>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_TIM_PWM_Start+0x13e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a32      	ldr	r2, [pc, #200]	@ (8005fb0 <HAL_TIM_PWM_Start+0x1f0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_TIM_PWM_Start+0x13e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a31      	ldr	r2, [pc, #196]	@ (8005fb4 <HAL_TIM_PWM_Start+0x1f4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIM_PWM_Start+0x13e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb8 <HAL_TIM_PWM_Start+0x1f8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_Start+0x142>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <HAL_TIM_PWM_Start+0x144>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a22      	ldr	r2, [pc, #136]	@ (8005fa8 <HAL_TIM_PWM_Start+0x1e8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d01d      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x19e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2a:	d018      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x19e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a22      	ldr	r2, [pc, #136]	@ (8005fbc <HAL_TIM_PWM_Start+0x1fc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x19e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	@ (8005fc0 <HAL_TIM_PWM_Start+0x200>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00e      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x19e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <HAL_TIM_PWM_Start+0x204>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x19e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	@ (8005fac <HAL_TIM_PWM_Start+0x1ec>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x19e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <HAL_TIM_PWM_Start+0x1f0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d115      	bne.n	8005f8a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	4b18      	ldr	r3, [pc, #96]	@ (8005fc8 <HAL_TIM_PWM_Start+0x208>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b06      	cmp	r3, #6
 8005f6e:	d015      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1dc>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f76:	d011      	beq.n	8005f9c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0201 	orr.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	e008      	b.n	8005f9c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e000      	b.n	8005f9e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	00010007 	.word	0x00010007

08005fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e0ff      	b.n	80061ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b14      	cmp	r3, #20
 8005ff6:	f200 80f0 	bhi.w	80061da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006055 	.word	0x08006055
 8006004:	080061db 	.word	0x080061db
 8006008:	080061db 	.word	0x080061db
 800600c:	080061db 	.word	0x080061db
 8006010:	08006095 	.word	0x08006095
 8006014:	080061db 	.word	0x080061db
 8006018:	080061db 	.word	0x080061db
 800601c:	080061db 	.word	0x080061db
 8006020:	080060d7 	.word	0x080060d7
 8006024:	080061db 	.word	0x080061db
 8006028:	080061db 	.word	0x080061db
 800602c:	080061db 	.word	0x080061db
 8006030:	08006117 	.word	0x08006117
 8006034:	080061db 	.word	0x080061db
 8006038:	080061db 	.word	0x080061db
 800603c:	080061db 	.word	0x080061db
 8006040:	08006159 	.word	0x08006159
 8006044:	080061db 	.word	0x080061db
 8006048:	080061db 	.word	0x080061db
 800604c:	080061db 	.word	0x080061db
 8006050:	08006199 	.word	0x08006199
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f970 	bl	8006340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0208 	orr.w	r2, r2, #8
 800606e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0204 	bic.w	r2, r2, #4
 800607e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6999      	ldr	r1, [r3, #24]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	619a      	str	r2, [r3, #24]
      break;
 8006092:	e0a5      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f9e0 	bl	8006460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6999      	ldr	r1, [r3, #24]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	021a      	lsls	r2, r3, #8
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	619a      	str	r2, [r3, #24]
      break;
 80060d4:	e084      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fa49 	bl	8006574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0208 	orr.w	r2, r2, #8
 80060f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0204 	bic.w	r2, r2, #4
 8006100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69d9      	ldr	r1, [r3, #28]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	61da      	str	r2, [r3, #28]
      break;
 8006114:	e064      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fab1 	bl	8006684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69d9      	ldr	r1, [r3, #28]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	021a      	lsls	r2, r3, #8
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	61da      	str	r2, [r3, #28]
      break;
 8006156:	e043      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fafa 	bl	8006758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0208 	orr.w	r2, r2, #8
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0204 	bic.w	r2, r2, #4
 8006182:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006196:	e023      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fb3e 	bl	8006820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	021a      	lsls	r2, r3, #8
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061d8:	e002      	b.n	80061e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	75fb      	strb	r3, [r7, #23]
      break;
 80061de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop

080061f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a46      	ldr	r2, [pc, #280]	@ (8006320 <TIM_Base_SetConfig+0x12c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006212:	d00f      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a43      	ldr	r2, [pc, #268]	@ (8006324 <TIM_Base_SetConfig+0x130>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00b      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a42      	ldr	r2, [pc, #264]	@ (8006328 <TIM_Base_SetConfig+0x134>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d007      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a41      	ldr	r2, [pc, #260]	@ (800632c <TIM_Base_SetConfig+0x138>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a40      	ldr	r2, [pc, #256]	@ (8006330 <TIM_Base_SetConfig+0x13c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d108      	bne.n	8006246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a35      	ldr	r2, [pc, #212]	@ (8006320 <TIM_Base_SetConfig+0x12c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d01f      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006254:	d01b      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a32      	ldr	r2, [pc, #200]	@ (8006324 <TIM_Base_SetConfig+0x130>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d017      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a31      	ldr	r2, [pc, #196]	@ (8006328 <TIM_Base_SetConfig+0x134>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a30      	ldr	r2, [pc, #192]	@ (800632c <TIM_Base_SetConfig+0x138>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00f      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2f      	ldr	r2, [pc, #188]	@ (8006330 <TIM_Base_SetConfig+0x13c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00b      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2e      	ldr	r2, [pc, #184]	@ (8006334 <TIM_Base_SetConfig+0x140>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d007      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2d      	ldr	r2, [pc, #180]	@ (8006338 <TIM_Base_SetConfig+0x144>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d003      	beq.n	800628e <TIM_Base_SetConfig+0x9a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a2c      	ldr	r2, [pc, #176]	@ (800633c <TIM_Base_SetConfig+0x148>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d108      	bne.n	80062a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a16      	ldr	r2, [pc, #88]	@ (8006320 <TIM_Base_SetConfig+0x12c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00f      	beq.n	80062ec <TIM_Base_SetConfig+0xf8>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a18      	ldr	r2, [pc, #96]	@ (8006330 <TIM_Base_SetConfig+0x13c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00b      	beq.n	80062ec <TIM_Base_SetConfig+0xf8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <TIM_Base_SetConfig+0x140>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d007      	beq.n	80062ec <TIM_Base_SetConfig+0xf8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a16      	ldr	r2, [pc, #88]	@ (8006338 <TIM_Base_SetConfig+0x144>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_Base_SetConfig+0xf8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a15      	ldr	r2, [pc, #84]	@ (800633c <TIM_Base_SetConfig+0x148>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d103      	bne.n	80062f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b01      	cmp	r3, #1
 8006304:	d105      	bne.n	8006312 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f023 0201 	bic.w	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	611a      	str	r2, [r3, #16]
  }
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40013400 	.word	0x40013400
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800

08006340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f023 0201 	bic.w	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2c      	ldr	r2, [pc, #176]	@ (800644c <TIM_OC1_SetConfig+0x10c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00f      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006450 <TIM_OC1_SetConfig+0x110>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a29      	ldr	r2, [pc, #164]	@ (8006458 <TIM_OC1_SetConfig+0x118>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a28      	ldr	r2, [pc, #160]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10c      	bne.n	80063da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0308 	bic.w	r3, r3, #8
 80063c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	@ (800644c <TIM_OC1_SetConfig+0x10c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00f      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006450 <TIM_OC1_SetConfig+0x110>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00b      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	@ (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d007      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	@ (8006458 <TIM_OC1_SetConfig+0x118>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a17      	ldr	r2, [pc, #92]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d111      	bne.n	8006426 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f023 0210 	bic.w	r2, r3, #16
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800649a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a28      	ldr	r2, [pc, #160]	@ (8006560 <TIM_OC2_SetConfig+0x100>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0x6c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a27      	ldr	r2, [pc, #156]	@ (8006564 <TIM_OC2_SetConfig+0x104>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10d      	bne.n	80064e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006560 <TIM_OC2_SetConfig+0x100>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006564 <TIM_OC2_SetConfig+0x104>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006568 <TIM_OC2_SetConfig+0x108>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1a      	ldr	r2, [pc, #104]	@ (800656c <TIM_OC2_SetConfig+0x10c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a19      	ldr	r2, [pc, #100]	@ (8006570 <TIM_OC2_SetConfig+0x110>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d113      	bne.n	8006538 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800

08006574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a27      	ldr	r2, [pc, #156]	@ (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_OC3_SetConfig+0x6a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <TIM_OC3_SetConfig+0x100>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d10d      	bne.n	80065fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1b      	ldr	r2, [pc, #108]	@ (8006674 <TIM_OC3_SetConfig+0x100>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1a      	ldr	r2, [pc, #104]	@ (8006678 <TIM_OC3_SetConfig+0x104>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a19      	ldr	r2, [pc, #100]	@ (800667c <TIM_OC3_SetConfig+0x108>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a18      	ldr	r2, [pc, #96]	@ (8006680 <TIM_OC3_SetConfig+0x10c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <TIM_OC4_SetConfig+0xc0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00f      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <TIM_OC4_SetConfig+0xc4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a16      	ldr	r2, [pc, #88]	@ (800674c <TIM_OC4_SetConfig+0xc8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a15      	ldr	r2, [pc, #84]	@ (8006750 <TIM_OC4_SetConfig+0xcc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a14      	ldr	r2, [pc, #80]	@ (8006754 <TIM_OC4_SetConfig+0xd0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d109      	bne.n	800671c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800670e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40012c00 	.word	0x40012c00
 8006748:	40013400 	.word	0x40013400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800

08006758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800679c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	@ (800680c <TIM_OC5_SetConfig+0xb4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00f      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	@ (8006810 <TIM_OC5_SetConfig+0xb8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00b      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <TIM_OC5_SetConfig+0xbc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d007      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a14      	ldr	r2, [pc, #80]	@ (8006818 <TIM_OC5_SetConfig+0xc0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a13      	ldr	r2, [pc, #76]	@ (800681c <TIM_OC5_SetConfig+0xc4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d109      	bne.n	80067e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40013400 	.word	0x40013400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	051b      	lsls	r3, r3, #20
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a18      	ldr	r2, [pc, #96]	@ (80068d8 <TIM_OC6_SetConfig+0xb8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00f      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a17      	ldr	r2, [pc, #92]	@ (80068dc <TIM_OC6_SetConfig+0xbc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00b      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a16      	ldr	r2, [pc, #88]	@ (80068e0 <TIM_OC6_SetConfig+0xc0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d007      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a15      	ldr	r2, [pc, #84]	@ (80068e4 <TIM_OC6_SetConfig+0xc4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a14      	ldr	r2, [pc, #80]	@ (80068e8 <TIM_OC6_SetConfig+0xc8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d109      	bne.n	80068b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	029b      	lsls	r3, r3, #10
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2201      	movs	r2, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	43db      	mvns	r3, r3
 800690e:	401a      	ands	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	431a      	orrs	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800694c:	2302      	movs	r3, #2
 800694e:	e068      	b.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2e      	ldr	r2, [pc, #184]	@ (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800698a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01d      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c2:	d018      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1a      	ldr	r2, [pc, #104]	@ (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00e      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a18      	ldr	r2, [pc, #96]	@ (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d009      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a13      	ldr	r2, [pc, #76]	@ (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a14      	ldr	r2, [pc, #80]	@ (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10c      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40013400 	.word	0x40013400
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40014000 	.word	0x40014000

08006a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e065      	b.n	8006b30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a14      	ldr	r2, [pc, #80]	@ (8006b40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d115      	bne.n	8006b1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	051b      	lsls	r3, r3, #20
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40013400 	.word	0x40013400

08006b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e040      	b.n	8006bd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fb f932 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2224      	movs	r2, #36	@ 0x24
 8006b70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f022 0201 	bic.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fe90 	bl	80078b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbd5 	bl	8007340 <UART_SetConfig>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e01b      	b.n	8006bd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 ff0f 	bl	80079f4 <UART_CheckIdleState>
 8006bd6:	4603      	mov	r3, r0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	@ 0x28
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d177      	bne.n	8006ce8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_UART_Transmit+0x24>
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e070      	b.n	8006cea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2221      	movs	r2, #33	@ 0x21
 8006c14:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c16:	f7fb fb53 	bl	80022c0 <HAL_GetTick>
 8006c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c34:	d108      	bne.n	8006c48 <HAL_UART_Transmit+0x68>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d104      	bne.n	8006c48 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	e003      	b.n	8006c50 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c50:	e02f      	b.n	8006cb2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2180      	movs	r1, #128	@ 0x80
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 ff71 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e03b      	b.n	8006cea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10b      	bne.n	8006c90 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c84:	b292      	uxth	r2, r2
 8006c86:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e007      	b.n	8006ca0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1c9      	bne.n	8006c52 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2140      	movs	r1, #64	@ 0x40
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 ff3b 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e005      	b.n	8006cea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e000      	b.n	8006cea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006ce8:	2302      	movs	r3, #2
  }
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b0ba      	sub	sp, #232	@ 0xe8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006d1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006d22:	4013      	ands	r3, r2
 8006d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d115      	bne.n	8006d5c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00f      	beq.n	8006d5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 82ca 	beq.w	80072e6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
      }
      return;
 8006d5a:	e2c4      	b.n	80072e6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8117 	beq.w	8006f94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d76:	4b85      	ldr	r3, [pc, #532]	@ (8006f8c <HAL_UART_IRQHandler+0x298>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 810a 	beq.w	8006f94 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d011      	beq.n	8006db0 <HAL_UART_IRQHandler+0xbc>
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006da6:	f043 0201 	orr.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d011      	beq.n	8006de0 <HAL_UART_IRQHandler+0xec>
 8006dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dd6:	f043 0204 	orr.w	r2, r3, #4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d011      	beq.n	8006e10 <HAL_UART_IRQHandler+0x11c>
 8006dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00b      	beq.n	8006e10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2204      	movs	r2, #4
 8006dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e06:	f043 0202 	orr.w	r2, r3, #2
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d017      	beq.n	8006e4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 0320 	and.w	r3, r3, #32
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e42:	f043 0208 	orr.w	r2, r3, #8
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d012      	beq.n	8006e7e <HAL_UART_IRQHandler+0x18a>
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00c      	beq.n	8006e7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e74:	f043 0220 	orr.w	r2, r3, #32
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 8230 	beq.w	80072ea <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00d      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec6:	2b40      	cmp	r3, #64	@ 0x40
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ece:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d04f      	beq.n	8006f76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fea1 	bl	8007c1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee6:	2b40      	cmp	r3, #64	@ 0x40
 8006ee8:	d141      	bne.n	8006f6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1d9      	bne.n	8006eea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d013      	beq.n	8006f66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f42:	4a13      	ldr	r2, [pc, #76]	@ (8006f90 <HAL_UART_IRQHandler+0x29c>)
 8006f44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fd f94f 	bl	80041ee <HAL_DMA_Abort_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d017      	beq.n	8006f86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006f60:	4610      	mov	r0, r2
 8006f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f64:	e00f      	b.n	8006f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9d4 	bl	8007314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6c:	e00b      	b.n	8006f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f9d0 	bl	8007314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	e007      	b.n	8006f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f9cc 	bl	8007314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006f84:	e1b1      	b.n	80072ea <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f86:	bf00      	nop
    return;
 8006f88:	e1af      	b.n	80072ea <HAL_UART_IRQHandler+0x5f6>
 8006f8a:	bf00      	nop
 8006f8c:	04000120 	.word	0x04000120
 8006f90:	08007ce7 	.word	0x08007ce7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	f040 816a 	bne.w	8007272 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8163 	beq.w	8007272 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 815c 	beq.w	8007272 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2210      	movs	r2, #16
 8006fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fcc:	2b40      	cmp	r3, #64	@ 0x40
 8006fce:	f040 80d4 	bne.w	800717a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80ad 	beq.w	8007142 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	f080 80a5 	bcs.w	8007142 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 8086 	bne.w	8007120 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007028:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800702c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800703e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007042:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800704a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1da      	bne.n	8007014 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800706e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007082:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007086:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800708a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e1      	bne.n	800705e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3308      	adds	r3, #8
 80070a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3308      	adds	r3, #8
 80070ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80070cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e3      	bne.n	800709a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e8:	e853 3f00 	ldrex	r3, [r3]
 80070ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f0:	f023 0310 	bic.w	r3, r3, #16
 80070f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007102:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007104:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e4      	bne.n	80070e0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd f829 	bl	8004172 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007132:	b29b      	uxth	r3, r3
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f8f4 	bl	8007328 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007140:	e0d5      	b.n	80072ee <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007148:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800714c:	429a      	cmp	r2, r3
 800714e:	f040 80ce 	bne.w	80072ee <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b20      	cmp	r3, #32
 8007160:	f040 80c5 	bne.w	80072ee <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f8d8 	bl	8007328 <HAL_UARTEx_RxEventCallback>
      return;
 8007178:	e0b9      	b.n	80072ee <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007186:	b29b      	uxth	r3, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80ab 	beq.w	80072f2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800719c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80a6 	beq.w	80072f2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80071c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e4      	bne.n	80071a6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	623b      	str	r3, [r7, #32]
   return(result);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007200:	633a      	str	r2, [r7, #48]	@ 0x30
 8007202:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800720e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e3      	bne.n	80071dc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	60fb      	str	r3, [r7, #12]
   return(result);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0310 	bic.w	r3, r3, #16
 800723c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800724a:	61fb      	str	r3, [r7, #28]
 800724c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	69b9      	ldr	r1, [r7, #24]
 8007250:	69fa      	ldr	r2, [r7, #28]
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	617b      	str	r3, [r7, #20]
   return(result);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e4      	bne.n	8007228 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f85c 	bl	8007328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007270:	e03f      	b.n	80072f2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00e      	beq.n	800729c <HAL_UART_IRQHandler+0x5a8>
 800727e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d008      	beq.n	800729c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007292:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fd66 	bl	8007d66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800729a:	e02d      	b.n	80072f8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800729c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01c      	beq.n	80072f6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
    }
    return;
 80072c4:	e017      	b.n	80072f6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d012      	beq.n	80072f8 <HAL_UART_IRQHandler+0x604>
 80072d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00c      	beq.n	80072f8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fd17 	bl	8007d12 <UART_EndTransmit_IT>
    return;
 80072e4:	e008      	b.n	80072f8 <HAL_UART_IRQHandler+0x604>
      return;
 80072e6:	bf00      	nop
 80072e8:	e006      	b.n	80072f8 <HAL_UART_IRQHandler+0x604>
    return;
 80072ea:	bf00      	nop
 80072ec:	e004      	b.n	80072f8 <HAL_UART_IRQHandler+0x604>
      return;
 80072ee:	bf00      	nop
 80072f0:	e002      	b.n	80072f8 <HAL_UART_IRQHandler+0x604>
      return;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_UART_IRQHandler+0x604>
    return;
 80072f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072f8:	37e8      	adds	r7, #232	@ 0xe8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop

08007300 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007344:	b08a      	sub	sp, #40	@ 0x28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	431a      	orrs	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	431a      	orrs	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	4313      	orrs	r3, r2
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4ba4      	ldr	r3, [pc, #656]	@ (8007600 <UART_SetConfig+0x2c0>)
 8007370:	4013      	ands	r3, r2
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007378:	430b      	orrs	r3, r1
 800737a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a99      	ldr	r2, [pc, #612]	@ (8007604 <UART_SetConfig+0x2c4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a8:	4313      	orrs	r3, r2
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073bc:	430a      	orrs	r2, r1
 80073be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a90      	ldr	r2, [pc, #576]	@ (8007608 <UART_SetConfig+0x2c8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d126      	bne.n	8007418 <UART_SetConfig+0xd8>
 80073ca:	4b90      	ldr	r3, [pc, #576]	@ (800760c <UART_SetConfig+0x2cc>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d81b      	bhi.n	8007410 <UART_SetConfig+0xd0>
 80073d8:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <UART_SetConfig+0xa0>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	080073f1 	.word	0x080073f1
 80073e4:	08007401 	.word	0x08007401
 80073e8:	080073f9 	.word	0x080073f9
 80073ec:	08007409 	.word	0x08007409
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f6:	e116      	b.n	8007626 <UART_SetConfig+0x2e6>
 80073f8:	2302      	movs	r3, #2
 80073fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073fe:	e112      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007400:	2304      	movs	r3, #4
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007406:	e10e      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007408:	2308      	movs	r3, #8
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740e:	e10a      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007410:	2310      	movs	r3, #16
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007416:	e106      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a7c      	ldr	r2, [pc, #496]	@ (8007610 <UART_SetConfig+0x2d0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d138      	bne.n	8007494 <UART_SetConfig+0x154>
 8007422:	4b7a      	ldr	r3, [pc, #488]	@ (800760c <UART_SetConfig+0x2cc>)
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007428:	f003 030c 	and.w	r3, r3, #12
 800742c:	2b0c      	cmp	r3, #12
 800742e:	d82d      	bhi.n	800748c <UART_SetConfig+0x14c>
 8007430:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <UART_SetConfig+0xf8>)
 8007432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007436:	bf00      	nop
 8007438:	0800746d 	.word	0x0800746d
 800743c:	0800748d 	.word	0x0800748d
 8007440:	0800748d 	.word	0x0800748d
 8007444:	0800748d 	.word	0x0800748d
 8007448:	0800747d 	.word	0x0800747d
 800744c:	0800748d 	.word	0x0800748d
 8007450:	0800748d 	.word	0x0800748d
 8007454:	0800748d 	.word	0x0800748d
 8007458:	08007475 	.word	0x08007475
 800745c:	0800748d 	.word	0x0800748d
 8007460:	0800748d 	.word	0x0800748d
 8007464:	0800748d 	.word	0x0800748d
 8007468:	08007485 	.word	0x08007485
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007472:	e0d8      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007474:	2302      	movs	r3, #2
 8007476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800747a:	e0d4      	b.n	8007626 <UART_SetConfig+0x2e6>
 800747c:	2304      	movs	r3, #4
 800747e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007482:	e0d0      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007484:	2308      	movs	r3, #8
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748a:	e0cc      	b.n	8007626 <UART_SetConfig+0x2e6>
 800748c:	2310      	movs	r3, #16
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007492:	e0c8      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a5e      	ldr	r2, [pc, #376]	@ (8007614 <UART_SetConfig+0x2d4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d125      	bne.n	80074ea <UART_SetConfig+0x1aa>
 800749e:	4b5b      	ldr	r3, [pc, #364]	@ (800760c <UART_SetConfig+0x2cc>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074a8:	2b30      	cmp	r3, #48	@ 0x30
 80074aa:	d016      	beq.n	80074da <UART_SetConfig+0x19a>
 80074ac:	2b30      	cmp	r3, #48	@ 0x30
 80074ae:	d818      	bhi.n	80074e2 <UART_SetConfig+0x1a2>
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d00a      	beq.n	80074ca <UART_SetConfig+0x18a>
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d814      	bhi.n	80074e2 <UART_SetConfig+0x1a2>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <UART_SetConfig+0x182>
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d008      	beq.n	80074d2 <UART_SetConfig+0x192>
 80074c0:	e00f      	b.n	80074e2 <UART_SetConfig+0x1a2>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c8:	e0ad      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074ca:	2302      	movs	r3, #2
 80074cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d0:	e0a9      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074d2:	2304      	movs	r3, #4
 80074d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d8:	e0a5      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074da:	2308      	movs	r3, #8
 80074dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e0:	e0a1      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074e2:	2310      	movs	r3, #16
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e8:	e09d      	b.n	8007626 <UART_SetConfig+0x2e6>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007618 <UART_SetConfig+0x2d8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d125      	bne.n	8007540 <UART_SetConfig+0x200>
 80074f4:	4b45      	ldr	r3, [pc, #276]	@ (800760c <UART_SetConfig+0x2cc>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007500:	d016      	beq.n	8007530 <UART_SetConfig+0x1f0>
 8007502:	2bc0      	cmp	r3, #192	@ 0xc0
 8007504:	d818      	bhi.n	8007538 <UART_SetConfig+0x1f8>
 8007506:	2b80      	cmp	r3, #128	@ 0x80
 8007508:	d00a      	beq.n	8007520 <UART_SetConfig+0x1e0>
 800750a:	2b80      	cmp	r3, #128	@ 0x80
 800750c:	d814      	bhi.n	8007538 <UART_SetConfig+0x1f8>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <UART_SetConfig+0x1d8>
 8007512:	2b40      	cmp	r3, #64	@ 0x40
 8007514:	d008      	beq.n	8007528 <UART_SetConfig+0x1e8>
 8007516:	e00f      	b.n	8007538 <UART_SetConfig+0x1f8>
 8007518:	2300      	movs	r3, #0
 800751a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751e:	e082      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007520:	2302      	movs	r3, #2
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007526:	e07e      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007528:	2304      	movs	r3, #4
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752e:	e07a      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007530:	2308      	movs	r3, #8
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007536:	e076      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007538:	2310      	movs	r3, #16
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753e:	e072      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a35      	ldr	r2, [pc, #212]	@ (800761c <UART_SetConfig+0x2dc>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d12a      	bne.n	80075a0 <UART_SetConfig+0x260>
 800754a:	4b30      	ldr	r3, [pc, #192]	@ (800760c <UART_SetConfig+0x2cc>)
 800754c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007558:	d01a      	beq.n	8007590 <UART_SetConfig+0x250>
 800755a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800755e:	d81b      	bhi.n	8007598 <UART_SetConfig+0x258>
 8007560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007564:	d00c      	beq.n	8007580 <UART_SetConfig+0x240>
 8007566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756a:	d815      	bhi.n	8007598 <UART_SetConfig+0x258>
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <UART_SetConfig+0x238>
 8007570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007574:	d008      	beq.n	8007588 <UART_SetConfig+0x248>
 8007576:	e00f      	b.n	8007598 <UART_SetConfig+0x258>
 8007578:	2300      	movs	r3, #0
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757e:	e052      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007580:	2302      	movs	r3, #2
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007586:	e04e      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007588:	2304      	movs	r3, #4
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758e:	e04a      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007590:	2308      	movs	r3, #8
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007596:	e046      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007598:	2310      	movs	r3, #16
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759e:	e042      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a17      	ldr	r2, [pc, #92]	@ (8007604 <UART_SetConfig+0x2c4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d13a      	bne.n	8007620 <UART_SetConfig+0x2e0>
 80075aa:	4b18      	ldr	r3, [pc, #96]	@ (800760c <UART_SetConfig+0x2cc>)
 80075ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075b8:	d01a      	beq.n	80075f0 <UART_SetConfig+0x2b0>
 80075ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075be:	d81b      	bhi.n	80075f8 <UART_SetConfig+0x2b8>
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c4:	d00c      	beq.n	80075e0 <UART_SetConfig+0x2a0>
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ca:	d815      	bhi.n	80075f8 <UART_SetConfig+0x2b8>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <UART_SetConfig+0x298>
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d4:	d008      	beq.n	80075e8 <UART_SetConfig+0x2a8>
 80075d6:	e00f      	b.n	80075f8 <UART_SetConfig+0x2b8>
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075de:	e022      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075e0:	2302      	movs	r3, #2
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e6:	e01e      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ee:	e01a      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f6:	e016      	b.n	8007626 <UART_SetConfig+0x2e6>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fe:	e012      	b.n	8007626 <UART_SetConfig+0x2e6>
 8007600:	efff69f3 	.word	0xefff69f3
 8007604:	40008000 	.word	0x40008000
 8007608:	40013800 	.word	0x40013800
 800760c:	40021000 	.word	0x40021000
 8007610:	40004400 	.word	0x40004400
 8007614:	40004800 	.word	0x40004800
 8007618:	40004c00 	.word	0x40004c00
 800761c:	40005000 	.word	0x40005000
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a9f      	ldr	r2, [pc, #636]	@ (80078a8 <UART_SetConfig+0x568>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d17a      	bne.n	8007726 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007634:	2b08      	cmp	r3, #8
 8007636:	d824      	bhi.n	8007682 <UART_SetConfig+0x342>
 8007638:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <UART_SetConfig+0x300>)
 800763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763e:	bf00      	nop
 8007640:	08007665 	.word	0x08007665
 8007644:	08007683 	.word	0x08007683
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007683 	.word	0x08007683
 8007650:	08007673 	.word	0x08007673
 8007654:	08007683 	.word	0x08007683
 8007658:	08007683 	.word	0x08007683
 800765c:	08007683 	.word	0x08007683
 8007660:	0800767b 	.word	0x0800767b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007664:	f7fd fdb6 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8007668:	61f8      	str	r0, [r7, #28]
        break;
 800766a:	e010      	b.n	800768e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800766c:	4b8f      	ldr	r3, [pc, #572]	@ (80078ac <UART_SetConfig+0x56c>)
 800766e:	61fb      	str	r3, [r7, #28]
        break;
 8007670:	e00d      	b.n	800768e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007672:	f7fd fd17 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8007676:	61f8      	str	r0, [r7, #28]
        break;
 8007678:	e009      	b.n	800768e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800767e:	61fb      	str	r3, [r7, #28]
        break;
 8007680:	e005      	b.n	800768e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800768c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 80fb 	beq.w	800788c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d305      	bcc.n	80076b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ac:	69fa      	ldr	r2, [r7, #28]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d903      	bls.n	80076ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076b8:	e0e8      	b.n	800788c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	2200      	movs	r2, #0
 80076be:	461c      	mov	r4, r3
 80076c0:	4615      	mov	r5, r2
 80076c2:	f04f 0200 	mov.w	r2, #0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	022b      	lsls	r3, r5, #8
 80076cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80076d0:	0222      	lsls	r2, r4, #8
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	6849      	ldr	r1, [r1, #4]
 80076d6:	0849      	lsrs	r1, r1, #1
 80076d8:	2000      	movs	r0, #0
 80076da:	4688      	mov	r8, r1
 80076dc:	4681      	mov	r9, r0
 80076de:	eb12 0a08 	adds.w	sl, r2, r8
 80076e2:	eb43 0b09 	adc.w	fp, r3, r9
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	4650      	mov	r0, sl
 80076f6:	4659      	mov	r1, fp
 80076f8:	f7f9 faa6 	bl	8000c48 <__aeabi_uldivmod>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4613      	mov	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800770a:	d308      	bcc.n	800771e <UART_SetConfig+0x3de>
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007712:	d204      	bcs.n	800771e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	60da      	str	r2, [r3, #12]
 800771c:	e0b6      	b.n	800788c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007724:	e0b2      	b.n	800788c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800772e:	d15e      	bne.n	80077ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007730:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007734:	2b08      	cmp	r3, #8
 8007736:	d828      	bhi.n	800778a <UART_SetConfig+0x44a>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <UART_SetConfig+0x400>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	0800778b 	.word	0x0800778b
 8007750:	0800777b 	.word	0x0800777b
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
 8007760:	08007783 	.word	0x08007783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fd fd36 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8007768:	61f8      	str	r0, [r7, #28]
        break;
 800776a:	e014      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800776c:	f7fd fd48 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 8007770:	61f8      	str	r0, [r7, #28]
        break;
 8007772:	e010      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007774:	4b4d      	ldr	r3, [pc, #308]	@ (80078ac <UART_SetConfig+0x56c>)
 8007776:	61fb      	str	r3, [r7, #28]
        break;
 8007778:	e00d      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777a:	f7fd fc93 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800777e:	61f8      	str	r0, [r7, #28]
        break;
 8007780:	e009      	b.n	8007796 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007786:	61fb      	str	r3, [r7, #28]
        break;
 8007788:	e005      	b.n	8007796 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d077      	beq.n	800788c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	005a      	lsls	r2, r3, #1
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	085b      	lsrs	r3, r3, #1
 80077a6:	441a      	add	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b0f      	cmp	r3, #15
 80077b6:	d916      	bls.n	80077e6 <UART_SetConfig+0x4a6>
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077be:	d212      	bcs.n	80077e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f023 030f 	bic.w	r3, r3, #15
 80077c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	8afb      	ldrh	r3, [r7, #22]
 80077d8:	4313      	orrs	r3, r2
 80077da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	8afa      	ldrh	r2, [r7, #22]
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	e052      	b.n	800788c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077ec:	e04e      	b.n	800788c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d827      	bhi.n	8007846 <UART_SetConfig+0x506>
 80077f6:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <UART_SetConfig+0x4bc>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007829 	.word	0x08007829
 8007804:	08007831 	.word	0x08007831
 8007808:	08007847 	.word	0x08007847
 800780c:	08007837 	.word	0x08007837
 8007810:	08007847 	.word	0x08007847
 8007814:	08007847 	.word	0x08007847
 8007818:	08007847 	.word	0x08007847
 800781c:	0800783f 	.word	0x0800783f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007820:	f7fd fcd8 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8007824:	61f8      	str	r0, [r7, #28]
        break;
 8007826:	e014      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007828:	f7fd fcea 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
 800782c:	61f8      	str	r0, [r7, #28]
        break;
 800782e:	e010      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <UART_SetConfig+0x56c>)
 8007832:	61fb      	str	r3, [r7, #28]
        break;
 8007834:	e00d      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007836:	f7fd fc35 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800783a:	61f8      	str	r0, [r7, #28]
        break;
 800783c:	e009      	b.n	8007852 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800783e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007842:	61fb      	str	r3, [r7, #28]
        break;
 8007844:	e005      	b.n	8007852 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007850:	bf00      	nop
    }

    if (pclk != 0U)
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d019      	beq.n	800788c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	085a      	lsrs	r2, r3, #1
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	441a      	add	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	d909      	bls.n	8007886 <UART_SetConfig+0x546>
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007878:	d205      	bcs.n	8007886 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60da      	str	r2, [r3, #12]
 8007884:	e002      	b.n	800788c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007898:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800789c:	4618      	mov	r0, r3
 800789e:	3728      	adds	r7, #40	@ 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078a6:	bf00      	nop
 80078a8:	40008000 	.word	0x40008000
 80078ac:	00f42400 	.word	0x00f42400

080078b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00a      	beq.n	80078da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00a      	beq.n	800791e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	f003 0304 	and.w	r3, r3, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01a      	beq.n	80079c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ae:	d10a      	bne.n	80079c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b098      	sub	sp, #96	@ 0x60
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a04:	f7fa fc5c 	bl	80022c0 <HAL_GetTick>
 8007a08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d12e      	bne.n	8007a76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a20:	2200      	movs	r2, #0
 8007a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f88c 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d021      	beq.n	8007a76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e6      	bne.n	8007a32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2220      	movs	r2, #32
 8007a68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e062      	b.n	8007b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d149      	bne.n	8007b18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f856 	bl	8007b44 <UART_WaitOnFlagUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d03c      	beq.n	8007b18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007af0:	61fa      	str	r2, [r7, #28]
 8007af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e011      	b.n	8007b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3758      	adds	r7, #88	@ 0x58
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	4613      	mov	r3, r2
 8007b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b54:	e04f      	b.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d04b      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5e:	f7fa fbaf 	bl	80022c0 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d302      	bcc.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e04e      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0304 	and.w	r3, r3, #4
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d037      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b80      	cmp	r3, #128	@ 0x80
 8007b8a:	d034      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b40      	cmp	r3, #64	@ 0x40
 8007b90:	d031      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d110      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2208      	movs	r2, #8
 8007ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f838 	bl	8007c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e029      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bd0:	d111      	bne.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f81e 	bl	8007c1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e00f      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	bf0c      	ite	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	2300      	movne	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d0a0      	beq.n	8007b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b095      	sub	sp, #84	@ 0x54
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e6      	bne.n	8007c26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d118      	bne.n	8007cc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f023 0310 	bic.w	r3, r3, #16
 8007ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6979      	ldr	r1, [r7, #20]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cda:	bf00      	nop
 8007cdc:	3754      	adds	r7, #84	@ 0x54
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff fb05 	bl	8007314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b088      	sub	sp, #32
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d2e:	61fb      	str	r3, [r7, #28]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	6979      	ldr	r1, [r7, #20]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	613b      	str	r3, [r7, #16]
   return(result);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e6      	bne.n	8007d1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff fad1 	bl	8007300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d5e:	bf00      	nop
 8007d60:	3720      	adds	r7, #32
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
	...

08007d7c <__NVIC_SetPriority>:
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	6039      	str	r1, [r7, #0]
 8007d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	db0a      	blt.n	8007da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	490c      	ldr	r1, [pc, #48]	@ (8007dc8 <__NVIC_SetPriority+0x4c>)
 8007d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d9a:	0112      	lsls	r2, r2, #4
 8007d9c:	b2d2      	uxtb	r2, r2
 8007d9e:	440b      	add	r3, r1
 8007da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007da4:	e00a      	b.n	8007dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	4908      	ldr	r1, [pc, #32]	@ (8007dcc <__NVIC_SetPriority+0x50>)
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	3b04      	subs	r3, #4
 8007db4:	0112      	lsls	r2, r2, #4
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	440b      	add	r3, r1
 8007dba:	761a      	strb	r2, [r3, #24]
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	e000e100 	.word	0xe000e100
 8007dcc:	e000ed00 	.word	0xe000ed00

08007dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	f06f 0004 	mvn.w	r0, #4
 8007dda:	f7ff ffcf 	bl	8007d7c <__NVIC_SetPriority>
#endif
}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dea:	f3ef 8305 	mrs	r3, IPSR
 8007dee:	603b      	str	r3, [r7, #0]
  return(result);
 8007df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007df6:	f06f 0305 	mvn.w	r3, #5
 8007dfa:	607b      	str	r3, [r7, #4]
 8007dfc:	e00c      	b.n	8007e18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <osKernelInitialize+0x44>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <osKernelInitialize+0x44>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	607b      	str	r3, [r7, #4]
 8007e10:	e002      	b.n	8007e18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e12:	f04f 33ff 	mov.w	r3, #4294967295
 8007e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e18:	687b      	ldr	r3, [r7, #4]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	200004ac 	.word	0x200004ac

08007e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e32:	f3ef 8305 	mrs	r3, IPSR
 8007e36:	603b      	str	r3, [r7, #0]
  return(result);
 8007e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e3e:	f06f 0305 	mvn.w	r3, #5
 8007e42:	607b      	str	r3, [r7, #4]
 8007e44:	e010      	b.n	8007e68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e46:	4b0b      	ldr	r3, [pc, #44]	@ (8007e74 <osKernelStart+0x48>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d109      	bne.n	8007e62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e4e:	f7ff ffbf 	bl	8007dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e52:	4b08      	ldr	r3, [pc, #32]	@ (8007e74 <osKernelStart+0x48>)
 8007e54:	2202      	movs	r2, #2
 8007e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e58:	f001 f87a 	bl	8008f50 <vTaskStartScheduler>
      stat = osOK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	607b      	str	r3, [r7, #4]
 8007e60:	e002      	b.n	8007e68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e62:	f04f 33ff 	mov.w	r3, #4294967295
 8007e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e68:	687b      	ldr	r3, [r7, #4]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	200004ac 	.word	0x200004ac

08007e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08e      	sub	sp, #56	@ 0x38
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e88:	f3ef 8305 	mrs	r3, IPSR
 8007e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8007e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d17e      	bne.n	8007f92 <osThreadNew+0x11a>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d07b      	beq.n	8007f92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e9a:	2380      	movs	r3, #128	@ 0x80
 8007e9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e9e:	2318      	movs	r3, #24
 8007ea0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d045      	beq.n	8007f3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <osThreadNew+0x48>
        name = attr->name;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <osThreadNew+0x6e>
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2b38      	cmp	r3, #56	@ 0x38
 8007ed8:	d805      	bhi.n	8007ee6 <osThreadNew+0x6e>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <osThreadNew+0x72>
        return (NULL);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e054      	b.n	8007f94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	089b      	lsrs	r3, r3, #2
 8007ef8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00e      	beq.n	8007f20 <osThreadNew+0xa8>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	2b5b      	cmp	r3, #91	@ 0x5b
 8007f08:	d90a      	bls.n	8007f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d006      	beq.n	8007f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <osThreadNew+0xa8>
        mem = 1;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	e010      	b.n	8007f42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10c      	bne.n	8007f42 <osThreadNew+0xca>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d108      	bne.n	8007f42 <osThreadNew+0xca>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <osThreadNew+0xca>
          mem = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e001      	b.n	8007f42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d110      	bne.n	8007f6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f50:	9202      	str	r2, [sp, #8]
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	6a3a      	ldr	r2, [r7, #32]
 8007f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fe1a 	bl	8008b98 <xTaskCreateStatic>
 8007f64:	4603      	mov	r3, r0
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	e013      	b.n	8007f92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d110      	bne.n	8007f92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	f107 0310 	add.w	r3, r7, #16
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fe68 	bl	8008c58 <xTaskCreate>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d001      	beq.n	8007f92 <osThreadNew+0x11a>
            hTask = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f92:	693b      	ldr	r3, [r7, #16]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3728      	adds	r7, #40	@ 0x28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa4:	f3ef 8305 	mrs	r3, IPSR
 8007fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007faa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <osDelay+0x1c>
    stat = osErrorISR;
 8007fb0:	f06f 0305 	mvn.w	r3, #5
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	e007      	b.n	8007fc8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 ff8e 	bl	8008ee4 <vTaskDelay>
    }
  }

  return (stat);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4a07      	ldr	r2, [pc, #28]	@ (8008000 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4a06      	ldr	r2, [pc, #24]	@ (8008004 <vApplicationGetIdleTaskMemory+0x30>)
 8007fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2280      	movs	r2, #128	@ 0x80
 8007ff0:	601a      	str	r2, [r3, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	200004b0 	.word	0x200004b0
 8008004:	2000050c 	.word	0x2000050c

08008008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a07      	ldr	r2, [pc, #28]	@ (8008034 <vApplicationGetTimerTaskMemory+0x2c>)
 8008018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4a06      	ldr	r2, [pc, #24]	@ (8008038 <vApplicationGetTimerTaskMemory+0x30>)
 800801e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008026:	601a      	str	r2, [r3, #0]
}
 8008028:	bf00      	nop
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	2000070c 	.word	0x2000070c
 8008038:	20000768 	.word	0x20000768

0800803c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f103 0208 	add.w	r2, r3, #8
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f04f 32ff 	mov.w	r2, #4294967295
 8008054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f103 0208 	add.w	r2, r3, #8
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f103 0208 	add.w	r2, r3, #8
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d103      	bne.n	80080fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e00c      	b.n	8008118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3308      	adds	r3, #8
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e002      	b.n	800810c <vListInsert+0x2e>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	429a      	cmp	r2, r3
 8008116:	d2f6      	bcs.n	8008106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
}
 8008144:	bf00      	nop
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6892      	ldr	r2, [r2, #8]
 8008166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6852      	ldr	r2, [r2, #4]
 8008170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d103      	bne.n	8008184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	1e5a      	subs	r2, r3, #1
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081d0:	f002 f87a 	bl	800a2c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081dc:	68f9      	ldr	r1, [r7, #12]
 80081de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	441a      	add	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	3b01      	subs	r3, #1
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008206:	fb01 f303 	mul.w	r3, r1, r3
 800820a:	441a      	add	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	22ff      	movs	r2, #255	@ 0xff
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	22ff      	movs	r2, #255	@ 0xff
 800821c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d114      	bne.n	8008250 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01a      	beq.n	8008264 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3310      	adds	r3, #16
 8008232:	4618      	mov	r0, r3
 8008234:	f001 f91a 	bl	800946c <xTaskRemoveFromEventList>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d012      	beq.n	8008264 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800823e:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <xQueueGenericReset+0xd0>)
 8008240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	e009      	b.n	8008264 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3310      	adds	r3, #16
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fef1 	bl	800803c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3324      	adds	r3, #36	@ 0x24
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff feec 	bl	800803c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008264:	f002 f862 	bl	800a32c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008268:	2301      	movs	r3, #1
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	@ 0x38
 800827c:	af02      	add	r7, sp, #8
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10b      	bne.n	80082a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	e7fd      	b.n	80082a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	e7fd      	b.n	80082be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <xQueueGenericCreateStatic+0x56>
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <xQueueGenericCreateStatic+0x5a>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e000      	b.n	80082d4 <xQueueGenericCreateStatic+0x5c>
 80082d2:	2300      	movs	r3, #0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	623b      	str	r3, [r7, #32]
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	e7fd      	b.n	80082ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d102      	bne.n	80082fc <xQueueGenericCreateStatic+0x84>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <xQueueGenericCreateStatic+0x88>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <xQueueGenericCreateStatic+0x8a>
 8008300:	2300      	movs	r3, #0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	61fb      	str	r3, [r7, #28]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800831e:	2350      	movs	r3, #80	@ 0x50
 8008320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b50      	cmp	r3, #80	@ 0x50
 8008326:	d00b      	beq.n	8008340 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	61bb      	str	r3, [r7, #24]
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008340:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00d      	beq.n	8008368 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800834c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008354:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	4613      	mov	r3, r2
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 f805 	bl	8008372 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800836a:	4618      	mov	r0, r3
 800836c:	3730      	adds	r7, #48	@ 0x30
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e002      	b.n	8008394 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083a0:	2101      	movs	r1, #1
 80083a2:	69b8      	ldr	r0, [r7, #24]
 80083a4:	f7ff fefe 	bl	80081a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	78fa      	ldrb	r2, [r7, #3]
 80083ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08e      	sub	sp, #56	@ 0x38
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083c6:	2300      	movs	r3, #0
 80083c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <xQueueGenericSend+0x34>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083e6:	bf00      	nop
 80083e8:	bf00      	nop
 80083ea:	e7fd      	b.n	80083e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <xQueueGenericSend+0x42>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <xQueueGenericSend+0x46>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <xQueueGenericSend+0x48>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10b      	bne.n	800841c <xQueueGenericSend+0x64>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008416:	bf00      	nop
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d103      	bne.n	800842a <xQueueGenericSend+0x72>
 8008422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <xQueueGenericSend+0x76>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <xQueueGenericSend+0x78>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10b      	bne.n	800844c <xQueueGenericSend+0x94>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	623b      	str	r3, [r7, #32]
}
 8008446:	bf00      	nop
 8008448:	bf00      	nop
 800844a:	e7fd      	b.n	8008448 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800844c:	f001 f9ce 	bl	80097ec <xTaskGetSchedulerState>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <xQueueGenericSend+0xa4>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <xQueueGenericSend+0xa8>
 800845c:	2301      	movs	r3, #1
 800845e:	e000      	b.n	8008462 <xQueueGenericSend+0xaa>
 8008460:	2300      	movs	r3, #0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10b      	bne.n	800847e <xQueueGenericSend+0xc6>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	61fb      	str	r3, [r7, #28]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800847e:	f001 ff23 	bl	800a2c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848a:	429a      	cmp	r2, r3
 800848c:	d302      	bcc.n	8008494 <xQueueGenericSend+0xdc>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d129      	bne.n	80084e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800849a:	f000 fa0f 	bl	80088bc <prvCopyDataToQueue>
 800849e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d010      	beq.n	80084ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	3324      	adds	r3, #36	@ 0x24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 ffdd 	bl	800946c <xTaskRemoveFromEventList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d013      	beq.n	80084e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084b8:	4b3f      	ldr	r3, [pc, #252]	@ (80085b8 <xQueueGenericSend+0x200>)
 80084ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	e00a      	b.n	80084e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084d0:	4b39      	ldr	r3, [pc, #228]	@ (80085b8 <xQueueGenericSend+0x200>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084e0:	f001 ff24 	bl	800a32c <vPortExitCritical>
				return pdPASS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e063      	b.n	80085b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d103      	bne.n	80084f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084ee:	f001 ff1d 	bl	800a32c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e05c      	b.n	80085b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d106      	bne.n	800850a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	4618      	mov	r0, r3
 8008502:	f001 f817 	bl	8009534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008506:	2301      	movs	r3, #1
 8008508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800850a:	f001 ff0f 	bl	800a32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800850e:	f000 fd87 	bl	8009020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008512:	f001 fed9 	bl	800a2c8 <vPortEnterCritical>
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800851c:	b25b      	sxtb	r3, r3
 800851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008522:	d103      	bne.n	800852c <xQueueGenericSend+0x174>
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	2200      	movs	r2, #0
 8008528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800852c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008532:	b25b      	sxtb	r3, r3
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d103      	bne.n	8008542 <xQueueGenericSend+0x18a>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008542:	f001 fef3 	bl	800a32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008546:	1d3a      	adds	r2, r7, #4
 8008548:	f107 0314 	add.w	r3, r7, #20
 800854c:	4611      	mov	r1, r2
 800854e:	4618      	mov	r0, r3
 8008550:	f001 f806 	bl	8009560 <xTaskCheckForTimeOut>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d124      	bne.n	80085a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800855a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855c:	f000 faa6 	bl	8008aac <prvIsQueueFull>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d018      	beq.n	8008598 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	3310      	adds	r3, #16
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	4611      	mov	r1, r2
 800856e:	4618      	mov	r0, r3
 8008570:	f000 ff2a 	bl	80093c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008576:	f000 fa31 	bl	80089dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800857a:	f000 fd5f 	bl	800903c <xTaskResumeAll>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	f47f af7c 	bne.w	800847e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008586:	4b0c      	ldr	r3, [pc, #48]	@ (80085b8 <xQueueGenericSend+0x200>)
 8008588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	e772      	b.n	800847e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800859a:	f000 fa1f 	bl	80089dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800859e:	f000 fd4d 	bl	800903c <xTaskResumeAll>
 80085a2:	e76c      	b.n	800847e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085a6:	f000 fa19 	bl	80089dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085aa:	f000 fd47 	bl	800903c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3738      	adds	r7, #56	@ 0x38
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b090      	sub	sp, #64	@ 0x40
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80085ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10b      	bne.n	80085ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	e7fd      	b.n	80085e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d103      	bne.n	80085fa <xQueueGenericSendFromISR+0x3e>
 80085f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <xQueueGenericSendFromISR+0x42>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <xQueueGenericSendFromISR+0x44>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d103      	bne.n	800862a <xQueueGenericSendFromISR+0x6e>
 8008622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008626:	2b01      	cmp	r3, #1
 8008628:	d101      	bne.n	800862e <xQueueGenericSendFromISR+0x72>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <xQueueGenericSendFromISR+0x74>
 800862e:	2300      	movs	r3, #0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	623b      	str	r3, [r7, #32]
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800864c:	f001 ff1c 	bl	800a488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008650:	f3ef 8211 	mrs	r2, BASEPRI
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	61fa      	str	r2, [r7, #28]
 8008666:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008668:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800866a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800866c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008674:	429a      	cmp	r2, r3
 8008676:	d302      	bcc.n	800867e <xQueueGenericSendFromISR+0xc2>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d12f      	bne.n	80086de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800867e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	68b9      	ldr	r1, [r7, #8]
 8008692:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008694:	f000 f912 	bl	80088bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008698:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d112      	bne.n	80086c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d016      	beq.n	80086d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ac:	3324      	adds	r3, #36	@ 0x24
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fedc 	bl	800946c <xTaskRemoveFromEventList>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00e      	beq.n	80086d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00b      	beq.n	80086d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	e007      	b.n	80086d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80086cc:	3301      	adds	r3, #1
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	b25a      	sxtb	r2, r3
 80086d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80086d8:	2301      	movs	r3, #1
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80086dc:	e001      	b.n	80086e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3740      	adds	r7, #64	@ 0x40
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08c      	sub	sp, #48	@ 0x30
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008704:	2300      	movs	r3, #0
 8008706:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10b      	bne.n	800872a <xQueueReceive+0x32>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	623b      	str	r3, [r7, #32]
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop
 8008728:	e7fd      	b.n	8008726 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <xQueueReceive+0x40>
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <xQueueReceive+0x44>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <xQueueReceive+0x46>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xQueueReceive+0x62>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	61fb      	str	r3, [r7, #28]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800875a:	f001 f847 	bl	80097ec <xTaskGetSchedulerState>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <xQueueReceive+0x72>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <xQueueReceive+0x76>
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <xQueueReceive+0x78>
 800876e:	2300      	movs	r3, #0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xQueueReceive+0x94>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	61bb      	str	r3, [r7, #24]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800878c:	f001 fd9c 	bl	800a2c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01f      	beq.n	80087dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a0:	f000 f8f6 	bl	8008990 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	1e5a      	subs	r2, r3, #1
 80087a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00f      	beq.n	80087d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b6:	3310      	adds	r3, #16
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fe57 	bl	800946c <xTaskRemoveFromEventList>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d007      	beq.n	80087d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087c4:	4b3c      	ldr	r3, [pc, #240]	@ (80088b8 <xQueueReceive+0x1c0>)
 80087c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087d4:	f001 fdaa 	bl	800a32c <vPortExitCritical>
				return pdPASS;
 80087d8:	2301      	movs	r3, #1
 80087da:	e069      	b.n	80088b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d103      	bne.n	80087ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087e2:	f001 fda3 	bl	800a32c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087e6:	2300      	movs	r3, #0
 80087e8:	e062      	b.n	80088b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d106      	bne.n	80087fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087f0:	f107 0310 	add.w	r3, r7, #16
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fe9d 	bl	8009534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087fa:	2301      	movs	r3, #1
 80087fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087fe:	f001 fd95 	bl	800a32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008802:	f000 fc0d 	bl	8009020 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008806:	f001 fd5f 	bl	800a2c8 <vPortEnterCritical>
 800880a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008810:	b25b      	sxtb	r3, r3
 8008812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008816:	d103      	bne.n	8008820 <xQueueReceive+0x128>
 8008818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008826:	b25b      	sxtb	r3, r3
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d103      	bne.n	8008836 <xQueueReceive+0x13e>
 800882e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008836:	f001 fd79 	bl	800a32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800883a:	1d3a      	adds	r2, r7, #4
 800883c:	f107 0310 	add.w	r3, r7, #16
 8008840:	4611      	mov	r1, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fe8c 	bl	8009560 <xTaskCheckForTimeOut>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d123      	bne.n	8008896 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800884e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008850:	f000 f916 	bl	8008a80 <prvIsQueueEmpty>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d017      	beq.n	800888a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800885a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885c:	3324      	adds	r3, #36	@ 0x24
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f000 fdb0 	bl	80093c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800886a:	f000 f8b7 	bl	80089dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800886e:	f000 fbe5 	bl	800903c <xTaskResumeAll>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d189      	bne.n	800878c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008878:	4b0f      	ldr	r3, [pc, #60]	@ (80088b8 <xQueueReceive+0x1c0>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	e780      	b.n	800878c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800888a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800888c:	f000 f8a6 	bl	80089dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008890:	f000 fbd4 	bl	800903c <xTaskResumeAll>
 8008894:	e77a      	b.n	800878c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008898:	f000 f8a0 	bl	80089dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800889c:	f000 fbce 	bl	800903c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088a2:	f000 f8ed 	bl	8008a80 <prvIsQueueEmpty>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f43f af6f 	beq.w	800878c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3730      	adds	r7, #48	@ 0x30
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10d      	bne.n	80088f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d14d      	bne.n	800897e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 ff9e 	bl	8009828 <xTaskPriorityDisinherit>
 80088ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	e043      	b.n	800897e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d119      	bne.n	8008930 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6858      	ldr	r0, [r3, #4]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008904:	461a      	mov	r2, r3
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	f002 fdff 	bl	800b50a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008914:	441a      	add	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	429a      	cmp	r2, r3
 8008924:	d32b      	bcc.n	800897e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	605a      	str	r2, [r3, #4]
 800892e:	e026      	b.n	800897e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	68d8      	ldr	r0, [r3, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008938:	461a      	mov	r2, r3
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	f002 fde5 	bl	800b50a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008948:	425b      	negs	r3, r3
 800894a:	441a      	add	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d207      	bcs.n	800896c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008964:	425b      	negs	r3, r3
 8008966:	441a      	add	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b02      	cmp	r3, #2
 8008970:	d105      	bne.n	800897e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	3b01      	subs	r3, #1
 800897c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008986:	697b      	ldr	r3, [r7, #20]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d018      	beq.n	80089d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089aa:	441a      	add	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d303      	bcc.n	80089c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68d9      	ldr	r1, [r3, #12]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089cc:	461a      	mov	r2, r3
 80089ce:	6838      	ldr	r0, [r7, #0]
 80089d0:	f002 fd9b 	bl	800b50a <memcpy>
	}
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089e4:	f001 fc70 	bl	800a2c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089f0:	e011      	b.n	8008a16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d012      	beq.n	8008a20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3324      	adds	r3, #36	@ 0x24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fd34 	bl	800946c <xTaskRemoveFromEventList>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a0a:	f000 fe0d 	bl	8009628 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	dce9      	bgt.n	80089f2 <prvUnlockQueue+0x16>
 8008a1e:	e000      	b.n	8008a22 <prvUnlockQueue+0x46>
					break;
 8008a20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	22ff      	movs	r2, #255	@ 0xff
 8008a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a2a:	f001 fc7f 	bl	800a32c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a2e:	f001 fc4b 	bl	800a2c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a3a:	e011      	b.n	8008a60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d012      	beq.n	8008a6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3310      	adds	r3, #16
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fd0f 	bl	800946c <xTaskRemoveFromEventList>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a54:	f000 fde8 	bl	8009628 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dce9      	bgt.n	8008a3c <prvUnlockQueue+0x60>
 8008a68:	e000      	b.n	8008a6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	22ff      	movs	r2, #255	@ 0xff
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a74:	f001 fc5a 	bl	800a32c <vPortExitCritical>
}
 8008a78:	bf00      	nop
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a88:	f001 fc1e 	bl	800a2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a94:	2301      	movs	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e001      	b.n	8008a9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a9e:	f001 fc45 	bl	800a32c <vPortExitCritical>

	return xReturn;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ab4:	f001 fc08 	bl	800a2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d102      	bne.n	8008aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	e001      	b.n	8008ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ace:	f001 fc2d 	bl	800a32c <vPortExitCritical>

	return xReturn;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	e014      	b.n	8008b16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008aec:	4a0f      	ldr	r2, [pc, #60]	@ (8008b2c <vQueueAddToRegistry+0x50>)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10b      	bne.n	8008b10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008af8:	490c      	ldr	r1, [pc, #48]	@ (8008b2c <vQueueAddToRegistry+0x50>)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b02:	4a0a      	ldr	r2, [pc, #40]	@ (8008b2c <vQueueAddToRegistry+0x50>)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4413      	add	r3, r2
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b0e:	e006      	b.n	8008b1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b07      	cmp	r3, #7
 8008b1a:	d9e7      	bls.n	8008aec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	20000b68 	.word	0x20000b68

08008b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b40:	f001 fbc2 	bl	800a2c8 <vPortEnterCritical>
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b4a:	b25b      	sxtb	r3, r3
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d103      	bne.n	8008b5a <vQueueWaitForMessageRestricted+0x2a>
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d103      	bne.n	8008b70 <vQueueWaitForMessageRestricted+0x40>
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b70:	f001 fbdc 	bl	800a32c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	3324      	adds	r3, #36	@ 0x24
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	68b9      	ldr	r1, [r7, #8]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fc45 	bl	8009414 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b8a:	6978      	ldr	r0, [r7, #20]
 8008b8c:	f7ff ff26 	bl	80089dc <prvUnlockQueue>
	}
 8008b90:	bf00      	nop
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08e      	sub	sp, #56	@ 0x38
 8008b9c:	af04      	add	r7, sp, #16
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10b      	bne.n	8008bc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	623b      	str	r3, [r7, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	bf00      	nop
 8008bc2:	e7fd      	b.n	8008bc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	61fb      	str	r3, [r7, #28]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008be2:	235c      	movs	r3, #92	@ 0x5c
 8008be4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008bea:	d00b      	beq.n	8008c04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	61bb      	str	r3, [r7, #24]
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	e7fd      	b.n	8008c00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01e      	beq.n	8008c4a <xTaskCreateStatic+0xb2>
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01b      	beq.n	8008c4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c24:	2300      	movs	r3, #0
 8008c26:	9303      	str	r3, [sp, #12]
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	f107 0314 	add.w	r3, r7, #20
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	68b9      	ldr	r1, [r7, #8]
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f850 	bl	8008ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c44:	f000 f8de 	bl	8008e04 <prvAddNewTaskToReadyList>
 8008c48:	e001      	b.n	8008c4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c4e:	697b      	ldr	r3, [r7, #20]
	}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3728      	adds	r7, #40	@ 0x28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08c      	sub	sp, #48	@ 0x30
 8008c5c:	af04      	add	r7, sp, #16
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	4613      	mov	r3, r2
 8008c66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c68:	88fb      	ldrh	r3, [r7, #6]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f001 fc4d 	bl	800a50c <pvPortMalloc>
 8008c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00e      	beq.n	8008c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c7a:	205c      	movs	r0, #92	@ 0x5c
 8008c7c:	f001 fc46 	bl	800a50c <pvPortMalloc>
 8008c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c8e:	e005      	b.n	8008c9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c90:	6978      	ldr	r0, [r7, #20]
 8008c92:	f001 fd09 	bl	800a6a8 <vPortFree>
 8008c96:	e001      	b.n	8008c9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d017      	beq.n	8008cd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008caa:	88fa      	ldrh	r2, [r7, #6]
 8008cac:	2300      	movs	r3, #0
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	9302      	str	r3, [sp, #8]
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68b9      	ldr	r1, [r7, #8]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 f80e 	bl	8008ce2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cc6:	69f8      	ldr	r0, [r7, #28]
 8008cc8:	f000 f89c 	bl	8008e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	61bb      	str	r3, [r7, #24]
 8008cd0:	e002      	b.n	8008cd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
	}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3720      	adds	r7, #32
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b088      	sub	sp, #32
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	607a      	str	r2, [r7, #4]
 8008cee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	21a5      	movs	r1, #165	@ 0xa5
 8008cfc:	f002 fb85 	bl	800b40a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	f023 0307 	bic.w	r3, r3, #7
 8008d18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	617b      	str	r3, [r7, #20]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d01f      	beq.n	8008d82 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d42:	2300      	movs	r3, #0
 8008d44:	61fb      	str	r3, [r7, #28]
 8008d46:	e012      	b.n	8008d6e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	7819      	ldrb	r1, [r3, #0]
 8008d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	3334      	adds	r3, #52	@ 0x34
 8008d58:	460a      	mov	r2, r1
 8008d5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	2b0f      	cmp	r3, #15
 8008d72:	d9e9      	bls.n	8008d48 <prvInitialiseNewTask+0x66>
 8008d74:	e000      	b.n	8008d78 <prvInitialiseNewTask+0x96>
			{
				break;
 8008d76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d80:	e003      	b.n	8008d8a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	2b37      	cmp	r3, #55	@ 0x37
 8008d8e:	d901      	bls.n	8008d94 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d90:	2337      	movs	r3, #55	@ 0x37
 8008d92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	2200      	movs	r2, #0
 8008da4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	3304      	adds	r3, #4
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff f966 	bl	800807c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	3318      	adds	r3, #24
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff f961 	bl	800807c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	68f9      	ldr	r1, [r7, #12]
 8008de2:	69b8      	ldr	r0, [r7, #24]
 8008de4:	f001 f93e 	bl	800a064 <pxPortInitialiseStack>
 8008de8:	4602      	mov	r2, r0
 8008dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dfa:	bf00      	nop
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e0c:	f001 fa5c 	bl	800a2c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e10:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec8 <prvAddNewTaskToReadyList+0xc4>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3301      	adds	r3, #1
 8008e16:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec8 <prvAddNewTaskToReadyList+0xc4>)
 8008e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d109      	bne.n	8008e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e22:	4a2a      	ldr	r2, [pc, #168]	@ (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e28:	4b27      	ldr	r3, [pc, #156]	@ (8008ec8 <prvAddNewTaskToReadyList+0xc4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d110      	bne.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e30:	f000 fc1e 	bl	8009670 <prvInitialiseTaskLists>
 8008e34:	e00d      	b.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e36:	4b26      	ldr	r3, [pc, #152]	@ (8008ed0 <prvAddNewTaskToReadyList+0xcc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d109      	bne.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e3e:	4b23      	ldr	r3, [pc, #140]	@ (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d802      	bhi.n	8008e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e52:	4b20      	ldr	r3, [pc, #128]	@ (8008ed4 <prvAddNewTaskToReadyList+0xd0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3301      	adds	r3, #1
 8008e58:	4a1e      	ldr	r2, [pc, #120]	@ (8008ed4 <prvAddNewTaskToReadyList+0xd0>)
 8008e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed4 <prvAddNewTaskToReadyList+0xd0>)
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e68:	4b1b      	ldr	r3, [pc, #108]	@ (8008ed8 <prvAddNewTaskToReadyList+0xd4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d903      	bls.n	8008e78 <prvAddNewTaskToReadyList+0x74>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	4a18      	ldr	r2, [pc, #96]	@ (8008ed8 <prvAddNewTaskToReadyList+0xd4>)
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4a15      	ldr	r2, [pc, #84]	@ (8008edc <prvAddNewTaskToReadyList+0xd8>)
 8008e86:	441a      	add	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7ff f901 	bl	8008096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e94:	f001 fa4a 	bl	800a32c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e98:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed0 <prvAddNewTaskToReadyList+0xcc>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00e      	beq.n	8008ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ecc <prvAddNewTaskToReadyList+0xc8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d207      	bcs.n	8008ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008eae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee0 <prvAddNewTaskToReadyList+0xdc>)
 8008eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	2000107c 	.word	0x2000107c
 8008ecc:	20000ba8 	.word	0x20000ba8
 8008ed0:	20001088 	.word	0x20001088
 8008ed4:	20001098 	.word	0x20001098
 8008ed8:	20001084 	.word	0x20001084
 8008edc:	20000bac 	.word	0x20000bac
 8008ee0:	e000ed04 	.word	0xe000ed04

08008ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d018      	beq.n	8008f28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ef6:	4b14      	ldr	r3, [pc, #80]	@ (8008f48 <vTaskDelay+0x64>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <vTaskDelay+0x32>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60bb      	str	r3, [r7, #8]
}
 8008f10:	bf00      	nop
 8008f12:	bf00      	nop
 8008f14:	e7fd      	b.n	8008f12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f16:	f000 f883 	bl	8009020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fcf3 	bl	8009908 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f22:	f000 f88b 	bl	800903c <xTaskResumeAll>
 8008f26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d107      	bne.n	8008f3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f2e:	4b07      	ldr	r3, [pc, #28]	@ (8008f4c <vTaskDelay+0x68>)
 8008f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	200010a4 	.word	0x200010a4
 8008f4c:	e000ed04 	.word	0xe000ed04

08008f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	@ 0x28
 8008f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f5e:	463a      	mov	r2, r7
 8008f60:	1d39      	adds	r1, r7, #4
 8008f62:	f107 0308 	add.w	r3, r7, #8
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff f834 	bl	8007fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	2300      	movs	r3, #0
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	4922      	ldr	r1, [pc, #136]	@ (8009008 <vTaskStartScheduler+0xb8>)
 8008f80:	4822      	ldr	r0, [pc, #136]	@ (800900c <vTaskStartScheduler+0xbc>)
 8008f82:	f7ff fe09 	bl	8008b98 <xTaskCreateStatic>
 8008f86:	4603      	mov	r3, r0
 8008f88:	4a21      	ldr	r2, [pc, #132]	@ (8009010 <vTaskStartScheduler+0xc0>)
 8008f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f8c:	4b20      	ldr	r3, [pc, #128]	@ (8009010 <vTaskStartScheduler+0xc0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f94:	2301      	movs	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	e001      	b.n	8008f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d102      	bne.n	8008faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fa4:	f000 fd04 	bl	80099b0 <xTimerCreateTimerTask>
 8008fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d116      	bne.n	8008fde <vTaskStartScheduler+0x8e>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fc4:	4b13      	ldr	r3, [pc, #76]	@ (8009014 <vTaskStartScheduler+0xc4>)
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fcc:	4b12      	ldr	r3, [pc, #72]	@ (8009018 <vTaskStartScheduler+0xc8>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fd2:	4b12      	ldr	r3, [pc, #72]	@ (800901c <vTaskStartScheduler+0xcc>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fd8:	f001 f8d2 	bl	800a180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fdc:	e00f      	b.n	8008ffe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe4:	d10b      	bne.n	8008ffe <vTaskStartScheduler+0xae>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	60fb      	str	r3, [r7, #12]
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	e7fd      	b.n	8008ffa <vTaskStartScheduler+0xaa>
}
 8008ffe:	bf00      	nop
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	0800d5f8 	.word	0x0800d5f8
 800900c:	08009641 	.word	0x08009641
 8009010:	200010a0 	.word	0x200010a0
 8009014:	2000109c 	.word	0x2000109c
 8009018:	20001088 	.word	0x20001088
 800901c:	20001080 	.word	0x20001080

08009020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009024:	4b04      	ldr	r3, [pc, #16]	@ (8009038 <vTaskSuspendAll+0x18>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	4a03      	ldr	r2, [pc, #12]	@ (8009038 <vTaskSuspendAll+0x18>)
 800902c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800902e:	bf00      	nop
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	200010a4 	.word	0x200010a4

0800903c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800904a:	4b42      	ldr	r3, [pc, #264]	@ (8009154 <xTaskResumeAll+0x118>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10b      	bne.n	800906a <xTaskResumeAll+0x2e>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	603b      	str	r3, [r7, #0]
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	e7fd      	b.n	8009066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800906a:	f001 f92d 	bl	800a2c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800906e:	4b39      	ldr	r3, [pc, #228]	@ (8009154 <xTaskResumeAll+0x118>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3b01      	subs	r3, #1
 8009074:	4a37      	ldr	r2, [pc, #220]	@ (8009154 <xTaskResumeAll+0x118>)
 8009076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009078:	4b36      	ldr	r3, [pc, #216]	@ (8009154 <xTaskResumeAll+0x118>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d162      	bne.n	8009146 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009080:	4b35      	ldr	r3, [pc, #212]	@ (8009158 <xTaskResumeAll+0x11c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d05e      	beq.n	8009146 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009088:	e02f      	b.n	80090ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908a:	4b34      	ldr	r3, [pc, #208]	@ (800915c <xTaskResumeAll+0x120>)
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3318      	adds	r3, #24
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff f85a 	bl	8008150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3304      	adds	r3, #4
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7ff f855 	bl	8008150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090aa:	4b2d      	ldr	r3, [pc, #180]	@ (8009160 <xTaskResumeAll+0x124>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d903      	bls.n	80090ba <xTaskResumeAll+0x7e>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009160 <xTaskResumeAll+0x124>)
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4a27      	ldr	r2, [pc, #156]	@ (8009164 <xTaskResumeAll+0x128>)
 80090c8:	441a      	add	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fe ffe0 	bl	8008096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090da:	4b23      	ldr	r3, [pc, #140]	@ (8009168 <xTaskResumeAll+0x12c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d302      	bcc.n	80090ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80090e4:	4b21      	ldr	r3, [pc, #132]	@ (800916c <xTaskResumeAll+0x130>)
 80090e6:	2201      	movs	r2, #1
 80090e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ea:	4b1c      	ldr	r3, [pc, #112]	@ (800915c <xTaskResumeAll+0x120>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1cb      	bne.n	800908a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090f8:	f000 fb58 	bl	80097ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009170 <xTaskResumeAll+0x134>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d010      	beq.n	800912a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009108:	f000 f846 	bl	8009198 <xTaskIncrementTick>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009112:	4b16      	ldr	r3, [pc, #88]	@ (800916c <xTaskResumeAll+0x130>)
 8009114:	2201      	movs	r2, #1
 8009116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3b01      	subs	r3, #1
 800911c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1f1      	bne.n	8009108 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009124:	4b12      	ldr	r3, [pc, #72]	@ (8009170 <xTaskResumeAll+0x134>)
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800912a:	4b10      	ldr	r3, [pc, #64]	@ (800916c <xTaskResumeAll+0x130>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009132:	2301      	movs	r3, #1
 8009134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009136:	4b0f      	ldr	r3, [pc, #60]	@ (8009174 <xTaskResumeAll+0x138>)
 8009138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009146:	f001 f8f1 	bl	800a32c <vPortExitCritical>

	return xAlreadyYielded;
 800914a:	68bb      	ldr	r3, [r7, #8]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	200010a4 	.word	0x200010a4
 8009158:	2000107c 	.word	0x2000107c
 800915c:	2000103c 	.word	0x2000103c
 8009160:	20001084 	.word	0x20001084
 8009164:	20000bac 	.word	0x20000bac
 8009168:	20000ba8 	.word	0x20000ba8
 800916c:	20001090 	.word	0x20001090
 8009170:	2000108c 	.word	0x2000108c
 8009174:	e000ed04 	.word	0xe000ed04

08009178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800917e:	4b05      	ldr	r3, [pc, #20]	@ (8009194 <xTaskGetTickCount+0x1c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009184:	687b      	ldr	r3, [r7, #4]
}
 8009186:	4618      	mov	r0, r3
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20001080 	.word	0x20001080

08009198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091a2:	4b4f      	ldr	r3, [pc, #316]	@ (80092e0 <xTaskIncrementTick+0x148>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f040 8090 	bne.w	80092cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091ac:	4b4d      	ldr	r3, [pc, #308]	@ (80092e4 <xTaskIncrementTick+0x14c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3301      	adds	r3, #1
 80091b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091b4:	4a4b      	ldr	r2, [pc, #300]	@ (80092e4 <xTaskIncrementTick+0x14c>)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d121      	bne.n	8009204 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091c0:	4b49      	ldr	r3, [pc, #292]	@ (80092e8 <xTaskIncrementTick+0x150>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	603b      	str	r3, [r7, #0]
}
 80091dc:	bf00      	nop
 80091de:	bf00      	nop
 80091e0:	e7fd      	b.n	80091de <xTaskIncrementTick+0x46>
 80091e2:	4b41      	ldr	r3, [pc, #260]	@ (80092e8 <xTaskIncrementTick+0x150>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	4b40      	ldr	r3, [pc, #256]	@ (80092ec <xTaskIncrementTick+0x154>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a3e      	ldr	r2, [pc, #248]	@ (80092e8 <xTaskIncrementTick+0x150>)
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	4a3e      	ldr	r2, [pc, #248]	@ (80092ec <xTaskIncrementTick+0x154>)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	4b3e      	ldr	r3, [pc, #248]	@ (80092f0 <xTaskIncrementTick+0x158>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	4a3c      	ldr	r2, [pc, #240]	@ (80092f0 <xTaskIncrementTick+0x158>)
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	f000 fad4 	bl	80097ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009204:	4b3b      	ldr	r3, [pc, #236]	@ (80092f4 <xTaskIncrementTick+0x15c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d349      	bcc.n	80092a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800920e:	4b36      	ldr	r3, [pc, #216]	@ (80092e8 <xTaskIncrementTick+0x150>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d104      	bne.n	8009222 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009218:	4b36      	ldr	r3, [pc, #216]	@ (80092f4 <xTaskIncrementTick+0x15c>)
 800921a:	f04f 32ff 	mov.w	r2, #4294967295
 800921e:	601a      	str	r2, [r3, #0]
					break;
 8009220:	e03f      	b.n	80092a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009222:	4b31      	ldr	r3, [pc, #196]	@ (80092e8 <xTaskIncrementTick+0x150>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	429a      	cmp	r2, r3
 8009238:	d203      	bcs.n	8009242 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800923a:	4a2e      	ldr	r2, [pc, #184]	@ (80092f4 <xTaskIncrementTick+0x15c>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009240:	e02f      	b.n	80092a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	3304      	adds	r3, #4
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe ff82 	bl	8008150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	3318      	adds	r3, #24
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe ff79 	bl	8008150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009262:	4b25      	ldr	r3, [pc, #148]	@ (80092f8 <xTaskIncrementTick+0x160>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d903      	bls.n	8009272 <xTaskIncrementTick+0xda>
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800926e:	4a22      	ldr	r2, [pc, #136]	@ (80092f8 <xTaskIncrementTick+0x160>)
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4a1f      	ldr	r2, [pc, #124]	@ (80092fc <xTaskIncrementTick+0x164>)
 8009280:	441a      	add	r2, r3
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f7fe ff04 	bl	8008096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009292:	4b1b      	ldr	r3, [pc, #108]	@ (8009300 <xTaskIncrementTick+0x168>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009298:	429a      	cmp	r2, r3
 800929a:	d3b8      	bcc.n	800920e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a0:	e7b5      	b.n	800920e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092a2:	4b17      	ldr	r3, [pc, #92]	@ (8009300 <xTaskIncrementTick+0x168>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a8:	4914      	ldr	r1, [pc, #80]	@ (80092fc <xTaskIncrementTick+0x164>)
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	440b      	add	r3, r1
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d901      	bls.n	80092be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092be:	4b11      	ldr	r3, [pc, #68]	@ (8009304 <xTaskIncrementTick+0x16c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80092c6:	2301      	movs	r3, #1
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	e004      	b.n	80092d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009308 <xTaskIncrementTick+0x170>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3301      	adds	r3, #1
 80092d2:	4a0d      	ldr	r2, [pc, #52]	@ (8009308 <xTaskIncrementTick+0x170>)
 80092d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092d6:	697b      	ldr	r3, [r7, #20]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	200010a4 	.word	0x200010a4
 80092e4:	20001080 	.word	0x20001080
 80092e8:	20001034 	.word	0x20001034
 80092ec:	20001038 	.word	0x20001038
 80092f0:	20001094 	.word	0x20001094
 80092f4:	2000109c 	.word	0x2000109c
 80092f8:	20001084 	.word	0x20001084
 80092fc:	20000bac 	.word	0x20000bac
 8009300:	20000ba8 	.word	0x20000ba8
 8009304:	20001090 	.word	0x20001090
 8009308:	2000108c 	.word	0x2000108c

0800930c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009312:	4b28      	ldr	r3, [pc, #160]	@ (80093b4 <vTaskSwitchContext+0xa8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800931a:	4b27      	ldr	r3, [pc, #156]	@ (80093b8 <vTaskSwitchContext+0xac>)
 800931c:	2201      	movs	r2, #1
 800931e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009320:	e042      	b.n	80093a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009322:	4b25      	ldr	r3, [pc, #148]	@ (80093b8 <vTaskSwitchContext+0xac>)
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009328:	4b24      	ldr	r3, [pc, #144]	@ (80093bc <vTaskSwitchContext+0xb0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	e011      	b.n	8009354 <vTaskSwitchContext+0x48>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10b      	bne.n	800934e <vTaskSwitchContext+0x42>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	607b      	str	r3, [r7, #4]
}
 8009348:	bf00      	nop
 800934a:	bf00      	nop
 800934c:	e7fd      	b.n	800934a <vTaskSwitchContext+0x3e>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3b01      	subs	r3, #1
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	491a      	ldr	r1, [pc, #104]	@ (80093c0 <vTaskSwitchContext+0xb4>)
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	440b      	add	r3, r1
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0e3      	beq.n	8009330 <vTaskSwitchContext+0x24>
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4a13      	ldr	r2, [pc, #76]	@ (80093c0 <vTaskSwitchContext+0xb4>)
 8009374:	4413      	add	r3, r2
 8009376:	60bb      	str	r3, [r7, #8]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	605a      	str	r2, [r3, #4]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	3308      	adds	r3, #8
 800938a:	429a      	cmp	r2, r3
 800938c:	d104      	bne.n	8009398 <vTaskSwitchContext+0x8c>
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	605a      	str	r2, [r3, #4]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	4a09      	ldr	r2, [pc, #36]	@ (80093c4 <vTaskSwitchContext+0xb8>)
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	4a06      	ldr	r2, [pc, #24]	@ (80093bc <vTaskSwitchContext+0xb0>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6013      	str	r3, [r2, #0]
}
 80093a8:	bf00      	nop
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	200010a4 	.word	0x200010a4
 80093b8:	20001090 	.word	0x20001090
 80093bc:	20001084 	.word	0x20001084
 80093c0:	20000bac 	.word	0x20000bac
 80093c4:	20000ba8 	.word	0x20000ba8

080093c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10b      	bne.n	80093f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	60fb      	str	r3, [r7, #12]
}
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	e7fd      	b.n	80093ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093f0:	4b07      	ldr	r3, [pc, #28]	@ (8009410 <vTaskPlaceOnEventList+0x48>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3318      	adds	r3, #24
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7fe fe70 	bl	80080de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093fe:	2101      	movs	r1, #1
 8009400:	6838      	ldr	r0, [r7, #0]
 8009402:	f000 fa81 	bl	8009908 <prvAddCurrentTaskToDelayedList>
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	20000ba8 	.word	0x20000ba8

08009414 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	617b      	str	r3, [r7, #20]
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	e7fd      	b.n	800943a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800943e:	4b0a      	ldr	r3, [pc, #40]	@ (8009468 <vTaskPlaceOnEventListRestricted+0x54>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3318      	adds	r3, #24
 8009444:	4619      	mov	r1, r3
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7fe fe25 	bl	8008096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009452:	f04f 33ff 	mov.w	r3, #4294967295
 8009456:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	68b8      	ldr	r0, [r7, #8]
 800945c:	f000 fa54 	bl	8009908 <prvAddCurrentTaskToDelayedList>
	}
 8009460:	bf00      	nop
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000ba8 	.word	0x20000ba8

0800946c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10b      	bne.n	800949a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	60fb      	str	r3, [r7, #12]
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop
 8009498:	e7fd      	b.n	8009496 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	3318      	adds	r3, #24
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe fe56 	bl	8008150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a4:	4b1d      	ldr	r3, [pc, #116]	@ (800951c <xTaskRemoveFromEventList+0xb0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d11d      	bne.n	80094e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe fe4d 	bl	8008150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	4b19      	ldr	r3, [pc, #100]	@ (8009520 <xTaskRemoveFromEventList+0xb4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d903      	bls.n	80094ca <xTaskRemoveFromEventList+0x5e>
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c6:	4a16      	ldr	r2, [pc, #88]	@ (8009520 <xTaskRemoveFromEventList+0xb4>)
 80094c8:	6013      	str	r3, [r2, #0]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a13      	ldr	r2, [pc, #76]	@ (8009524 <xTaskRemoveFromEventList+0xb8>)
 80094d8:	441a      	add	r2, r3
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	3304      	adds	r3, #4
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7fe fdd8 	bl	8008096 <vListInsertEnd>
 80094e6:	e005      	b.n	80094f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	3318      	adds	r3, #24
 80094ec:	4619      	mov	r1, r3
 80094ee:	480e      	ldr	r0, [pc, #56]	@ (8009528 <xTaskRemoveFromEventList+0xbc>)
 80094f0:	f7fe fdd1 	bl	8008096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f8:	4b0c      	ldr	r3, [pc, #48]	@ (800952c <xTaskRemoveFromEventList+0xc0>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fe:	429a      	cmp	r2, r3
 8009500:	d905      	bls.n	800950e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009502:	2301      	movs	r3, #1
 8009504:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009506:	4b0a      	ldr	r3, [pc, #40]	@ (8009530 <xTaskRemoveFromEventList+0xc4>)
 8009508:	2201      	movs	r2, #1
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	e001      	b.n	8009512 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009512:	697b      	ldr	r3, [r7, #20]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	200010a4 	.word	0x200010a4
 8009520:	20001084 	.word	0x20001084
 8009524:	20000bac 	.word	0x20000bac
 8009528:	2000103c 	.word	0x2000103c
 800952c:	20000ba8 	.word	0x20000ba8
 8009530:	20001090 	.word	0x20001090

08009534 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800953c:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <vTaskInternalSetTimeOutState+0x24>)
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009544:	4b05      	ldr	r3, [pc, #20]	@ (800955c <vTaskInternalSetTimeOutState+0x28>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	605a      	str	r2, [r3, #4]
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	20001094 	.word	0x20001094
 800955c:	20001080 	.word	0x20001080

08009560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10b      	bne.n	8009588 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	613b      	str	r3, [r7, #16]
}
 8009582:	bf00      	nop
 8009584:	bf00      	nop
 8009586:	e7fd      	b.n	8009584 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60fb      	str	r3, [r7, #12]
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	e7fd      	b.n	80095a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80095a6:	f000 fe8f 	bl	800a2c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095aa:	4b1d      	ldr	r3, [pc, #116]	@ (8009620 <xTaskCheckForTimeOut+0xc0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c2:	d102      	bne.n	80095ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	e023      	b.n	8009612 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	4b15      	ldr	r3, [pc, #84]	@ (8009624 <xTaskCheckForTimeOut+0xc4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d007      	beq.n	80095e6 <xTaskCheckForTimeOut+0x86>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d302      	bcc.n	80095e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095e0:	2301      	movs	r3, #1
 80095e2:	61fb      	str	r3, [r7, #28]
 80095e4:	e015      	b.n	8009612 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d20b      	bcs.n	8009608 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	1ad2      	subs	r2, r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff ff99 	bl	8009534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009602:	2300      	movs	r3, #0
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	e004      	b.n	8009612 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800960e:	2301      	movs	r3, #1
 8009610:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009612:	f000 fe8b 	bl	800a32c <vPortExitCritical>

	return xReturn;
 8009616:	69fb      	ldr	r3, [r7, #28]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20001080 	.word	0x20001080
 8009624:	20001094 	.word	0x20001094

08009628 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009628:	b480      	push	{r7}
 800962a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800962c:	4b03      	ldr	r3, [pc, #12]	@ (800963c <vTaskMissedYield+0x14>)
 800962e:	2201      	movs	r2, #1
 8009630:	601a      	str	r2, [r3, #0]
}
 8009632:	bf00      	nop
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	20001090 	.word	0x20001090

08009640 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009648:	f000 f852 	bl	80096f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800964c:	4b06      	ldr	r3, [pc, #24]	@ (8009668 <prvIdleTask+0x28>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d9f9      	bls.n	8009648 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009654:	4b05      	ldr	r3, [pc, #20]	@ (800966c <prvIdleTask+0x2c>)
 8009656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009664:	e7f0      	b.n	8009648 <prvIdleTask+0x8>
 8009666:	bf00      	nop
 8009668:	20000bac 	.word	0x20000bac
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009676:	2300      	movs	r3, #0
 8009678:	607b      	str	r3, [r7, #4]
 800967a:	e00c      	b.n	8009696 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4a12      	ldr	r2, [pc, #72]	@ (80096d0 <prvInitialiseTaskLists+0x60>)
 8009688:	4413      	add	r3, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fcd6 	bl	800803c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3301      	adds	r3, #1
 8009694:	607b      	str	r3, [r7, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b37      	cmp	r3, #55	@ 0x37
 800969a:	d9ef      	bls.n	800967c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800969c:	480d      	ldr	r0, [pc, #52]	@ (80096d4 <prvInitialiseTaskLists+0x64>)
 800969e:	f7fe fccd 	bl	800803c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096a2:	480d      	ldr	r0, [pc, #52]	@ (80096d8 <prvInitialiseTaskLists+0x68>)
 80096a4:	f7fe fcca 	bl	800803c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096a8:	480c      	ldr	r0, [pc, #48]	@ (80096dc <prvInitialiseTaskLists+0x6c>)
 80096aa:	f7fe fcc7 	bl	800803c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ae:	480c      	ldr	r0, [pc, #48]	@ (80096e0 <prvInitialiseTaskLists+0x70>)
 80096b0:	f7fe fcc4 	bl	800803c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096b4:	480b      	ldr	r0, [pc, #44]	@ (80096e4 <prvInitialiseTaskLists+0x74>)
 80096b6:	f7fe fcc1 	bl	800803c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096ba:	4b0b      	ldr	r3, [pc, #44]	@ (80096e8 <prvInitialiseTaskLists+0x78>)
 80096bc:	4a05      	ldr	r2, [pc, #20]	@ (80096d4 <prvInitialiseTaskLists+0x64>)
 80096be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096c0:	4b0a      	ldr	r3, [pc, #40]	@ (80096ec <prvInitialiseTaskLists+0x7c>)
 80096c2:	4a05      	ldr	r2, [pc, #20]	@ (80096d8 <prvInitialiseTaskLists+0x68>)
 80096c4:	601a      	str	r2, [r3, #0]
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000bac 	.word	0x20000bac
 80096d4:	2000100c 	.word	0x2000100c
 80096d8:	20001020 	.word	0x20001020
 80096dc:	2000103c 	.word	0x2000103c
 80096e0:	20001050 	.word	0x20001050
 80096e4:	20001068 	.word	0x20001068
 80096e8:	20001034 	.word	0x20001034
 80096ec:	20001038 	.word	0x20001038

080096f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096f6:	e019      	b.n	800972c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096f8:	f000 fde6 	bl	800a2c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fc:	4b10      	ldr	r3, [pc, #64]	@ (8009740 <prvCheckTasksWaitingTermination+0x50>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	3304      	adds	r3, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fd21 	bl	8008150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800970e:	4b0d      	ldr	r3, [pc, #52]	@ (8009744 <prvCheckTasksWaitingTermination+0x54>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3b01      	subs	r3, #1
 8009714:	4a0b      	ldr	r2, [pc, #44]	@ (8009744 <prvCheckTasksWaitingTermination+0x54>)
 8009716:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009718:	4b0b      	ldr	r3, [pc, #44]	@ (8009748 <prvCheckTasksWaitingTermination+0x58>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3b01      	subs	r3, #1
 800971e:	4a0a      	ldr	r2, [pc, #40]	@ (8009748 <prvCheckTasksWaitingTermination+0x58>)
 8009720:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009722:	f000 fe03 	bl	800a32c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f810 	bl	800974c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800972c:	4b06      	ldr	r3, [pc, #24]	@ (8009748 <prvCheckTasksWaitingTermination+0x58>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1e1      	bne.n	80096f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20001050 	.word	0x20001050
 8009744:	2000107c 	.word	0x2000107c
 8009748:	20001064 	.word	0x20001064

0800974c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009762:	4618      	mov	r0, r3
 8009764:	f000 ffa0 	bl	800a6a8 <vPortFree>
				vPortFree( pxTCB );
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 ff9d 	bl	800a6a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800976e:	e019      	b.n	80097a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009776:	2b01      	cmp	r3, #1
 8009778:	d103      	bne.n	8009782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 ff94 	bl	800a6a8 <vPortFree>
	}
 8009780:	e010      	b.n	80097a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009788:	2b02      	cmp	r3, #2
 800978a:	d00b      	beq.n	80097a4 <prvDeleteTCB+0x58>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60fb      	str	r3, [r7, #12]
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <prvDeleteTCB+0x54>
	}
 80097a4:	bf00      	nop
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097b2:	4b0c      	ldr	r3, [pc, #48]	@ (80097e4 <prvResetNextTaskUnblockTime+0x38>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097bc:	4b0a      	ldr	r3, [pc, #40]	@ (80097e8 <prvResetNextTaskUnblockTime+0x3c>)
 80097be:	f04f 32ff 	mov.w	r2, #4294967295
 80097c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097c4:	e008      	b.n	80097d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c6:	4b07      	ldr	r3, [pc, #28]	@ (80097e4 <prvResetNextTaskUnblockTime+0x38>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4a04      	ldr	r2, [pc, #16]	@ (80097e8 <prvResetNextTaskUnblockTime+0x3c>)
 80097d6:	6013      	str	r3, [r2, #0]
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20001034 	.word	0x20001034
 80097e8:	2000109c 	.word	0x2000109c

080097ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <xTaskGetSchedulerState+0x34>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097fa:	2301      	movs	r3, #1
 80097fc:	607b      	str	r3, [r7, #4]
 80097fe:	e008      	b.n	8009812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009800:	4b08      	ldr	r3, [pc, #32]	@ (8009824 <xTaskGetSchedulerState+0x38>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009808:	2302      	movs	r3, #2
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	e001      	b.n	8009812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800980e:	2300      	movs	r3, #0
 8009810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009812:	687b      	ldr	r3, [r7, #4]
	}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20001088 	.word	0x20001088
 8009824:	200010a4 	.word	0x200010a4

08009828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d058      	beq.n	80098f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800983e:	4b2f      	ldr	r3, [pc, #188]	@ (80098fc <xTaskPriorityDisinherit+0xd4>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	429a      	cmp	r2, r3
 8009846:	d00b      	beq.n	8009860 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	60fb      	str	r3, [r7, #12]
}
 800985a:	bf00      	nop
 800985c:	bf00      	nop
 800985e:	e7fd      	b.n	800985c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10b      	bne.n	8009880 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	60bb      	str	r3, [r7, #8]
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	e7fd      	b.n	800987c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009884:	1e5a      	subs	r2, r3, #1
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009892:	429a      	cmp	r2, r3
 8009894:	d02c      	beq.n	80098f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800989a:	2b00      	cmp	r3, #0
 800989c:	d128      	bne.n	80098f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fc54 	bl	8008150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009900 <xTaskPriorityDisinherit+0xd8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d903      	bls.n	80098d0 <xTaskPriorityDisinherit+0xa8>
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009900 <xTaskPriorityDisinherit+0xd8>)
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4a09      	ldr	r2, [pc, #36]	@ (8009904 <xTaskPriorityDisinherit+0xdc>)
 80098de:	441a      	add	r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f7fe fbd5 	bl	8008096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098ec:	2301      	movs	r3, #1
 80098ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098f0:	697b      	ldr	r3, [r7, #20]
	}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000ba8 	.word	0x20000ba8
 8009900:	20001084 	.word	0x20001084
 8009904:	20000bac 	.word	0x20000bac

08009908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009912:	4b21      	ldr	r3, [pc, #132]	@ (8009998 <prvAddCurrentTaskToDelayedList+0x90>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009918:	4b20      	ldr	r3, [pc, #128]	@ (800999c <prvAddCurrentTaskToDelayedList+0x94>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3304      	adds	r3, #4
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fc16 	bl	8008150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d10a      	bne.n	8009942 <prvAddCurrentTaskToDelayedList+0x3a>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d007      	beq.n	8009942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009932:	4b1a      	ldr	r3, [pc, #104]	@ (800999c <prvAddCurrentTaskToDelayedList+0x94>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3304      	adds	r3, #4
 8009938:	4619      	mov	r1, r3
 800993a:	4819      	ldr	r0, [pc, #100]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800993c:	f7fe fbab 	bl	8008096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009940:	e026      	b.n	8009990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4413      	add	r3, r2
 8009948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800994a:	4b14      	ldr	r3, [pc, #80]	@ (800999c <prvAddCurrentTaskToDelayedList+0x94>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	429a      	cmp	r2, r3
 8009958:	d209      	bcs.n	800996e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800995a:	4b12      	ldr	r3, [pc, #72]	@ (80099a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	4b0f      	ldr	r3, [pc, #60]	@ (800999c <prvAddCurrentTaskToDelayedList+0x94>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3304      	adds	r3, #4
 8009964:	4619      	mov	r1, r3
 8009966:	4610      	mov	r0, r2
 8009968:	f7fe fbb9 	bl	80080de <vListInsert>
}
 800996c:	e010      	b.n	8009990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996e:	4b0e      	ldr	r3, [pc, #56]	@ (80099a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	4b0a      	ldr	r3, [pc, #40]	@ (800999c <prvAddCurrentTaskToDelayedList+0x94>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3304      	adds	r3, #4
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7fe fbaf 	bl	80080de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009980:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	d202      	bcs.n	8009990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800998a:	4a08      	ldr	r2, [pc, #32]	@ (80099ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	6013      	str	r3, [r2, #0]
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	20001080 	.word	0x20001080
 800999c:	20000ba8 	.word	0x20000ba8
 80099a0:	20001068 	.word	0x20001068
 80099a4:	20001038 	.word	0x20001038
 80099a8:	20001034 	.word	0x20001034
 80099ac:	2000109c 	.word	0x2000109c

080099b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b08a      	sub	sp, #40	@ 0x28
 80099b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099ba:	f000 fb13 	bl	8009fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099be:	4b1d      	ldr	r3, [pc, #116]	@ (8009a34 <xTimerCreateTimerTask+0x84>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d021      	beq.n	8009a0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099ce:	1d3a      	adds	r2, r7, #4
 80099d0:	f107 0108 	add.w	r1, r7, #8
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe fb15 	bl	8008008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	9202      	str	r2, [sp, #8]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	2302      	movs	r3, #2
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2300      	movs	r3, #0
 80099ee:	460a      	mov	r2, r1
 80099f0:	4911      	ldr	r1, [pc, #68]	@ (8009a38 <xTimerCreateTimerTask+0x88>)
 80099f2:	4812      	ldr	r0, [pc, #72]	@ (8009a3c <xTimerCreateTimerTask+0x8c>)
 80099f4:	f7ff f8d0 	bl	8008b98 <xTaskCreateStatic>
 80099f8:	4603      	mov	r3, r0
 80099fa:	4a11      	ldr	r2, [pc, #68]	@ (8009a40 <xTimerCreateTimerTask+0x90>)
 80099fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099fe:	4b10      	ldr	r3, [pc, #64]	@ (8009a40 <xTimerCreateTimerTask+0x90>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a06:	2301      	movs	r3, #1
 8009a08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	613b      	str	r3, [r7, #16]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a28:	697b      	ldr	r3, [r7, #20]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	200010d8 	.word	0x200010d8
 8009a38:	0800d600 	.word	0x0800d600
 8009a3c:	08009b7d 	.word	0x08009b7d
 8009a40:	200010dc 	.word	0x200010dc

08009a44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	@ 0x28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10b      	bne.n	8009a74 <xTimerGenericCommand+0x30>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	623b      	str	r3, [r7, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	bf00      	nop
 8009a72:	e7fd      	b.n	8009a70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a74:	4b19      	ldr	r3, [pc, #100]	@ (8009adc <xTimerGenericCommand+0x98>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d02a      	beq.n	8009ad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2b05      	cmp	r3, #5
 8009a8c:	dc18      	bgt.n	8009ac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a8e:	f7ff fead 	bl	80097ec <xTaskGetSchedulerState>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d109      	bne.n	8009aac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a98:	4b10      	ldr	r3, [pc, #64]	@ (8009adc <xTimerGenericCommand+0x98>)
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	f107 0110 	add.w	r1, r7, #16
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa4:	f7fe fc88 	bl	80083b8 <xQueueGenericSend>
 8009aa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8009aaa:	e012      	b.n	8009ad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009aac:	4b0b      	ldr	r3, [pc, #44]	@ (8009adc <xTimerGenericCommand+0x98>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	f107 0110 	add.w	r1, r7, #16
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f7fe fc7e 	bl	80083b8 <xQueueGenericSend>
 8009abc:	6278      	str	r0, [r7, #36]	@ 0x24
 8009abe:	e008      	b.n	8009ad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ac0:	4b06      	ldr	r3, [pc, #24]	@ (8009adc <xTimerGenericCommand+0x98>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	f107 0110 	add.w	r1, r7, #16
 8009ac8:	2300      	movs	r3, #0
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	f7fe fd76 	bl	80085bc <xQueueGenericSendFromISR>
 8009ad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3728      	adds	r7, #40	@ 0x28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	200010d8 	.word	0x200010d8

08009ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af02      	add	r7, sp, #8
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aea:	4b23      	ldr	r3, [pc, #140]	@ (8009b78 <prvProcessExpiredTimer+0x98>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	3304      	adds	r3, #4
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fe fb29 	bl	8008150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d023      	beq.n	8009b54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	699a      	ldr	r2, [r3, #24]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	18d1      	adds	r1, r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	6978      	ldr	r0, [r7, #20]
 8009b1a:	f000 f8d5 	bl	8009cc8 <prvInsertTimerInActiveList>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d020      	beq.n	8009b66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b24:	2300      	movs	r3, #0
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	6978      	ldr	r0, [r7, #20]
 8009b30:	f7ff ff88 	bl	8009a44 <xTimerGenericCommand>
 8009b34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d114      	bne.n	8009b66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	60fb      	str	r3, [r7, #12]
}
 8009b4e:	bf00      	nop
 8009b50:	bf00      	nop
 8009b52:	e7fd      	b.n	8009b50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b5a:	f023 0301 	bic.w	r3, r3, #1
 8009b5e:	b2da      	uxtb	r2, r3
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	6978      	ldr	r0, [r7, #20]
 8009b6c:	4798      	blx	r3
}
 8009b6e:	bf00      	nop
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200010d0 	.word	0x200010d0

08009b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b84:	f107 0308 	add.w	r3, r7, #8
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 f859 	bl	8009c40 <prvGetNextExpireTime>
 8009b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	4619      	mov	r1, r3
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 f805 	bl	8009ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b9a:	f000 f8d7 	bl	8009d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b9e:	bf00      	nop
 8009ba0:	e7f0      	b.n	8009b84 <prvTimerTask+0x8>
	...

08009ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bae:	f7ff fa37 	bl	8009020 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bb2:	f107 0308 	add.w	r3, r7, #8
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 f866 	bl	8009c88 <prvSampleTimeNow>
 8009bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d130      	bne.n	8009c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <prvProcessTimerOrBlockTask+0x3c>
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d806      	bhi.n	8009be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bd2:	f7ff fa33 	bl	800903c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff ff81 	bl	8009ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bde:	e024      	b.n	8009c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d008      	beq.n	8009bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009be6:	4b13      	ldr	r3, [pc, #76]	@ (8009c34 <prvProcessTimerOrBlockTask+0x90>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <prvProcessTimerOrBlockTask+0x50>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <prvProcessTimerOrBlockTask+0x52>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8009c38 <prvProcessTimerOrBlockTask+0x94>)
 8009bfa:	6818      	ldr	r0, [r3, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4619      	mov	r1, r3
 8009c06:	f7fe ff93 	bl	8008b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c0a:	f7ff fa17 	bl	800903c <xTaskResumeAll>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c14:	4b09      	ldr	r3, [pc, #36]	@ (8009c3c <prvProcessTimerOrBlockTask+0x98>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
}
 8009c24:	e001      	b.n	8009c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c26:	f7ff fa09 	bl	800903c <xTaskResumeAll>
}
 8009c2a:	bf00      	nop
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200010d4 	.word	0x200010d4
 8009c38:	200010d8 	.word	0x200010d8
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c48:	4b0e      	ldr	r3, [pc, #56]	@ (8009c84 <prvGetNextExpireTime+0x44>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <prvGetNextExpireTime+0x16>
 8009c52:	2201      	movs	r2, #1
 8009c54:	e000      	b.n	8009c58 <prvGetNextExpireTime+0x18>
 8009c56:	2200      	movs	r2, #0
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d105      	bne.n	8009c70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c64:	4b07      	ldr	r3, [pc, #28]	@ (8009c84 <prvGetNextExpireTime+0x44>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	60fb      	str	r3, [r7, #12]
 8009c6e:	e001      	b.n	8009c74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c74:	68fb      	ldr	r3, [r7, #12]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	200010d0 	.word	0x200010d0

08009c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c90:	f7ff fa72 	bl	8009178 <xTaskGetTickCount>
 8009c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c96:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <prvSampleTimeNow+0x3c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d205      	bcs.n	8009cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ca0:	f000 f93a 	bl	8009f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	e002      	b.n	8009cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cb2:	4a04      	ldr	r2, [pc, #16]	@ (8009cc4 <prvSampleTimeNow+0x3c>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	200010e0 	.word	0x200010e0

08009cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d812      	bhi.n	8009d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d302      	bcc.n	8009d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e01b      	b.n	8009d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d02:	4b10      	ldr	r3, [pc, #64]	@ (8009d44 <prvInsertTimerInActiveList+0x7c>)
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f7fe f9e6 	bl	80080de <vListInsert>
 8009d12:	e012      	b.n	8009d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d206      	bcs.n	8009d2a <prvInsertTimerInActiveList+0x62>
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d302      	bcc.n	8009d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	e007      	b.n	8009d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d2a:	4b07      	ldr	r3, [pc, #28]	@ (8009d48 <prvInsertTimerInActiveList+0x80>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fe f9d2 	bl	80080de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d3a:	697b      	ldr	r3, [r7, #20]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	200010d4 	.word	0x200010d4
 8009d48:	200010d0 	.word	0x200010d0

08009d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08e      	sub	sp, #56	@ 0x38
 8009d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d52:	e0ce      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	da19      	bge.n	8009d8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d5a:	1d3b      	adds	r3, r7, #4
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10b      	bne.n	8009d7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	61fb      	str	r3, [r7, #28]
}
 8009d78:	bf00      	nop
 8009d7a:	bf00      	nop
 8009d7c:	e7fd      	b.n	8009d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d84:	6850      	ldr	r0, [r2, #4]
 8009d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d88:	6892      	ldr	r2, [r2, #8]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f2c0 80ae 	blt.w	8009ef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe f9d2 	bl	8008150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dac:	463b      	mov	r3, r7
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff ff6a 	bl	8009c88 <prvSampleTimeNow>
 8009db4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	f200 8097 	bhi.w	8009eec <prvProcessReceivedCommands+0x1a0>
 8009dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc4 <prvProcessReceivedCommands+0x78>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009ded 	.word	0x08009ded
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009ded 	.word	0x08009ded
 8009dd0:	08009e63 	.word	0x08009e63
 8009dd4:	08009e77 	.word	0x08009e77
 8009dd8:	08009ec3 	.word	0x08009ec3
 8009ddc:	08009ded 	.word	0x08009ded
 8009de0:	08009ded 	.word	0x08009ded
 8009de4:	08009e63 	.word	0x08009e63
 8009de8:	08009e77 	.word	0x08009e77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009df2:	f043 0301 	orr.w	r3, r3, #1
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	18d1      	adds	r1, r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e0c:	f7ff ff5c 	bl	8009cc8 <prvInsertTimerInActiveList>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d06c      	beq.n	8009ef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e24:	f003 0304 	and.w	r3, r3, #4
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d061      	beq.n	8009ef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	441a      	add	r2, r3
 8009e34:	2300      	movs	r3, #0
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e3e:	f7ff fe01 	bl	8009a44 <xTimerGenericCommand>
 8009e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d152      	bne.n	8009ef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	61bb      	str	r3, [r7, #24]
}
 8009e5c:	bf00      	nop
 8009e5e:	bf00      	nop
 8009e60:	e7fd      	b.n	8009e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e74:	e03d      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e7c:	f043 0301 	orr.w	r3, r3, #1
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10b      	bne.n	8009eae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	617b      	str	r3, [r7, #20]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	18d1      	adds	r1, r2, r3
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ebc:	f7ff ff04 	bl	8009cc8 <prvInsertTimerInActiveList>
					break;
 8009ec0:	e017      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ed2:	f000 fbe9 	bl	800a6a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ed6:	e00c      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ede:	f023 0301 	bic.w	r3, r3, #1
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009eea:	e002      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009eec:	bf00      	nop
 8009eee:	e000      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
					break;
 8009ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ef2:	4b08      	ldr	r3, [pc, #32]	@ (8009f14 <prvProcessReceivedCommands+0x1c8>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	1d39      	adds	r1, r7, #4
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe fbfc 	bl	80086f8 <xQueueReceive>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f47f af26 	bne.w	8009d54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	3730      	adds	r7, #48	@ 0x30
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	200010d8 	.word	0x200010d8

08009f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f1e:	e049      	b.n	8009fb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f20:	4b2e      	ldr	r3, [pc, #184]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3304      	adds	r3, #4
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe f909 	bl	8008150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f4c:	f003 0304 	and.w	r3, r3, #4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d02f      	beq.n	8009fb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d90e      	bls.n	8009f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f72:	4b1a      	ldr	r3, [pc, #104]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	f7fe f8ae 	bl	80080de <vListInsert>
 8009f82:	e017      	b.n	8009fb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f84:	2300      	movs	r3, #0
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fd58 	bl	8009a44 <xTimerGenericCommand>
 8009f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10b      	bne.n	8009fb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	603b      	str	r3, [r7, #0]
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	e7fd      	b.n	8009fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fb4:	4b09      	ldr	r3, [pc, #36]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1b0      	bne.n	8009f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fbe:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fc4:	4b06      	ldr	r3, [pc, #24]	@ (8009fe0 <prvSwitchTimerLists+0xc8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a04      	ldr	r2, [pc, #16]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fcc:	4a04      	ldr	r2, [pc, #16]	@ (8009fe0 <prvSwitchTimerLists+0xc8>)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6013      	str	r3, [r2, #0]
}
 8009fd2:	bf00      	nop
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	200010d0 	.word	0x200010d0
 8009fe0:	200010d4 	.word	0x200010d4

08009fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fea:	f000 f96d 	bl	800a2c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fee:	4b15      	ldr	r3, [pc, #84]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d120      	bne.n	800a038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ff6:	4814      	ldr	r0, [pc, #80]	@ (800a048 <prvCheckForValidListAndQueue+0x64>)
 8009ff8:	f7fe f820 	bl	800803c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ffc:	4813      	ldr	r0, [pc, #76]	@ (800a04c <prvCheckForValidListAndQueue+0x68>)
 8009ffe:	f7fe f81d 	bl	800803c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a002:	4b13      	ldr	r3, [pc, #76]	@ (800a050 <prvCheckForValidListAndQueue+0x6c>)
 800a004:	4a10      	ldr	r2, [pc, #64]	@ (800a048 <prvCheckForValidListAndQueue+0x64>)
 800a006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a008:	4b12      	ldr	r3, [pc, #72]	@ (800a054 <prvCheckForValidListAndQueue+0x70>)
 800a00a:	4a10      	ldr	r2, [pc, #64]	@ (800a04c <prvCheckForValidListAndQueue+0x68>)
 800a00c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a00e:	2300      	movs	r3, #0
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	4b11      	ldr	r3, [pc, #68]	@ (800a058 <prvCheckForValidListAndQueue+0x74>)
 800a014:	4a11      	ldr	r2, [pc, #68]	@ (800a05c <prvCheckForValidListAndQueue+0x78>)
 800a016:	2110      	movs	r1, #16
 800a018:	200a      	movs	r0, #10
 800a01a:	f7fe f92d 	bl	8008278 <xQueueGenericCreateStatic>
 800a01e:	4603      	mov	r3, r0
 800a020:	4a08      	ldr	r2, [pc, #32]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 800a022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a024:	4b07      	ldr	r3, [pc, #28]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a02c:	4b05      	ldr	r3, [pc, #20]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	490b      	ldr	r1, [pc, #44]	@ (800a060 <prvCheckForValidListAndQueue+0x7c>)
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fd52 	bl	8008adc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a038:	f000 f978 	bl	800a32c <vPortExitCritical>
}
 800a03c:	bf00      	nop
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200010d8 	.word	0x200010d8
 800a048:	200010a8 	.word	0x200010a8
 800a04c:	200010bc 	.word	0x200010bc
 800a050:	200010d0 	.word	0x200010d0
 800a054:	200010d4 	.word	0x200010d4
 800a058:	20001184 	.word	0x20001184
 800a05c:	200010e4 	.word	0x200010e4
 800a060:	0800d608 	.word	0x0800d608

0800a064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3b04      	subs	r3, #4
 800a074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3b04      	subs	r3, #4
 800a082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f023 0201 	bic.w	r2, r3, #1
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3b04      	subs	r3, #4
 800a092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a094:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c8 <pxPortInitialiseStack+0x64>)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3b14      	subs	r3, #20
 800a09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f06f 0202 	mvn.w	r2, #2
 800a0b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3b20      	subs	r3, #32
 800a0b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	0800a0cd 	.word	0x0800a0cd

0800a0cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0d6:	4b13      	ldr	r3, [pc, #76]	@ (800a124 <prvTaskExitError+0x58>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0de:	d00b      	beq.n	800a0f8 <prvTaskExitError+0x2c>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	60fb      	str	r3, [r7, #12]
}
 800a0f2:	bf00      	nop
 800a0f4:	bf00      	nop
 800a0f6:	e7fd      	b.n	800a0f4 <prvTaskExitError+0x28>
	__asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	60bb      	str	r3, [r7, #8]
}
 800a10a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a10c:	bf00      	nop
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0fc      	beq.n	800a10e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	2000000c 	.word	0x2000000c
	...

0800a130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a130:	4b07      	ldr	r3, [pc, #28]	@ (800a150 <pxCurrentTCBConst2>)
 800a132:	6819      	ldr	r1, [r3, #0]
 800a134:	6808      	ldr	r0, [r1, #0]
 800a136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13a:	f380 8809 	msr	PSP, r0
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f04f 0000 	mov.w	r0, #0
 800a146:	f380 8811 	msr	BASEPRI, r0
 800a14a:	4770      	bx	lr
 800a14c:	f3af 8000 	nop.w

0800a150 <pxCurrentTCBConst2>:
 800a150:	20000ba8 	.word	0x20000ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a154:	bf00      	nop
 800a156:	bf00      	nop

0800a158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a158:	4808      	ldr	r0, [pc, #32]	@ (800a17c <prvPortStartFirstTask+0x24>)
 800a15a:	6800      	ldr	r0, [r0, #0]
 800a15c:	6800      	ldr	r0, [r0, #0]
 800a15e:	f380 8808 	msr	MSP, r0
 800a162:	f04f 0000 	mov.w	r0, #0
 800a166:	f380 8814 	msr	CONTROL, r0
 800a16a:	b662      	cpsie	i
 800a16c:	b661      	cpsie	f
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	df00      	svc	0
 800a178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a17a:	bf00      	nop
 800a17c:	e000ed08 	.word	0xe000ed08

0800a180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a186:	4b47      	ldr	r3, [pc, #284]	@ (800a2a4 <xPortStartScheduler+0x124>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a47      	ldr	r2, [pc, #284]	@ (800a2a8 <xPortStartScheduler+0x128>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10b      	bne.n	800a1a8 <xPortStartScheduler+0x28>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	613b      	str	r3, [r7, #16]
}
 800a1a2:	bf00      	nop
 800a1a4:	bf00      	nop
 800a1a6:	e7fd      	b.n	800a1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2a4 <xPortStartScheduler+0x124>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a3f      	ldr	r2, [pc, #252]	@ (800a2ac <xPortStartScheduler+0x12c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d10b      	bne.n	800a1ca <xPortStartScheduler+0x4a>
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	60fb      	str	r3, [r7, #12]
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop
 800a1c8:	e7fd      	b.n	800a1c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a1ca:	4b39      	ldr	r3, [pc, #228]	@ (800a2b0 <xPortStartScheduler+0x130>)
 800a1cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	22ff      	movs	r2, #255	@ 0xff
 800a1da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	4b31      	ldr	r3, [pc, #196]	@ (800a2b4 <xPortStartScheduler+0x134>)
 800a1f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1f2:	4b31      	ldr	r3, [pc, #196]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a1f4:	2207      	movs	r2, #7
 800a1f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1f8:	e009      	b.n	800a20e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a1fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	4a2d      	ldr	r2, [pc, #180]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a216:	2b80      	cmp	r3, #128	@ 0x80
 800a218:	d0ef      	beq.n	800a1fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a21a:	4b27      	ldr	r3, [pc, #156]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f1c3 0307 	rsb	r3, r3, #7
 800a222:	2b04      	cmp	r3, #4
 800a224:	d00b      	beq.n	800a23e <xPortStartScheduler+0xbe>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	60bb      	str	r3, [r7, #8]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a23e:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a248:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a250:	4a19      	ldr	r2, [pc, #100]	@ (800a2b8 <xPortStartScheduler+0x138>)
 800a252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a25c:	4b17      	ldr	r3, [pc, #92]	@ (800a2bc <xPortStartScheduler+0x13c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a16      	ldr	r2, [pc, #88]	@ (800a2bc <xPortStartScheduler+0x13c>)
 800a262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a268:	4b14      	ldr	r3, [pc, #80]	@ (800a2bc <xPortStartScheduler+0x13c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a13      	ldr	r2, [pc, #76]	@ (800a2bc <xPortStartScheduler+0x13c>)
 800a26e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a274:	f000 f8da 	bl	800a42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a278:	4b11      	ldr	r3, [pc, #68]	@ (800a2c0 <xPortStartScheduler+0x140>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a27e:	f000 f8f9 	bl	800a474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a282:	4b10      	ldr	r3, [pc, #64]	@ (800a2c4 <xPortStartScheduler+0x144>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a0f      	ldr	r2, [pc, #60]	@ (800a2c4 <xPortStartScheduler+0x144>)
 800a288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a28c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a28e:	f7ff ff63 	bl	800a158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a292:	f7ff f83b 	bl	800930c <vTaskSwitchContext>
	prvTaskExitError();
 800a296:	f7ff ff19 	bl	800a0cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	e000ed00 	.word	0xe000ed00
 800a2a8:	410fc271 	.word	0x410fc271
 800a2ac:	410fc270 	.word	0x410fc270
 800a2b0:	e000e400 	.word	0xe000e400
 800a2b4:	200011d4 	.word	0x200011d4
 800a2b8:	200011d8 	.word	0x200011d8
 800a2bc:	e000ed20 	.word	0xe000ed20
 800a2c0:	2000000c 	.word	0x2000000c
 800a2c4:	e000ef34 	.word	0xe000ef34

0800a2c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	607b      	str	r3, [r7, #4]
}
 800a2e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2e2:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <vPortEnterCritical+0x5c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a324 <vPortEnterCritical+0x5c>)
 800a2ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a324 <vPortEnterCritical+0x5c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d110      	bne.n	800a316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <vPortEnterCritical+0x60>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <vPortEnterCritical+0x4e>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	603b      	str	r3, [r7, #0]
}
 800a310:	bf00      	nop
 800a312:	bf00      	nop
 800a314:	e7fd      	b.n	800a312 <vPortEnterCritical+0x4a>
	}
}
 800a316:	bf00      	nop
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	2000000c 	.word	0x2000000c
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a332:	4b12      	ldr	r3, [pc, #72]	@ (800a37c <vPortExitCritical+0x50>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10b      	bne.n	800a352 <vPortExitCritical+0x26>
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	607b      	str	r3, [r7, #4]
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	e7fd      	b.n	800a34e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a352:	4b0a      	ldr	r3, [pc, #40]	@ (800a37c <vPortExitCritical+0x50>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3b01      	subs	r3, #1
 800a358:	4a08      	ldr	r2, [pc, #32]	@ (800a37c <vPortExitCritical+0x50>)
 800a35a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a35c:	4b07      	ldr	r3, [pc, #28]	@ (800a37c <vPortExitCritical+0x50>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d105      	bne.n	800a370 <vPortExitCritical+0x44>
 800a364:	2300      	movs	r3, #0
 800a366:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	f383 8811 	msr	BASEPRI, r3
}
 800a36e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	2000000c 	.word	0x2000000c

0800a380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a380:	f3ef 8009 	mrs	r0, PSP
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	4b15      	ldr	r3, [pc, #84]	@ (800a3e0 <pxCurrentTCBConst>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	f01e 0f10 	tst.w	lr, #16
 800a390:	bf08      	it	eq
 800a392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	6010      	str	r0, [r2, #0]
 800a39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3a4:	f380 8811 	msr	BASEPRI, r0
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f7fe ffac 	bl	800930c <vTaskSwitchContext>
 800a3b4:	f04f 0000 	mov.w	r0, #0
 800a3b8:	f380 8811 	msr	BASEPRI, r0
 800a3bc:	bc09      	pop	{r0, r3}
 800a3be:	6819      	ldr	r1, [r3, #0]
 800a3c0:	6808      	ldr	r0, [r1, #0]
 800a3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c6:	f01e 0f10 	tst.w	lr, #16
 800a3ca:	bf08      	it	eq
 800a3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3d0:	f380 8809 	msr	PSP, r0
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	f3af 8000 	nop.w

0800a3e0 <pxCurrentTCBConst>:
 800a3e0:	20000ba8 	.word	0x20000ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop

0800a3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	607b      	str	r3, [r7, #4]
}
 800a400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a402:	f7fe fec9 	bl	8009198 <xTaskIncrementTick>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a40c:	4b06      	ldr	r3, [pc, #24]	@ (800a428 <xPortSysTickHandler+0x40>)
 800a40e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	2300      	movs	r3, #0
 800a416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	f383 8811 	msr	BASEPRI, r3
}
 800a41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	e000ed04 	.word	0xe000ed04

0800a42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a430:	4b0b      	ldr	r3, [pc, #44]	@ (800a460 <vPortSetupTimerInterrupt+0x34>)
 800a432:	2200      	movs	r2, #0
 800a434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a436:	4b0b      	ldr	r3, [pc, #44]	@ (800a464 <vPortSetupTimerInterrupt+0x38>)
 800a438:	2200      	movs	r2, #0
 800a43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a43c:	4b0a      	ldr	r3, [pc, #40]	@ (800a468 <vPortSetupTimerInterrupt+0x3c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a0a      	ldr	r2, [pc, #40]	@ (800a46c <vPortSetupTimerInterrupt+0x40>)
 800a442:	fba2 2303 	umull	r2, r3, r2, r3
 800a446:	099b      	lsrs	r3, r3, #6
 800a448:	4a09      	ldr	r2, [pc, #36]	@ (800a470 <vPortSetupTimerInterrupt+0x44>)
 800a44a:	3b01      	subs	r3, #1
 800a44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a44e:	4b04      	ldr	r3, [pc, #16]	@ (800a460 <vPortSetupTimerInterrupt+0x34>)
 800a450:	2207      	movs	r2, #7
 800a452:	601a      	str	r2, [r3, #0]
}
 800a454:	bf00      	nop
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	e000e010 	.word	0xe000e010
 800a464:	e000e018 	.word	0xe000e018
 800a468:	20000000 	.word	0x20000000
 800a46c:	10624dd3 	.word	0x10624dd3
 800a470:	e000e014 	.word	0xe000e014

0800a474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a484 <vPortEnableVFP+0x10>
 800a478:	6801      	ldr	r1, [r0, #0]
 800a47a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a47e:	6001      	str	r1, [r0, #0]
 800a480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a482:	bf00      	nop
 800a484:	e000ed88 	.word	0xe000ed88

0800a488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a48e:	f3ef 8305 	mrs	r3, IPSR
 800a492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b0f      	cmp	r3, #15
 800a498:	d915      	bls.n	800a4c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a49a:	4a18      	ldr	r2, [pc, #96]	@ (800a4fc <vPortValidateInterruptPriority+0x74>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4413      	add	r3, r2
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4a4:	4b16      	ldr	r3, [pc, #88]	@ (800a500 <vPortValidateInterruptPriority+0x78>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	7afa      	ldrb	r2, [r7, #11]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d20b      	bcs.n	800a4c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	607b      	str	r3, [r7, #4]
}
 800a4c0:	bf00      	nop
 800a4c2:	bf00      	nop
 800a4c4:	e7fd      	b.n	800a4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a504 <vPortValidateInterruptPriority+0x7c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a508 <vPortValidateInterruptPriority+0x80>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d90b      	bls.n	800a4ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	603b      	str	r3, [r7, #0]
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	e7fd      	b.n	800a4ea <vPortValidateInterruptPriority+0x62>
	}
 800a4ee:	bf00      	nop
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	e000e3f0 	.word	0xe000e3f0
 800a500:	200011d4 	.word	0x200011d4
 800a504:	e000ed0c 	.word	0xe000ed0c
 800a508:	200011d8 	.word	0x200011d8

0800a50c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	@ 0x28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a514:	2300      	movs	r3, #0
 800a516:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a518:	f7fe fd82 	bl	8009020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a51c:	4b5c      	ldr	r3, [pc, #368]	@ (800a690 <pvPortMalloc+0x184>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a524:	f000 f924 	bl	800a770 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a528:	4b5a      	ldr	r3, [pc, #360]	@ (800a694 <pvPortMalloc+0x188>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4013      	ands	r3, r2
 800a530:	2b00      	cmp	r3, #0
 800a532:	f040 8095 	bne.w	800a660 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d01e      	beq.n	800a57a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a53c:	2208      	movs	r2, #8
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d015      	beq.n	800a57a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f023 0307 	bic.w	r3, r3, #7
 800a554:	3308      	adds	r3, #8
 800a556:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f003 0307 	and.w	r3, r3, #7
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00b      	beq.n	800a57a <pvPortMalloc+0x6e>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	617b      	str	r3, [r7, #20]
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	e7fd      	b.n	800a576 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d06f      	beq.n	800a660 <pvPortMalloc+0x154>
 800a580:	4b45      	ldr	r3, [pc, #276]	@ (800a698 <pvPortMalloc+0x18c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	429a      	cmp	r2, r3
 800a588:	d86a      	bhi.n	800a660 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a58a:	4b44      	ldr	r3, [pc, #272]	@ (800a69c <pvPortMalloc+0x190>)
 800a58c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a58e:	4b43      	ldr	r3, [pc, #268]	@ (800a69c <pvPortMalloc+0x190>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a594:	e004      	b.n	800a5a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d903      	bls.n	800a5b2 <pvPortMalloc+0xa6>
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f1      	bne.n	800a596 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5b2:	4b37      	ldr	r3, [pc, #220]	@ (800a690 <pvPortMalloc+0x184>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d051      	beq.n	800a660 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2208      	movs	r2, #8
 800a5c2:	4413      	add	r3, r2
 800a5c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	1ad2      	subs	r2, r2, r3
 800a5d6:	2308      	movs	r3, #8
 800a5d8:	005b      	lsls	r3, r3, #1
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d920      	bls.n	800a620 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	f003 0307 	and.w	r3, r3, #7
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00b      	beq.n	800a608 <pvPortMalloc+0xfc>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	613b      	str	r3, [r7, #16]
}
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	e7fd      	b.n	800a604 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	1ad2      	subs	r2, r2, r3
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a61a:	69b8      	ldr	r0, [r7, #24]
 800a61c:	f000 f90a 	bl	800a834 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a620:	4b1d      	ldr	r3, [pc, #116]	@ (800a698 <pvPortMalloc+0x18c>)
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	4a1b      	ldr	r2, [pc, #108]	@ (800a698 <pvPortMalloc+0x18c>)
 800a62c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a62e:	4b1a      	ldr	r3, [pc, #104]	@ (800a698 <pvPortMalloc+0x18c>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a0 <pvPortMalloc+0x194>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d203      	bcs.n	800a642 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a63a:	4b17      	ldr	r3, [pc, #92]	@ (800a698 <pvPortMalloc+0x18c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a18      	ldr	r2, [pc, #96]	@ (800a6a0 <pvPortMalloc+0x194>)
 800a640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	4b13      	ldr	r3, [pc, #76]	@ (800a694 <pvPortMalloc+0x188>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	431a      	orrs	r2, r3
 800a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a656:	4b13      	ldr	r3, [pc, #76]	@ (800a6a4 <pvPortMalloc+0x198>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	3301      	adds	r3, #1
 800a65c:	4a11      	ldr	r2, [pc, #68]	@ (800a6a4 <pvPortMalloc+0x198>)
 800a65e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a660:	f7fe fcec 	bl	800903c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00b      	beq.n	800a686 <pvPortMalloc+0x17a>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	60fb      	str	r3, [r7, #12]
}
 800a680:	bf00      	nop
 800a682:	bf00      	nop
 800a684:	e7fd      	b.n	800a682 <pvPortMalloc+0x176>
	return pvReturn;
 800a686:	69fb      	ldr	r3, [r7, #28]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3728      	adds	r7, #40	@ 0x28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	20001d9c 	.word	0x20001d9c
 800a694:	20001db0 	.word	0x20001db0
 800a698:	20001da0 	.word	0x20001da0
 800a69c:	20001d94 	.word	0x20001d94
 800a6a0:	20001da4 	.word	0x20001da4
 800a6a4:	20001da8 	.word	0x20001da8

0800a6a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d04f      	beq.n	800a75a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6ba:	2308      	movs	r3, #8
 800a6bc:	425b      	negs	r3, r3
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	4b25      	ldr	r3, [pc, #148]	@ (800a764 <vPortFree+0xbc>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10b      	bne.n	800a6ee <vPortFree+0x46>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	60fb      	str	r3, [r7, #12]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00b      	beq.n	800a70e <vPortFree+0x66>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	60bb      	str	r3, [r7, #8]
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	e7fd      	b.n	800a70a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	4b14      	ldr	r3, [pc, #80]	@ (800a764 <vPortFree+0xbc>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4013      	ands	r3, r2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d01e      	beq.n	800a75a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d11a      	bne.n	800a75a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	4b0e      	ldr	r3, [pc, #56]	@ (800a764 <vPortFree+0xbc>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	43db      	mvns	r3, r3
 800a72e:	401a      	ands	r2, r3
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a734:	f7fe fc74 	bl	8009020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	4b0a      	ldr	r3, [pc, #40]	@ (800a768 <vPortFree+0xc0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4413      	add	r3, r2
 800a742:	4a09      	ldr	r2, [pc, #36]	@ (800a768 <vPortFree+0xc0>)
 800a744:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a746:	6938      	ldr	r0, [r7, #16]
 800a748:	f000 f874 	bl	800a834 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a74c:	4b07      	ldr	r3, [pc, #28]	@ (800a76c <vPortFree+0xc4>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	4a06      	ldr	r2, [pc, #24]	@ (800a76c <vPortFree+0xc4>)
 800a754:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a756:	f7fe fc71 	bl	800903c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a75a:	bf00      	nop
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20001db0 	.word	0x20001db0
 800a768:	20001da0 	.word	0x20001da0
 800a76c:	20001dac 	.word	0x20001dac

0800a770 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a776:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a77a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a77c:	4b27      	ldr	r3, [pc, #156]	@ (800a81c <prvHeapInit+0xac>)
 800a77e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00c      	beq.n	800a7a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3307      	adds	r3, #7
 800a78e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f023 0307 	bic.w	r3, r3, #7
 800a796:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	4a1f      	ldr	r2, [pc, #124]	@ (800a81c <prvHeapInit+0xac>)
 800a7a0:	4413      	add	r3, r2
 800a7a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a820 <prvHeapInit+0xb0>)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a820 <prvHeapInit+0xb0>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7bc:	2208      	movs	r2, #8
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	1a9b      	subs	r3, r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f023 0307 	bic.w	r3, r3, #7
 800a7ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4a15      	ldr	r2, [pc, #84]	@ (800a824 <prvHeapInit+0xb4>)
 800a7d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a7d2:	4b14      	ldr	r3, [pc, #80]	@ (800a824 <prvHeapInit+0xb4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7da:	4b12      	ldr	r3, [pc, #72]	@ (800a824 <prvHeapInit+0xb4>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	1ad2      	subs	r2, r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <prvHeapInit+0xb4>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a828 <prvHeapInit+0xb8>)
 800a7fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	4a09      	ldr	r2, [pc, #36]	@ (800a82c <prvHeapInit+0xbc>)
 800a806:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a808:	4b09      	ldr	r3, [pc, #36]	@ (800a830 <prvHeapInit+0xc0>)
 800a80a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a80e:	601a      	str	r2, [r3, #0]
}
 800a810:	bf00      	nop
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	200011dc 	.word	0x200011dc
 800a820:	20001d94 	.word	0x20001d94
 800a824:	20001d9c 	.word	0x20001d9c
 800a828:	20001da4 	.word	0x20001da4
 800a82c:	20001da0 	.word	0x20001da0
 800a830:	20001db0 	.word	0x20001db0

0800a834 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a83c:	4b28      	ldr	r3, [pc, #160]	@ (800a8e0 <prvInsertBlockIntoFreeList+0xac>)
 800a83e:	60fb      	str	r3, [r7, #12]
 800a840:	e002      	b.n	800a848 <prvInsertBlockIntoFreeList+0x14>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	60fb      	str	r3, [r7, #12]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d8f7      	bhi.n	800a842 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4413      	add	r3, r2
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d108      	bne.n	800a876 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	441a      	add	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	429a      	cmp	r2, r3
 800a888:	d118      	bne.n	800a8bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4b15      	ldr	r3, [pc, #84]	@ (800a8e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d00d      	beq.n	800a8b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	441a      	add	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e008      	b.n	800a8c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <prvInsertBlockIntoFreeList+0xb0>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	e003      	b.n	800a8c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d002      	beq.n	800a8d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8d2:	bf00      	nop
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	20001d94 	.word	0x20001d94
 800a8e4:	20001d9c 	.word	0x20001d9c

0800a8e8 <__cvt>:
 800a8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	ec57 6b10 	vmov	r6, r7, d0
 800a8f0:	2f00      	cmp	r7, #0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	bfbb      	ittet	lt
 800a8fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a8fe:	461f      	movlt	r7, r3
 800a900:	2300      	movge	r3, #0
 800a902:	232d      	movlt	r3, #45	@ 0x2d
 800a904:	700b      	strb	r3, [r1, #0]
 800a906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a908:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a90c:	4691      	mov	r9, r2
 800a90e:	f023 0820 	bic.w	r8, r3, #32
 800a912:	bfbc      	itt	lt
 800a914:	4632      	movlt	r2, r6
 800a916:	4616      	movlt	r6, r2
 800a918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a91c:	d005      	beq.n	800a92a <__cvt+0x42>
 800a91e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a922:	d100      	bne.n	800a926 <__cvt+0x3e>
 800a924:	3401      	adds	r4, #1
 800a926:	2102      	movs	r1, #2
 800a928:	e000      	b.n	800a92c <__cvt+0x44>
 800a92a:	2103      	movs	r1, #3
 800a92c:	ab03      	add	r3, sp, #12
 800a92e:	9301      	str	r3, [sp, #4]
 800a930:	ab02      	add	r3, sp, #8
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	ec47 6b10 	vmov	d0, r6, r7
 800a938:	4653      	mov	r3, sl
 800a93a:	4622      	mov	r2, r4
 800a93c:	f000 fe7c 	bl	800b638 <_dtoa_r>
 800a940:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a944:	4605      	mov	r5, r0
 800a946:	d119      	bne.n	800a97c <__cvt+0x94>
 800a948:	f019 0f01 	tst.w	r9, #1
 800a94c:	d00e      	beq.n	800a96c <__cvt+0x84>
 800a94e:	eb00 0904 	add.w	r9, r0, r4
 800a952:	2200      	movs	r2, #0
 800a954:	2300      	movs	r3, #0
 800a956:	4630      	mov	r0, r6
 800a958:	4639      	mov	r1, r7
 800a95a:	f7f6 f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a95e:	b108      	cbz	r0, 800a964 <__cvt+0x7c>
 800a960:	f8cd 900c 	str.w	r9, [sp, #12]
 800a964:	2230      	movs	r2, #48	@ 0x30
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	454b      	cmp	r3, r9
 800a96a:	d31e      	bcc.n	800a9aa <__cvt+0xc2>
 800a96c:	9b03      	ldr	r3, [sp, #12]
 800a96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a970:	1b5b      	subs	r3, r3, r5
 800a972:	4628      	mov	r0, r5
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	b004      	add	sp, #16
 800a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a980:	eb00 0904 	add.w	r9, r0, r4
 800a984:	d1e5      	bne.n	800a952 <__cvt+0x6a>
 800a986:	7803      	ldrb	r3, [r0, #0]
 800a988:	2b30      	cmp	r3, #48	@ 0x30
 800a98a:	d10a      	bne.n	800a9a2 <__cvt+0xba>
 800a98c:	2200      	movs	r2, #0
 800a98e:	2300      	movs	r3, #0
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	f7f6 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 800a998:	b918      	cbnz	r0, 800a9a2 <__cvt+0xba>
 800a99a:	f1c4 0401 	rsb	r4, r4, #1
 800a99e:	f8ca 4000 	str.w	r4, [sl]
 800a9a2:	f8da 3000 	ldr.w	r3, [sl]
 800a9a6:	4499      	add	r9, r3
 800a9a8:	e7d3      	b.n	800a952 <__cvt+0x6a>
 800a9aa:	1c59      	adds	r1, r3, #1
 800a9ac:	9103      	str	r1, [sp, #12]
 800a9ae:	701a      	strb	r2, [r3, #0]
 800a9b0:	e7d9      	b.n	800a966 <__cvt+0x7e>

0800a9b2 <__exponent>:
 800a9b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9b4:	2900      	cmp	r1, #0
 800a9b6:	bfba      	itte	lt
 800a9b8:	4249      	neglt	r1, r1
 800a9ba:	232d      	movlt	r3, #45	@ 0x2d
 800a9bc:	232b      	movge	r3, #43	@ 0x2b
 800a9be:	2909      	cmp	r1, #9
 800a9c0:	7002      	strb	r2, [r0, #0]
 800a9c2:	7043      	strb	r3, [r0, #1]
 800a9c4:	dd29      	ble.n	800aa1a <__exponent+0x68>
 800a9c6:	f10d 0307 	add.w	r3, sp, #7
 800a9ca:	461d      	mov	r5, r3
 800a9cc:	270a      	movs	r7, #10
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a9d4:	fb07 1416 	mls	r4, r7, r6, r1
 800a9d8:	3430      	adds	r4, #48	@ 0x30
 800a9da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a9de:	460c      	mov	r4, r1
 800a9e0:	2c63      	cmp	r4, #99	@ 0x63
 800a9e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	dcf1      	bgt.n	800a9ce <__exponent+0x1c>
 800a9ea:	3130      	adds	r1, #48	@ 0x30
 800a9ec:	1e94      	subs	r4, r2, #2
 800a9ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a9f2:	1c41      	adds	r1, r0, #1
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	42ab      	cmp	r3, r5
 800a9f8:	d30a      	bcc.n	800aa10 <__exponent+0x5e>
 800a9fa:	f10d 0309 	add.w	r3, sp, #9
 800a9fe:	1a9b      	subs	r3, r3, r2
 800aa00:	42ac      	cmp	r4, r5
 800aa02:	bf88      	it	hi
 800aa04:	2300      	movhi	r3, #0
 800aa06:	3302      	adds	r3, #2
 800aa08:	4403      	add	r3, r0
 800aa0a:	1a18      	subs	r0, r3, r0
 800aa0c:	b003      	add	sp, #12
 800aa0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa10:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa14:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa18:	e7ed      	b.n	800a9f6 <__exponent+0x44>
 800aa1a:	2330      	movs	r3, #48	@ 0x30
 800aa1c:	3130      	adds	r1, #48	@ 0x30
 800aa1e:	7083      	strb	r3, [r0, #2]
 800aa20:	70c1      	strb	r1, [r0, #3]
 800aa22:	1d03      	adds	r3, r0, #4
 800aa24:	e7f1      	b.n	800aa0a <__exponent+0x58>
	...

0800aa28 <_printf_float>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	b08d      	sub	sp, #52	@ 0x34
 800aa2e:	460c      	mov	r4, r1
 800aa30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa34:	4616      	mov	r6, r2
 800aa36:	461f      	mov	r7, r3
 800aa38:	4605      	mov	r5, r0
 800aa3a:	f000 fcef 	bl	800b41c <_localeconv_r>
 800aa3e:	6803      	ldr	r3, [r0, #0]
 800aa40:	9304      	str	r3, [sp, #16]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7f5 fc14 	bl	8000270 <strlen>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa4c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa50:	9005      	str	r0, [sp, #20]
 800aa52:	3307      	adds	r3, #7
 800aa54:	f023 0307 	bic.w	r3, r3, #7
 800aa58:	f103 0208 	add.w	r2, r3, #8
 800aa5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa60:	f8d4 b000 	ldr.w	fp, [r4]
 800aa64:	f8c8 2000 	str.w	r2, [r8]
 800aa68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa70:	9307      	str	r3, [sp, #28]
 800aa72:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa7e:	4b9c      	ldr	r3, [pc, #624]	@ (800acf0 <_printf_float+0x2c8>)
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	f7f6 f852 	bl	8000b2c <__aeabi_dcmpun>
 800aa88:	bb70      	cbnz	r0, 800aae8 <_printf_float+0xc0>
 800aa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa8e:	4b98      	ldr	r3, [pc, #608]	@ (800acf0 <_printf_float+0x2c8>)
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	f7f6 f82c 	bl	8000af0 <__aeabi_dcmple>
 800aa98:	bb30      	cbnz	r0, 800aae8 <_printf_float+0xc0>
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	4649      	mov	r1, r9
 800aaa2:	f7f6 f81b 	bl	8000adc <__aeabi_dcmplt>
 800aaa6:	b110      	cbz	r0, 800aaae <_printf_float+0x86>
 800aaa8:	232d      	movs	r3, #45	@ 0x2d
 800aaaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaae:	4a91      	ldr	r2, [pc, #580]	@ (800acf4 <_printf_float+0x2cc>)
 800aab0:	4b91      	ldr	r3, [pc, #580]	@ (800acf8 <_printf_float+0x2d0>)
 800aab2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aab6:	bf94      	ite	ls
 800aab8:	4690      	movls	r8, r2
 800aaba:	4698      	movhi	r8, r3
 800aabc:	2303      	movs	r3, #3
 800aabe:	6123      	str	r3, [r4, #16]
 800aac0:	f02b 0304 	bic.w	r3, fp, #4
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	f04f 0900 	mov.w	r9, #0
 800aaca:	9700      	str	r7, [sp, #0]
 800aacc:	4633      	mov	r3, r6
 800aace:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aad0:	4621      	mov	r1, r4
 800aad2:	4628      	mov	r0, r5
 800aad4:	f000 f9d2 	bl	800ae7c <_printf_common>
 800aad8:	3001      	adds	r0, #1
 800aada:	f040 808d 	bne.w	800abf8 <_printf_float+0x1d0>
 800aade:	f04f 30ff 	mov.w	r0, #4294967295
 800aae2:	b00d      	add	sp, #52	@ 0x34
 800aae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4640      	mov	r0, r8
 800aaee:	4649      	mov	r1, r9
 800aaf0:	f7f6 f81c 	bl	8000b2c <__aeabi_dcmpun>
 800aaf4:	b140      	cbz	r0, 800ab08 <_printf_float+0xe0>
 800aaf6:	464b      	mov	r3, r9
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfbc      	itt	lt
 800aafc:	232d      	movlt	r3, #45	@ 0x2d
 800aafe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab02:	4a7e      	ldr	r2, [pc, #504]	@ (800acfc <_printf_float+0x2d4>)
 800ab04:	4b7e      	ldr	r3, [pc, #504]	@ (800ad00 <_printf_float+0x2d8>)
 800ab06:	e7d4      	b.n	800aab2 <_printf_float+0x8a>
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab0e:	9206      	str	r2, [sp, #24]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	d13b      	bne.n	800ab8c <_printf_float+0x164>
 800ab14:	2306      	movs	r3, #6
 800ab16:	6063      	str	r3, [r4, #4]
 800ab18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	6022      	str	r2, [r4, #0]
 800ab20:	9303      	str	r3, [sp, #12]
 800ab22:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab24:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab28:	ab09      	add	r3, sp, #36	@ 0x24
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	6861      	ldr	r1, [r4, #4]
 800ab2e:	ec49 8b10 	vmov	d0, r8, r9
 800ab32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab36:	4628      	mov	r0, r5
 800ab38:	f7ff fed6 	bl	800a8e8 <__cvt>
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab40:	2b47      	cmp	r3, #71	@ 0x47
 800ab42:	4680      	mov	r8, r0
 800ab44:	d129      	bne.n	800ab9a <_printf_float+0x172>
 800ab46:	1cc8      	adds	r0, r1, #3
 800ab48:	db02      	blt.n	800ab50 <_printf_float+0x128>
 800ab4a:	6863      	ldr	r3, [r4, #4]
 800ab4c:	4299      	cmp	r1, r3
 800ab4e:	dd41      	ble.n	800abd4 <_printf_float+0x1ac>
 800ab50:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab54:	fa5f fa8a 	uxtb.w	sl, sl
 800ab58:	3901      	subs	r1, #1
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab60:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab62:	f7ff ff26 	bl	800a9b2 <__exponent>
 800ab66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab68:	1813      	adds	r3, r2, r0
 800ab6a:	2a01      	cmp	r2, #1
 800ab6c:	4681      	mov	r9, r0
 800ab6e:	6123      	str	r3, [r4, #16]
 800ab70:	dc02      	bgt.n	800ab78 <_printf_float+0x150>
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	07d2      	lsls	r2, r2, #31
 800ab76:	d501      	bpl.n	800ab7c <_printf_float+0x154>
 800ab78:	3301      	adds	r3, #1
 800ab7a:	6123      	str	r3, [r4, #16]
 800ab7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0a2      	beq.n	800aaca <_printf_float+0xa2>
 800ab84:	232d      	movs	r3, #45	@ 0x2d
 800ab86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab8a:	e79e      	b.n	800aaca <_printf_float+0xa2>
 800ab8c:	9a06      	ldr	r2, [sp, #24]
 800ab8e:	2a47      	cmp	r2, #71	@ 0x47
 800ab90:	d1c2      	bne.n	800ab18 <_printf_float+0xf0>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1c0      	bne.n	800ab18 <_printf_float+0xf0>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e7bd      	b.n	800ab16 <_printf_float+0xee>
 800ab9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab9e:	d9db      	bls.n	800ab58 <_printf_float+0x130>
 800aba0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aba4:	d118      	bne.n	800abd8 <_printf_float+0x1b0>
 800aba6:	2900      	cmp	r1, #0
 800aba8:	6863      	ldr	r3, [r4, #4]
 800abaa:	dd0b      	ble.n	800abc4 <_printf_float+0x19c>
 800abac:	6121      	str	r1, [r4, #16]
 800abae:	b913      	cbnz	r3, 800abb6 <_printf_float+0x18e>
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	07d0      	lsls	r0, r2, #31
 800abb4:	d502      	bpl.n	800abbc <_printf_float+0x194>
 800abb6:	3301      	adds	r3, #1
 800abb8:	440b      	add	r3, r1
 800abba:	6123      	str	r3, [r4, #16]
 800abbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800abbe:	f04f 0900 	mov.w	r9, #0
 800abc2:	e7db      	b.n	800ab7c <_printf_float+0x154>
 800abc4:	b913      	cbnz	r3, 800abcc <_printf_float+0x1a4>
 800abc6:	6822      	ldr	r2, [r4, #0]
 800abc8:	07d2      	lsls	r2, r2, #31
 800abca:	d501      	bpl.n	800abd0 <_printf_float+0x1a8>
 800abcc:	3302      	adds	r3, #2
 800abce:	e7f4      	b.n	800abba <_printf_float+0x192>
 800abd0:	2301      	movs	r3, #1
 800abd2:	e7f2      	b.n	800abba <_printf_float+0x192>
 800abd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800abd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abda:	4299      	cmp	r1, r3
 800abdc:	db05      	blt.n	800abea <_printf_float+0x1c2>
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	6121      	str	r1, [r4, #16]
 800abe2:	07d8      	lsls	r0, r3, #31
 800abe4:	d5ea      	bpl.n	800abbc <_printf_float+0x194>
 800abe6:	1c4b      	adds	r3, r1, #1
 800abe8:	e7e7      	b.n	800abba <_printf_float+0x192>
 800abea:	2900      	cmp	r1, #0
 800abec:	bfd4      	ite	le
 800abee:	f1c1 0202 	rsble	r2, r1, #2
 800abf2:	2201      	movgt	r2, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	e7e0      	b.n	800abba <_printf_float+0x192>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	055a      	lsls	r2, r3, #21
 800abfc:	d407      	bmi.n	800ac0e <_printf_float+0x1e6>
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	4642      	mov	r2, r8
 800ac02:	4631      	mov	r1, r6
 800ac04:	4628      	mov	r0, r5
 800ac06:	47b8      	blx	r7
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d12b      	bne.n	800ac64 <_printf_float+0x23c>
 800ac0c:	e767      	b.n	800aade <_printf_float+0xb6>
 800ac0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac12:	f240 80dd 	bls.w	800add0 <_printf_float+0x3a8>
 800ac16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	f7f5 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d033      	beq.n	800ac8e <_printf_float+0x266>
 800ac26:	4a37      	ldr	r2, [pc, #220]	@ (800ad04 <_printf_float+0x2dc>)
 800ac28:	2301      	movs	r3, #1
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	47b8      	blx	r7
 800ac30:	3001      	adds	r0, #1
 800ac32:	f43f af54 	beq.w	800aade <_printf_float+0xb6>
 800ac36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac3a:	4543      	cmp	r3, r8
 800ac3c:	db02      	blt.n	800ac44 <_printf_float+0x21c>
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	07d8      	lsls	r0, r3, #31
 800ac42:	d50f      	bpl.n	800ac64 <_printf_float+0x23c>
 800ac44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	47b8      	blx	r7
 800ac4e:	3001      	adds	r0, #1
 800ac50:	f43f af45 	beq.w	800aade <_printf_float+0xb6>
 800ac54:	f04f 0900 	mov.w	r9, #0
 800ac58:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac5c:	f104 0a1a 	add.w	sl, r4, #26
 800ac60:	45c8      	cmp	r8, r9
 800ac62:	dc09      	bgt.n	800ac78 <_printf_float+0x250>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	079b      	lsls	r3, r3, #30
 800ac68:	f100 8103 	bmi.w	800ae72 <_printf_float+0x44a>
 800ac6c:	68e0      	ldr	r0, [r4, #12]
 800ac6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac70:	4298      	cmp	r0, r3
 800ac72:	bfb8      	it	lt
 800ac74:	4618      	movlt	r0, r3
 800ac76:	e734      	b.n	800aae2 <_printf_float+0xba>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b8      	blx	r7
 800ac82:	3001      	adds	r0, #1
 800ac84:	f43f af2b 	beq.w	800aade <_printf_float+0xb6>
 800ac88:	f109 0901 	add.w	r9, r9, #1
 800ac8c:	e7e8      	b.n	800ac60 <_printf_float+0x238>
 800ac8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dc39      	bgt.n	800ad08 <_printf_float+0x2e0>
 800ac94:	4a1b      	ldr	r2, [pc, #108]	@ (800ad04 <_printf_float+0x2dc>)
 800ac96:	2301      	movs	r3, #1
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f43f af1d 	beq.w	800aade <_printf_float+0xb6>
 800aca4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aca8:	ea59 0303 	orrs.w	r3, r9, r3
 800acac:	d102      	bne.n	800acb4 <_printf_float+0x28c>
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	07d9      	lsls	r1, r3, #31
 800acb2:	d5d7      	bpl.n	800ac64 <_printf_float+0x23c>
 800acb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acb8:	4631      	mov	r1, r6
 800acba:	4628      	mov	r0, r5
 800acbc:	47b8      	blx	r7
 800acbe:	3001      	adds	r0, #1
 800acc0:	f43f af0d 	beq.w	800aade <_printf_float+0xb6>
 800acc4:	f04f 0a00 	mov.w	sl, #0
 800acc8:	f104 0b1a 	add.w	fp, r4, #26
 800accc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acce:	425b      	negs	r3, r3
 800acd0:	4553      	cmp	r3, sl
 800acd2:	dc01      	bgt.n	800acd8 <_printf_float+0x2b0>
 800acd4:	464b      	mov	r3, r9
 800acd6:	e793      	b.n	800ac00 <_printf_float+0x1d8>
 800acd8:	2301      	movs	r3, #1
 800acda:	465a      	mov	r2, fp
 800acdc:	4631      	mov	r1, r6
 800acde:	4628      	mov	r0, r5
 800ace0:	47b8      	blx	r7
 800ace2:	3001      	adds	r0, #1
 800ace4:	f43f aefb 	beq.w	800aade <_printf_float+0xb6>
 800ace8:	f10a 0a01 	add.w	sl, sl, #1
 800acec:	e7ee      	b.n	800accc <_printf_float+0x2a4>
 800acee:	bf00      	nop
 800acf0:	7fefffff 	.word	0x7fefffff
 800acf4:	0800d658 	.word	0x0800d658
 800acf8:	0800d65c 	.word	0x0800d65c
 800acfc:	0800d660 	.word	0x0800d660
 800ad00:	0800d664 	.word	0x0800d664
 800ad04:	0800d668 	.word	0x0800d668
 800ad08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad0e:	4553      	cmp	r3, sl
 800ad10:	bfa8      	it	ge
 800ad12:	4653      	movge	r3, sl
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	4699      	mov	r9, r3
 800ad18:	dc36      	bgt.n	800ad88 <_printf_float+0x360>
 800ad1a:	f04f 0b00 	mov.w	fp, #0
 800ad1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad22:	f104 021a 	add.w	r2, r4, #26
 800ad26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad28:	9306      	str	r3, [sp, #24]
 800ad2a:	eba3 0309 	sub.w	r3, r3, r9
 800ad2e:	455b      	cmp	r3, fp
 800ad30:	dc31      	bgt.n	800ad96 <_printf_float+0x36e>
 800ad32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad34:	459a      	cmp	sl, r3
 800ad36:	dc3a      	bgt.n	800adae <_printf_float+0x386>
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	07da      	lsls	r2, r3, #31
 800ad3c:	d437      	bmi.n	800adae <_printf_float+0x386>
 800ad3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad40:	ebaa 0903 	sub.w	r9, sl, r3
 800ad44:	9b06      	ldr	r3, [sp, #24]
 800ad46:	ebaa 0303 	sub.w	r3, sl, r3
 800ad4a:	4599      	cmp	r9, r3
 800ad4c:	bfa8      	it	ge
 800ad4e:	4699      	movge	r9, r3
 800ad50:	f1b9 0f00 	cmp.w	r9, #0
 800ad54:	dc33      	bgt.n	800adbe <_printf_float+0x396>
 800ad56:	f04f 0800 	mov.w	r8, #0
 800ad5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad5e:	f104 0b1a 	add.w	fp, r4, #26
 800ad62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad64:	ebaa 0303 	sub.w	r3, sl, r3
 800ad68:	eba3 0309 	sub.w	r3, r3, r9
 800ad6c:	4543      	cmp	r3, r8
 800ad6e:	f77f af79 	ble.w	800ac64 <_printf_float+0x23c>
 800ad72:	2301      	movs	r3, #1
 800ad74:	465a      	mov	r2, fp
 800ad76:	4631      	mov	r1, r6
 800ad78:	4628      	mov	r0, r5
 800ad7a:	47b8      	blx	r7
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	f43f aeae 	beq.w	800aade <_printf_float+0xb6>
 800ad82:	f108 0801 	add.w	r8, r8, #1
 800ad86:	e7ec      	b.n	800ad62 <_printf_float+0x33a>
 800ad88:	4642      	mov	r2, r8
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	d1c2      	bne.n	800ad1a <_printf_float+0x2f2>
 800ad94:	e6a3      	b.n	800aade <_printf_float+0xb6>
 800ad96:	2301      	movs	r3, #1
 800ad98:	4631      	mov	r1, r6
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	9206      	str	r2, [sp, #24]
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	f43f ae9c 	beq.w	800aade <_printf_float+0xb6>
 800ada6:	9a06      	ldr	r2, [sp, #24]
 800ada8:	f10b 0b01 	add.w	fp, fp, #1
 800adac:	e7bb      	b.n	800ad26 <_printf_float+0x2fe>
 800adae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adb2:	4631      	mov	r1, r6
 800adb4:	4628      	mov	r0, r5
 800adb6:	47b8      	blx	r7
 800adb8:	3001      	adds	r0, #1
 800adba:	d1c0      	bne.n	800ad3e <_printf_float+0x316>
 800adbc:	e68f      	b.n	800aade <_printf_float+0xb6>
 800adbe:	9a06      	ldr	r2, [sp, #24]
 800adc0:	464b      	mov	r3, r9
 800adc2:	4442      	add	r2, r8
 800adc4:	4631      	mov	r1, r6
 800adc6:	4628      	mov	r0, r5
 800adc8:	47b8      	blx	r7
 800adca:	3001      	adds	r0, #1
 800adcc:	d1c3      	bne.n	800ad56 <_printf_float+0x32e>
 800adce:	e686      	b.n	800aade <_printf_float+0xb6>
 800add0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800add4:	f1ba 0f01 	cmp.w	sl, #1
 800add8:	dc01      	bgt.n	800adde <_printf_float+0x3b6>
 800adda:	07db      	lsls	r3, r3, #31
 800addc:	d536      	bpl.n	800ae4c <_printf_float+0x424>
 800adde:	2301      	movs	r3, #1
 800ade0:	4642      	mov	r2, r8
 800ade2:	4631      	mov	r1, r6
 800ade4:	4628      	mov	r0, r5
 800ade6:	47b8      	blx	r7
 800ade8:	3001      	adds	r0, #1
 800adea:	f43f ae78 	beq.w	800aade <_printf_float+0xb6>
 800adee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	f43f ae70 	beq.w	800aade <_printf_float+0xb6>
 800adfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae02:	2200      	movs	r2, #0
 800ae04:	2300      	movs	r3, #0
 800ae06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae0a:	f7f5 fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae0e:	b9c0      	cbnz	r0, 800ae42 <_printf_float+0x41a>
 800ae10:	4653      	mov	r3, sl
 800ae12:	f108 0201 	add.w	r2, r8, #1
 800ae16:	4631      	mov	r1, r6
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b8      	blx	r7
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d10c      	bne.n	800ae3a <_printf_float+0x412>
 800ae20:	e65d      	b.n	800aade <_printf_float+0xb6>
 800ae22:	2301      	movs	r3, #1
 800ae24:	465a      	mov	r2, fp
 800ae26:	4631      	mov	r1, r6
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b8      	blx	r7
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	f43f ae56 	beq.w	800aade <_printf_float+0xb6>
 800ae32:	f108 0801 	add.w	r8, r8, #1
 800ae36:	45d0      	cmp	r8, sl
 800ae38:	dbf3      	blt.n	800ae22 <_printf_float+0x3fa>
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae40:	e6df      	b.n	800ac02 <_printf_float+0x1da>
 800ae42:	f04f 0800 	mov.w	r8, #0
 800ae46:	f104 0b1a 	add.w	fp, r4, #26
 800ae4a:	e7f4      	b.n	800ae36 <_printf_float+0x40e>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	4642      	mov	r2, r8
 800ae50:	e7e1      	b.n	800ae16 <_printf_float+0x3ee>
 800ae52:	2301      	movs	r3, #1
 800ae54:	464a      	mov	r2, r9
 800ae56:	4631      	mov	r1, r6
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b8      	blx	r7
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	f43f ae3e 	beq.w	800aade <_printf_float+0xb6>
 800ae62:	f108 0801 	add.w	r8, r8, #1
 800ae66:	68e3      	ldr	r3, [r4, #12]
 800ae68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae6a:	1a5b      	subs	r3, r3, r1
 800ae6c:	4543      	cmp	r3, r8
 800ae6e:	dcf0      	bgt.n	800ae52 <_printf_float+0x42a>
 800ae70:	e6fc      	b.n	800ac6c <_printf_float+0x244>
 800ae72:	f04f 0800 	mov.w	r8, #0
 800ae76:	f104 0919 	add.w	r9, r4, #25
 800ae7a:	e7f4      	b.n	800ae66 <_printf_float+0x43e>

0800ae7c <_printf_common>:
 800ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	4616      	mov	r6, r2
 800ae82:	4698      	mov	r8, r3
 800ae84:	688a      	ldr	r2, [r1, #8]
 800ae86:	690b      	ldr	r3, [r1, #16]
 800ae88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	bfb8      	it	lt
 800ae90:	4613      	movlt	r3, r2
 800ae92:	6033      	str	r3, [r6, #0]
 800ae94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae98:	4607      	mov	r7, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b10a      	cbz	r2, 800aea2 <_printf_common+0x26>
 800ae9e:	3301      	adds	r3, #1
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	0699      	lsls	r1, r3, #26
 800aea6:	bf42      	ittt	mi
 800aea8:	6833      	ldrmi	r3, [r6, #0]
 800aeaa:	3302      	addmi	r3, #2
 800aeac:	6033      	strmi	r3, [r6, #0]
 800aeae:	6825      	ldr	r5, [r4, #0]
 800aeb0:	f015 0506 	ands.w	r5, r5, #6
 800aeb4:	d106      	bne.n	800aec4 <_printf_common+0x48>
 800aeb6:	f104 0a19 	add.w	sl, r4, #25
 800aeba:	68e3      	ldr	r3, [r4, #12]
 800aebc:	6832      	ldr	r2, [r6, #0]
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	42ab      	cmp	r3, r5
 800aec2:	dc26      	bgt.n	800af12 <_printf_common+0x96>
 800aec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aec8:	6822      	ldr	r2, [r4, #0]
 800aeca:	3b00      	subs	r3, #0
 800aecc:	bf18      	it	ne
 800aece:	2301      	movne	r3, #1
 800aed0:	0692      	lsls	r2, r2, #26
 800aed2:	d42b      	bmi.n	800af2c <_printf_common+0xb0>
 800aed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aed8:	4641      	mov	r1, r8
 800aeda:	4638      	mov	r0, r7
 800aedc:	47c8      	blx	r9
 800aede:	3001      	adds	r0, #1
 800aee0:	d01e      	beq.n	800af20 <_printf_common+0xa4>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	6922      	ldr	r2, [r4, #16]
 800aee6:	f003 0306 	and.w	r3, r3, #6
 800aeea:	2b04      	cmp	r3, #4
 800aeec:	bf02      	ittt	eq
 800aeee:	68e5      	ldreq	r5, [r4, #12]
 800aef0:	6833      	ldreq	r3, [r6, #0]
 800aef2:	1aed      	subeq	r5, r5, r3
 800aef4:	68a3      	ldr	r3, [r4, #8]
 800aef6:	bf0c      	ite	eq
 800aef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aefc:	2500      	movne	r5, #0
 800aefe:	4293      	cmp	r3, r2
 800af00:	bfc4      	itt	gt
 800af02:	1a9b      	subgt	r3, r3, r2
 800af04:	18ed      	addgt	r5, r5, r3
 800af06:	2600      	movs	r6, #0
 800af08:	341a      	adds	r4, #26
 800af0a:	42b5      	cmp	r5, r6
 800af0c:	d11a      	bne.n	800af44 <_printf_common+0xc8>
 800af0e:	2000      	movs	r0, #0
 800af10:	e008      	b.n	800af24 <_printf_common+0xa8>
 800af12:	2301      	movs	r3, #1
 800af14:	4652      	mov	r2, sl
 800af16:	4641      	mov	r1, r8
 800af18:	4638      	mov	r0, r7
 800af1a:	47c8      	blx	r9
 800af1c:	3001      	adds	r0, #1
 800af1e:	d103      	bne.n	800af28 <_printf_common+0xac>
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af28:	3501      	adds	r5, #1
 800af2a:	e7c6      	b.n	800aeba <_printf_common+0x3e>
 800af2c:	18e1      	adds	r1, r4, r3
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	2030      	movs	r0, #48	@ 0x30
 800af32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af36:	4422      	add	r2, r4
 800af38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af40:	3302      	adds	r3, #2
 800af42:	e7c7      	b.n	800aed4 <_printf_common+0x58>
 800af44:	2301      	movs	r3, #1
 800af46:	4622      	mov	r2, r4
 800af48:	4641      	mov	r1, r8
 800af4a:	4638      	mov	r0, r7
 800af4c:	47c8      	blx	r9
 800af4e:	3001      	adds	r0, #1
 800af50:	d0e6      	beq.n	800af20 <_printf_common+0xa4>
 800af52:	3601      	adds	r6, #1
 800af54:	e7d9      	b.n	800af0a <_printf_common+0x8e>
	...

0800af58 <_printf_i>:
 800af58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af5c:	7e0f      	ldrb	r7, [r1, #24]
 800af5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af60:	2f78      	cmp	r7, #120	@ 0x78
 800af62:	4691      	mov	r9, r2
 800af64:	4680      	mov	r8, r0
 800af66:	460c      	mov	r4, r1
 800af68:	469a      	mov	sl, r3
 800af6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af6e:	d807      	bhi.n	800af80 <_printf_i+0x28>
 800af70:	2f62      	cmp	r7, #98	@ 0x62
 800af72:	d80a      	bhi.n	800af8a <_printf_i+0x32>
 800af74:	2f00      	cmp	r7, #0
 800af76:	f000 80d2 	beq.w	800b11e <_printf_i+0x1c6>
 800af7a:	2f58      	cmp	r7, #88	@ 0x58
 800af7c:	f000 80b9 	beq.w	800b0f2 <_printf_i+0x19a>
 800af80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af88:	e03a      	b.n	800b000 <_printf_i+0xa8>
 800af8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af8e:	2b15      	cmp	r3, #21
 800af90:	d8f6      	bhi.n	800af80 <_printf_i+0x28>
 800af92:	a101      	add	r1, pc, #4	@ (adr r1, 800af98 <_printf_i+0x40>)
 800af94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af98:	0800aff1 	.word	0x0800aff1
 800af9c:	0800b005 	.word	0x0800b005
 800afa0:	0800af81 	.word	0x0800af81
 800afa4:	0800af81 	.word	0x0800af81
 800afa8:	0800af81 	.word	0x0800af81
 800afac:	0800af81 	.word	0x0800af81
 800afb0:	0800b005 	.word	0x0800b005
 800afb4:	0800af81 	.word	0x0800af81
 800afb8:	0800af81 	.word	0x0800af81
 800afbc:	0800af81 	.word	0x0800af81
 800afc0:	0800af81 	.word	0x0800af81
 800afc4:	0800b105 	.word	0x0800b105
 800afc8:	0800b02f 	.word	0x0800b02f
 800afcc:	0800b0bf 	.word	0x0800b0bf
 800afd0:	0800af81 	.word	0x0800af81
 800afd4:	0800af81 	.word	0x0800af81
 800afd8:	0800b127 	.word	0x0800b127
 800afdc:	0800af81 	.word	0x0800af81
 800afe0:	0800b02f 	.word	0x0800b02f
 800afe4:	0800af81 	.word	0x0800af81
 800afe8:	0800af81 	.word	0x0800af81
 800afec:	0800b0c7 	.word	0x0800b0c7
 800aff0:	6833      	ldr	r3, [r6, #0]
 800aff2:	1d1a      	adds	r2, r3, #4
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6032      	str	r2, [r6, #0]
 800aff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800affc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b000:	2301      	movs	r3, #1
 800b002:	e09d      	b.n	800b140 <_printf_i+0x1e8>
 800b004:	6833      	ldr	r3, [r6, #0]
 800b006:	6820      	ldr	r0, [r4, #0]
 800b008:	1d19      	adds	r1, r3, #4
 800b00a:	6031      	str	r1, [r6, #0]
 800b00c:	0606      	lsls	r6, r0, #24
 800b00e:	d501      	bpl.n	800b014 <_printf_i+0xbc>
 800b010:	681d      	ldr	r5, [r3, #0]
 800b012:	e003      	b.n	800b01c <_printf_i+0xc4>
 800b014:	0645      	lsls	r5, r0, #25
 800b016:	d5fb      	bpl.n	800b010 <_printf_i+0xb8>
 800b018:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	da03      	bge.n	800b028 <_printf_i+0xd0>
 800b020:	232d      	movs	r3, #45	@ 0x2d
 800b022:	426d      	negs	r5, r5
 800b024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b028:	4859      	ldr	r0, [pc, #356]	@ (800b190 <_printf_i+0x238>)
 800b02a:	230a      	movs	r3, #10
 800b02c:	e011      	b.n	800b052 <_printf_i+0xfa>
 800b02e:	6821      	ldr	r1, [r4, #0]
 800b030:	6833      	ldr	r3, [r6, #0]
 800b032:	0608      	lsls	r0, r1, #24
 800b034:	f853 5b04 	ldr.w	r5, [r3], #4
 800b038:	d402      	bmi.n	800b040 <_printf_i+0xe8>
 800b03a:	0649      	lsls	r1, r1, #25
 800b03c:	bf48      	it	mi
 800b03e:	b2ad      	uxthmi	r5, r5
 800b040:	2f6f      	cmp	r7, #111	@ 0x6f
 800b042:	4853      	ldr	r0, [pc, #332]	@ (800b190 <_printf_i+0x238>)
 800b044:	6033      	str	r3, [r6, #0]
 800b046:	bf14      	ite	ne
 800b048:	230a      	movne	r3, #10
 800b04a:	2308      	moveq	r3, #8
 800b04c:	2100      	movs	r1, #0
 800b04e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b052:	6866      	ldr	r6, [r4, #4]
 800b054:	60a6      	str	r6, [r4, #8]
 800b056:	2e00      	cmp	r6, #0
 800b058:	bfa2      	ittt	ge
 800b05a:	6821      	ldrge	r1, [r4, #0]
 800b05c:	f021 0104 	bicge.w	r1, r1, #4
 800b060:	6021      	strge	r1, [r4, #0]
 800b062:	b90d      	cbnz	r5, 800b068 <_printf_i+0x110>
 800b064:	2e00      	cmp	r6, #0
 800b066:	d04b      	beq.n	800b100 <_printf_i+0x1a8>
 800b068:	4616      	mov	r6, r2
 800b06a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b06e:	fb03 5711 	mls	r7, r3, r1, r5
 800b072:	5dc7      	ldrb	r7, [r0, r7]
 800b074:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b078:	462f      	mov	r7, r5
 800b07a:	42bb      	cmp	r3, r7
 800b07c:	460d      	mov	r5, r1
 800b07e:	d9f4      	bls.n	800b06a <_printf_i+0x112>
 800b080:	2b08      	cmp	r3, #8
 800b082:	d10b      	bne.n	800b09c <_printf_i+0x144>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	07df      	lsls	r7, r3, #31
 800b088:	d508      	bpl.n	800b09c <_printf_i+0x144>
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	6861      	ldr	r1, [r4, #4]
 800b08e:	4299      	cmp	r1, r3
 800b090:	bfde      	ittt	le
 800b092:	2330      	movle	r3, #48	@ 0x30
 800b094:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b098:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b09c:	1b92      	subs	r2, r2, r6
 800b09e:	6122      	str	r2, [r4, #16]
 800b0a0:	f8cd a000 	str.w	sl, [sp]
 800b0a4:	464b      	mov	r3, r9
 800b0a6:	aa03      	add	r2, sp, #12
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	f7ff fee6 	bl	800ae7c <_printf_common>
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	d14a      	bne.n	800b14a <_printf_i+0x1f2>
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	b004      	add	sp, #16
 800b0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	f043 0320 	orr.w	r3, r3, #32
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	4833      	ldr	r0, [pc, #204]	@ (800b194 <_printf_i+0x23c>)
 800b0c8:	2778      	movs	r7, #120	@ 0x78
 800b0ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0ce:	6823      	ldr	r3, [r4, #0]
 800b0d0:	6831      	ldr	r1, [r6, #0]
 800b0d2:	061f      	lsls	r7, r3, #24
 800b0d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0d8:	d402      	bmi.n	800b0e0 <_printf_i+0x188>
 800b0da:	065f      	lsls	r7, r3, #25
 800b0dc:	bf48      	it	mi
 800b0de:	b2ad      	uxthmi	r5, r5
 800b0e0:	6031      	str	r1, [r6, #0]
 800b0e2:	07d9      	lsls	r1, r3, #31
 800b0e4:	bf44      	itt	mi
 800b0e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0ea:	6023      	strmi	r3, [r4, #0]
 800b0ec:	b11d      	cbz	r5, 800b0f6 <_printf_i+0x19e>
 800b0ee:	2310      	movs	r3, #16
 800b0f0:	e7ac      	b.n	800b04c <_printf_i+0xf4>
 800b0f2:	4827      	ldr	r0, [pc, #156]	@ (800b190 <_printf_i+0x238>)
 800b0f4:	e7e9      	b.n	800b0ca <_printf_i+0x172>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	f023 0320 	bic.w	r3, r3, #32
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	e7f6      	b.n	800b0ee <_printf_i+0x196>
 800b100:	4616      	mov	r6, r2
 800b102:	e7bd      	b.n	800b080 <_printf_i+0x128>
 800b104:	6833      	ldr	r3, [r6, #0]
 800b106:	6825      	ldr	r5, [r4, #0]
 800b108:	6961      	ldr	r1, [r4, #20]
 800b10a:	1d18      	adds	r0, r3, #4
 800b10c:	6030      	str	r0, [r6, #0]
 800b10e:	062e      	lsls	r6, r5, #24
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	d501      	bpl.n	800b118 <_printf_i+0x1c0>
 800b114:	6019      	str	r1, [r3, #0]
 800b116:	e002      	b.n	800b11e <_printf_i+0x1c6>
 800b118:	0668      	lsls	r0, r5, #25
 800b11a:	d5fb      	bpl.n	800b114 <_printf_i+0x1bc>
 800b11c:	8019      	strh	r1, [r3, #0]
 800b11e:	2300      	movs	r3, #0
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	4616      	mov	r6, r2
 800b124:	e7bc      	b.n	800b0a0 <_printf_i+0x148>
 800b126:	6833      	ldr	r3, [r6, #0]
 800b128:	1d1a      	adds	r2, r3, #4
 800b12a:	6032      	str	r2, [r6, #0]
 800b12c:	681e      	ldr	r6, [r3, #0]
 800b12e:	6862      	ldr	r2, [r4, #4]
 800b130:	2100      	movs	r1, #0
 800b132:	4630      	mov	r0, r6
 800b134:	f7f5 f84c 	bl	80001d0 <memchr>
 800b138:	b108      	cbz	r0, 800b13e <_printf_i+0x1e6>
 800b13a:	1b80      	subs	r0, r0, r6
 800b13c:	6060      	str	r0, [r4, #4]
 800b13e:	6863      	ldr	r3, [r4, #4]
 800b140:	6123      	str	r3, [r4, #16]
 800b142:	2300      	movs	r3, #0
 800b144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b148:	e7aa      	b.n	800b0a0 <_printf_i+0x148>
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	4632      	mov	r2, r6
 800b14e:	4649      	mov	r1, r9
 800b150:	4640      	mov	r0, r8
 800b152:	47d0      	blx	sl
 800b154:	3001      	adds	r0, #1
 800b156:	d0ad      	beq.n	800b0b4 <_printf_i+0x15c>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	079b      	lsls	r3, r3, #30
 800b15c:	d413      	bmi.n	800b186 <_printf_i+0x22e>
 800b15e:	68e0      	ldr	r0, [r4, #12]
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	4298      	cmp	r0, r3
 800b164:	bfb8      	it	lt
 800b166:	4618      	movlt	r0, r3
 800b168:	e7a6      	b.n	800b0b8 <_printf_i+0x160>
 800b16a:	2301      	movs	r3, #1
 800b16c:	4632      	mov	r2, r6
 800b16e:	4649      	mov	r1, r9
 800b170:	4640      	mov	r0, r8
 800b172:	47d0      	blx	sl
 800b174:	3001      	adds	r0, #1
 800b176:	d09d      	beq.n	800b0b4 <_printf_i+0x15c>
 800b178:	3501      	adds	r5, #1
 800b17a:	68e3      	ldr	r3, [r4, #12]
 800b17c:	9903      	ldr	r1, [sp, #12]
 800b17e:	1a5b      	subs	r3, r3, r1
 800b180:	42ab      	cmp	r3, r5
 800b182:	dcf2      	bgt.n	800b16a <_printf_i+0x212>
 800b184:	e7eb      	b.n	800b15e <_printf_i+0x206>
 800b186:	2500      	movs	r5, #0
 800b188:	f104 0619 	add.w	r6, r4, #25
 800b18c:	e7f5      	b.n	800b17a <_printf_i+0x222>
 800b18e:	bf00      	nop
 800b190:	0800d66a 	.word	0x0800d66a
 800b194:	0800d67b 	.word	0x0800d67b

0800b198 <std>:
 800b198:	2300      	movs	r3, #0
 800b19a:	b510      	push	{r4, lr}
 800b19c:	4604      	mov	r4, r0
 800b19e:	e9c0 3300 	strd	r3, r3, [r0]
 800b1a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1a6:	6083      	str	r3, [r0, #8]
 800b1a8:	8181      	strh	r1, [r0, #12]
 800b1aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1ac:	81c2      	strh	r2, [r0, #14]
 800b1ae:	6183      	str	r3, [r0, #24]
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	2208      	movs	r2, #8
 800b1b4:	305c      	adds	r0, #92	@ 0x5c
 800b1b6:	f000 f928 	bl	800b40a <memset>
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <std+0x58>)
 800b1bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1be:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f4 <std+0x5c>)
 800b1c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f8 <std+0x60>)
 800b1c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <std+0x64>)
 800b1c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b200 <std+0x68>)
 800b1cc:	6224      	str	r4, [r4, #32]
 800b1ce:	429c      	cmp	r4, r3
 800b1d0:	d006      	beq.n	800b1e0 <std+0x48>
 800b1d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1d6:	4294      	cmp	r4, r2
 800b1d8:	d002      	beq.n	800b1e0 <std+0x48>
 800b1da:	33d0      	adds	r3, #208	@ 0xd0
 800b1dc:	429c      	cmp	r4, r3
 800b1de:	d105      	bne.n	800b1ec <std+0x54>
 800b1e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e8:	f000 b98c 	b.w	800b504 <__retarget_lock_init_recursive>
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	0800b385 	.word	0x0800b385
 800b1f4:	0800b3a7 	.word	0x0800b3a7
 800b1f8:	0800b3df 	.word	0x0800b3df
 800b1fc:	0800b403 	.word	0x0800b403
 800b200:	20001db4 	.word	0x20001db4

0800b204 <stdio_exit_handler>:
 800b204:	4a02      	ldr	r2, [pc, #8]	@ (800b210 <stdio_exit_handler+0xc>)
 800b206:	4903      	ldr	r1, [pc, #12]	@ (800b214 <stdio_exit_handler+0x10>)
 800b208:	4803      	ldr	r0, [pc, #12]	@ (800b218 <stdio_exit_handler+0x14>)
 800b20a:	f000 b869 	b.w	800b2e0 <_fwalk_sglue>
 800b20e:	bf00      	nop
 800b210:	20000010 	.word	0x20000010
 800b214:	0800ce7d 	.word	0x0800ce7d
 800b218:	20000020 	.word	0x20000020

0800b21c <cleanup_stdio>:
 800b21c:	6841      	ldr	r1, [r0, #4]
 800b21e:	4b0c      	ldr	r3, [pc, #48]	@ (800b250 <cleanup_stdio+0x34>)
 800b220:	4299      	cmp	r1, r3
 800b222:	b510      	push	{r4, lr}
 800b224:	4604      	mov	r4, r0
 800b226:	d001      	beq.n	800b22c <cleanup_stdio+0x10>
 800b228:	f001 fe28 	bl	800ce7c <_fflush_r>
 800b22c:	68a1      	ldr	r1, [r4, #8]
 800b22e:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <cleanup_stdio+0x38>)
 800b230:	4299      	cmp	r1, r3
 800b232:	d002      	beq.n	800b23a <cleanup_stdio+0x1e>
 800b234:	4620      	mov	r0, r4
 800b236:	f001 fe21 	bl	800ce7c <_fflush_r>
 800b23a:	68e1      	ldr	r1, [r4, #12]
 800b23c:	4b06      	ldr	r3, [pc, #24]	@ (800b258 <cleanup_stdio+0x3c>)
 800b23e:	4299      	cmp	r1, r3
 800b240:	d004      	beq.n	800b24c <cleanup_stdio+0x30>
 800b242:	4620      	mov	r0, r4
 800b244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b248:	f001 be18 	b.w	800ce7c <_fflush_r>
 800b24c:	bd10      	pop	{r4, pc}
 800b24e:	bf00      	nop
 800b250:	20001db4 	.word	0x20001db4
 800b254:	20001e1c 	.word	0x20001e1c
 800b258:	20001e84 	.word	0x20001e84

0800b25c <global_stdio_init.part.0>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	4b0b      	ldr	r3, [pc, #44]	@ (800b28c <global_stdio_init.part.0+0x30>)
 800b260:	4c0b      	ldr	r4, [pc, #44]	@ (800b290 <global_stdio_init.part.0+0x34>)
 800b262:	4a0c      	ldr	r2, [pc, #48]	@ (800b294 <global_stdio_init.part.0+0x38>)
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	4620      	mov	r0, r4
 800b268:	2200      	movs	r2, #0
 800b26a:	2104      	movs	r1, #4
 800b26c:	f7ff ff94 	bl	800b198 <std>
 800b270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b274:	2201      	movs	r2, #1
 800b276:	2109      	movs	r1, #9
 800b278:	f7ff ff8e 	bl	800b198 <std>
 800b27c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b280:	2202      	movs	r2, #2
 800b282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b286:	2112      	movs	r1, #18
 800b288:	f7ff bf86 	b.w	800b198 <std>
 800b28c:	20001eec 	.word	0x20001eec
 800b290:	20001db4 	.word	0x20001db4
 800b294:	0800b205 	.word	0x0800b205

0800b298 <__sfp_lock_acquire>:
 800b298:	4801      	ldr	r0, [pc, #4]	@ (800b2a0 <__sfp_lock_acquire+0x8>)
 800b29a:	f000 b934 	b.w	800b506 <__retarget_lock_acquire_recursive>
 800b29e:	bf00      	nop
 800b2a0:	20001ef5 	.word	0x20001ef5

0800b2a4 <__sfp_lock_release>:
 800b2a4:	4801      	ldr	r0, [pc, #4]	@ (800b2ac <__sfp_lock_release+0x8>)
 800b2a6:	f000 b92f 	b.w	800b508 <__retarget_lock_release_recursive>
 800b2aa:	bf00      	nop
 800b2ac:	20001ef5 	.word	0x20001ef5

0800b2b0 <__sinit>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	f7ff fff0 	bl	800b298 <__sfp_lock_acquire>
 800b2b8:	6a23      	ldr	r3, [r4, #32]
 800b2ba:	b11b      	cbz	r3, 800b2c4 <__sinit+0x14>
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	f7ff bff0 	b.w	800b2a4 <__sfp_lock_release>
 800b2c4:	4b04      	ldr	r3, [pc, #16]	@ (800b2d8 <__sinit+0x28>)
 800b2c6:	6223      	str	r3, [r4, #32]
 800b2c8:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <__sinit+0x2c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1f5      	bne.n	800b2bc <__sinit+0xc>
 800b2d0:	f7ff ffc4 	bl	800b25c <global_stdio_init.part.0>
 800b2d4:	e7f2      	b.n	800b2bc <__sinit+0xc>
 800b2d6:	bf00      	nop
 800b2d8:	0800b21d 	.word	0x0800b21d
 800b2dc:	20001eec 	.word	0x20001eec

0800b2e0 <_fwalk_sglue>:
 800b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	4688      	mov	r8, r1
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	2600      	movs	r6, #0
 800b2ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2f0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2f4:	d505      	bpl.n	800b302 <_fwalk_sglue+0x22>
 800b2f6:	6824      	ldr	r4, [r4, #0]
 800b2f8:	2c00      	cmp	r4, #0
 800b2fa:	d1f7      	bne.n	800b2ec <_fwalk_sglue+0xc>
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b302:	89ab      	ldrh	r3, [r5, #12]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d907      	bls.n	800b318 <_fwalk_sglue+0x38>
 800b308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b30c:	3301      	adds	r3, #1
 800b30e:	d003      	beq.n	800b318 <_fwalk_sglue+0x38>
 800b310:	4629      	mov	r1, r5
 800b312:	4638      	mov	r0, r7
 800b314:	47c0      	blx	r8
 800b316:	4306      	orrs	r6, r0
 800b318:	3568      	adds	r5, #104	@ 0x68
 800b31a:	e7e9      	b.n	800b2f0 <_fwalk_sglue+0x10>

0800b31c <sniprintf>:
 800b31c:	b40c      	push	{r2, r3}
 800b31e:	b530      	push	{r4, r5, lr}
 800b320:	4b17      	ldr	r3, [pc, #92]	@ (800b380 <sniprintf+0x64>)
 800b322:	1e0c      	subs	r4, r1, #0
 800b324:	681d      	ldr	r5, [r3, #0]
 800b326:	b09d      	sub	sp, #116	@ 0x74
 800b328:	da08      	bge.n	800b33c <sniprintf+0x20>
 800b32a:	238b      	movs	r3, #139	@ 0x8b
 800b32c:	602b      	str	r3, [r5, #0]
 800b32e:	f04f 30ff 	mov.w	r0, #4294967295
 800b332:	b01d      	add	sp, #116	@ 0x74
 800b334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b338:	b002      	add	sp, #8
 800b33a:	4770      	bx	lr
 800b33c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b340:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b344:	bf14      	ite	ne
 800b346:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b34a:	4623      	moveq	r3, r4
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	9307      	str	r3, [sp, #28]
 800b350:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b354:	9002      	str	r0, [sp, #8]
 800b356:	9006      	str	r0, [sp, #24]
 800b358:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b35c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b35e:	ab21      	add	r3, sp, #132	@ 0x84
 800b360:	a902      	add	r1, sp, #8
 800b362:	4628      	mov	r0, r5
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	f001 fc09 	bl	800cb7c <_svfiprintf_r>
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	bfbc      	itt	lt
 800b36e:	238b      	movlt	r3, #139	@ 0x8b
 800b370:	602b      	strlt	r3, [r5, #0]
 800b372:	2c00      	cmp	r4, #0
 800b374:	d0dd      	beq.n	800b332 <sniprintf+0x16>
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	2200      	movs	r2, #0
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	e7d9      	b.n	800b332 <sniprintf+0x16>
 800b37e:	bf00      	nop
 800b380:	2000001c 	.word	0x2000001c

0800b384 <__sread>:
 800b384:	b510      	push	{r4, lr}
 800b386:	460c      	mov	r4, r1
 800b388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b38c:	f000 f86c 	bl	800b468 <_read_r>
 800b390:	2800      	cmp	r0, #0
 800b392:	bfab      	itete	ge
 800b394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b396:	89a3      	ldrhlt	r3, [r4, #12]
 800b398:	181b      	addge	r3, r3, r0
 800b39a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b39e:	bfac      	ite	ge
 800b3a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3a2:	81a3      	strhlt	r3, [r4, #12]
 800b3a4:	bd10      	pop	{r4, pc}

0800b3a6 <__swrite>:
 800b3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3aa:	461f      	mov	r7, r3
 800b3ac:	898b      	ldrh	r3, [r1, #12]
 800b3ae:	05db      	lsls	r3, r3, #23
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	4616      	mov	r6, r2
 800b3b6:	d505      	bpl.n	800b3c4 <__swrite+0x1e>
 800b3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3bc:	2302      	movs	r3, #2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f000 f840 	bl	800b444 <_lseek_r>
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	463b      	mov	r3, r7
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	f000 b857 	b.w	800b48c <_write_r>

0800b3de <__sseek>:
 800b3de:	b510      	push	{r4, lr}
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e6:	f000 f82d 	bl	800b444 <_lseek_r>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	bf15      	itete	ne
 800b3f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3fa:	81a3      	strheq	r3, [r4, #12]
 800b3fc:	bf18      	it	ne
 800b3fe:	81a3      	strhne	r3, [r4, #12]
 800b400:	bd10      	pop	{r4, pc}

0800b402 <__sclose>:
 800b402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b406:	f000 b80d 	b.w	800b424 <_close_r>

0800b40a <memset>:
 800b40a:	4402      	add	r2, r0
 800b40c:	4603      	mov	r3, r0
 800b40e:	4293      	cmp	r3, r2
 800b410:	d100      	bne.n	800b414 <memset+0xa>
 800b412:	4770      	bx	lr
 800b414:	f803 1b01 	strb.w	r1, [r3], #1
 800b418:	e7f9      	b.n	800b40e <memset+0x4>
	...

0800b41c <_localeconv_r>:
 800b41c:	4800      	ldr	r0, [pc, #0]	@ (800b420 <_localeconv_r+0x4>)
 800b41e:	4770      	bx	lr
 800b420:	2000015c 	.word	0x2000015c

0800b424 <_close_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4d06      	ldr	r5, [pc, #24]	@ (800b440 <_close_r+0x1c>)
 800b428:	2300      	movs	r3, #0
 800b42a:	4604      	mov	r4, r0
 800b42c:	4608      	mov	r0, r1
 800b42e:	602b      	str	r3, [r5, #0]
 800b430:	f7f6 fe38 	bl	80020a4 <_close>
 800b434:	1c43      	adds	r3, r0, #1
 800b436:	d102      	bne.n	800b43e <_close_r+0x1a>
 800b438:	682b      	ldr	r3, [r5, #0]
 800b43a:	b103      	cbz	r3, 800b43e <_close_r+0x1a>
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	bd38      	pop	{r3, r4, r5, pc}
 800b440:	20001ef0 	.word	0x20001ef0

0800b444 <_lseek_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	4d07      	ldr	r5, [pc, #28]	@ (800b464 <_lseek_r+0x20>)
 800b448:	4604      	mov	r4, r0
 800b44a:	4608      	mov	r0, r1
 800b44c:	4611      	mov	r1, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	602a      	str	r2, [r5, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	f7f6 fe4d 	bl	80020f2 <_lseek>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_lseek_r+0x1e>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_lseek_r+0x1e>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	20001ef0 	.word	0x20001ef0

0800b468 <_read_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4d07      	ldr	r5, [pc, #28]	@ (800b488 <_read_r+0x20>)
 800b46c:	4604      	mov	r4, r0
 800b46e:	4608      	mov	r0, r1
 800b470:	4611      	mov	r1, r2
 800b472:	2200      	movs	r2, #0
 800b474:	602a      	str	r2, [r5, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	f7f6 fddb 	bl	8002032 <_read>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	d102      	bne.n	800b486 <_read_r+0x1e>
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	b103      	cbz	r3, 800b486 <_read_r+0x1e>
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	20001ef0 	.word	0x20001ef0

0800b48c <_write_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4d07      	ldr	r5, [pc, #28]	@ (800b4ac <_write_r+0x20>)
 800b490:	4604      	mov	r4, r0
 800b492:	4608      	mov	r0, r1
 800b494:	4611      	mov	r1, r2
 800b496:	2200      	movs	r2, #0
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	f7f6 fde6 	bl	800206c <_write>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_write_r+0x1e>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_write_r+0x1e>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	20001ef0 	.word	0x20001ef0

0800b4b0 <__errno>:
 800b4b0:	4b01      	ldr	r3, [pc, #4]	@ (800b4b8 <__errno+0x8>)
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	2000001c 	.word	0x2000001c

0800b4bc <__libc_init_array>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	4d0d      	ldr	r5, [pc, #52]	@ (800b4f4 <__libc_init_array+0x38>)
 800b4c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b4f8 <__libc_init_array+0x3c>)
 800b4c2:	1b64      	subs	r4, r4, r5
 800b4c4:	10a4      	asrs	r4, r4, #2
 800b4c6:	2600      	movs	r6, #0
 800b4c8:	42a6      	cmp	r6, r4
 800b4ca:	d109      	bne.n	800b4e0 <__libc_init_array+0x24>
 800b4cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b4fc <__libc_init_array+0x40>)
 800b4ce:	4c0c      	ldr	r4, [pc, #48]	@ (800b500 <__libc_init_array+0x44>)
 800b4d0:	f002 f864 	bl	800d59c <_init>
 800b4d4:	1b64      	subs	r4, r4, r5
 800b4d6:	10a4      	asrs	r4, r4, #2
 800b4d8:	2600      	movs	r6, #0
 800b4da:	42a6      	cmp	r6, r4
 800b4dc:	d105      	bne.n	800b4ea <__libc_init_array+0x2e>
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4e4:	4798      	blx	r3
 800b4e6:	3601      	adds	r6, #1
 800b4e8:	e7ee      	b.n	800b4c8 <__libc_init_array+0xc>
 800b4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ee:	4798      	blx	r3
 800b4f0:	3601      	adds	r6, #1
 800b4f2:	e7f2      	b.n	800b4da <__libc_init_array+0x1e>
 800b4f4:	0800d9d0 	.word	0x0800d9d0
 800b4f8:	0800d9d0 	.word	0x0800d9d0
 800b4fc:	0800d9d0 	.word	0x0800d9d0
 800b500:	0800d9d4 	.word	0x0800d9d4

0800b504 <__retarget_lock_init_recursive>:
 800b504:	4770      	bx	lr

0800b506 <__retarget_lock_acquire_recursive>:
 800b506:	4770      	bx	lr

0800b508 <__retarget_lock_release_recursive>:
 800b508:	4770      	bx	lr

0800b50a <memcpy>:
 800b50a:	440a      	add	r2, r1
 800b50c:	4291      	cmp	r1, r2
 800b50e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b512:	d100      	bne.n	800b516 <memcpy+0xc>
 800b514:	4770      	bx	lr
 800b516:	b510      	push	{r4, lr}
 800b518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b51c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b520:	4291      	cmp	r1, r2
 800b522:	d1f9      	bne.n	800b518 <memcpy+0xe>
 800b524:	bd10      	pop	{r4, pc}

0800b526 <quorem>:
 800b526:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52a:	6903      	ldr	r3, [r0, #16]
 800b52c:	690c      	ldr	r4, [r1, #16]
 800b52e:	42a3      	cmp	r3, r4
 800b530:	4607      	mov	r7, r0
 800b532:	db7e      	blt.n	800b632 <quorem+0x10c>
 800b534:	3c01      	subs	r4, #1
 800b536:	f101 0814 	add.w	r8, r1, #20
 800b53a:	00a3      	lsls	r3, r4, #2
 800b53c:	f100 0514 	add.w	r5, r0, #20
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b54c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b550:	3301      	adds	r3, #1
 800b552:	429a      	cmp	r2, r3
 800b554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b558:	fbb2 f6f3 	udiv	r6, r2, r3
 800b55c:	d32e      	bcc.n	800b5bc <quorem+0x96>
 800b55e:	f04f 0a00 	mov.w	sl, #0
 800b562:	46c4      	mov	ip, r8
 800b564:	46ae      	mov	lr, r5
 800b566:	46d3      	mov	fp, sl
 800b568:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b56c:	b298      	uxth	r0, r3
 800b56e:	fb06 a000 	mla	r0, r6, r0, sl
 800b572:	0c02      	lsrs	r2, r0, #16
 800b574:	0c1b      	lsrs	r3, r3, #16
 800b576:	fb06 2303 	mla	r3, r6, r3, r2
 800b57a:	f8de 2000 	ldr.w	r2, [lr]
 800b57e:	b280      	uxth	r0, r0
 800b580:	b292      	uxth	r2, r2
 800b582:	1a12      	subs	r2, r2, r0
 800b584:	445a      	add	r2, fp
 800b586:	f8de 0000 	ldr.w	r0, [lr]
 800b58a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b58e:	b29b      	uxth	r3, r3
 800b590:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b594:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b598:	b292      	uxth	r2, r2
 800b59a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b59e:	45e1      	cmp	r9, ip
 800b5a0:	f84e 2b04 	str.w	r2, [lr], #4
 800b5a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5a8:	d2de      	bcs.n	800b568 <quorem+0x42>
 800b5aa:	9b00      	ldr	r3, [sp, #0]
 800b5ac:	58eb      	ldr	r3, [r5, r3]
 800b5ae:	b92b      	cbnz	r3, 800b5bc <quorem+0x96>
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	3b04      	subs	r3, #4
 800b5b4:	429d      	cmp	r5, r3
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	d32f      	bcc.n	800b61a <quorem+0xf4>
 800b5ba:	613c      	str	r4, [r7, #16]
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f001 f979 	bl	800c8b4 <__mcmp>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	db25      	blt.n	800b612 <quorem+0xec>
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5ce:	f8d1 c000 	ldr.w	ip, [r1]
 800b5d2:	fa1f fe82 	uxth.w	lr, r2
 800b5d6:	fa1f f38c 	uxth.w	r3, ip
 800b5da:	eba3 030e 	sub.w	r3, r3, lr
 800b5de:	4403      	add	r3, r0
 800b5e0:	0c12      	lsrs	r2, r2, #16
 800b5e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b5e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5f0:	45c1      	cmp	r9, r8
 800b5f2:	f841 3b04 	str.w	r3, [r1], #4
 800b5f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b5fa:	d2e6      	bcs.n	800b5ca <quorem+0xa4>
 800b5fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b600:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b604:	b922      	cbnz	r2, 800b610 <quorem+0xea>
 800b606:	3b04      	subs	r3, #4
 800b608:	429d      	cmp	r5, r3
 800b60a:	461a      	mov	r2, r3
 800b60c:	d30b      	bcc.n	800b626 <quorem+0x100>
 800b60e:	613c      	str	r4, [r7, #16]
 800b610:	3601      	adds	r6, #1
 800b612:	4630      	mov	r0, r6
 800b614:	b003      	add	sp, #12
 800b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61a:	6812      	ldr	r2, [r2, #0]
 800b61c:	3b04      	subs	r3, #4
 800b61e:	2a00      	cmp	r2, #0
 800b620:	d1cb      	bne.n	800b5ba <quorem+0x94>
 800b622:	3c01      	subs	r4, #1
 800b624:	e7c6      	b.n	800b5b4 <quorem+0x8e>
 800b626:	6812      	ldr	r2, [r2, #0]
 800b628:	3b04      	subs	r3, #4
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	d1ef      	bne.n	800b60e <quorem+0xe8>
 800b62e:	3c01      	subs	r4, #1
 800b630:	e7ea      	b.n	800b608 <quorem+0xe2>
 800b632:	2000      	movs	r0, #0
 800b634:	e7ee      	b.n	800b614 <quorem+0xee>
	...

0800b638 <_dtoa_r>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	69c7      	ldr	r7, [r0, #28]
 800b63e:	b099      	sub	sp, #100	@ 0x64
 800b640:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b644:	ec55 4b10 	vmov	r4, r5, d0
 800b648:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b64a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b64c:	4683      	mov	fp, r0
 800b64e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b650:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b652:	b97f      	cbnz	r7, 800b674 <_dtoa_r+0x3c>
 800b654:	2010      	movs	r0, #16
 800b656:	f000 fdfd 	bl	800c254 <malloc>
 800b65a:	4602      	mov	r2, r0
 800b65c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b660:	b920      	cbnz	r0, 800b66c <_dtoa_r+0x34>
 800b662:	4ba7      	ldr	r3, [pc, #668]	@ (800b900 <_dtoa_r+0x2c8>)
 800b664:	21ef      	movs	r1, #239	@ 0xef
 800b666:	48a7      	ldr	r0, [pc, #668]	@ (800b904 <_dtoa_r+0x2cc>)
 800b668:	f001 fc5a 	bl	800cf20 <__assert_func>
 800b66c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b670:	6007      	str	r7, [r0, #0]
 800b672:	60c7      	str	r7, [r0, #12]
 800b674:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	b159      	cbz	r1, 800b694 <_dtoa_r+0x5c>
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	604a      	str	r2, [r1, #4]
 800b680:	2301      	movs	r3, #1
 800b682:	4093      	lsls	r3, r2
 800b684:	608b      	str	r3, [r1, #8]
 800b686:	4658      	mov	r0, fp
 800b688:	f000 feda 	bl	800c440 <_Bfree>
 800b68c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	1e2b      	subs	r3, r5, #0
 800b696:	bfb9      	ittee	lt
 800b698:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b69c:	9303      	strlt	r3, [sp, #12]
 800b69e:	2300      	movge	r3, #0
 800b6a0:	6033      	strge	r3, [r6, #0]
 800b6a2:	9f03      	ldr	r7, [sp, #12]
 800b6a4:	4b98      	ldr	r3, [pc, #608]	@ (800b908 <_dtoa_r+0x2d0>)
 800b6a6:	bfbc      	itt	lt
 800b6a8:	2201      	movlt	r2, #1
 800b6aa:	6032      	strlt	r2, [r6, #0]
 800b6ac:	43bb      	bics	r3, r7
 800b6ae:	d112      	bne.n	800b6d6 <_dtoa_r+0x9e>
 800b6b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6bc:	4323      	orrs	r3, r4
 800b6be:	f000 854d 	beq.w	800c15c <_dtoa_r+0xb24>
 800b6c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b91c <_dtoa_r+0x2e4>
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 854f 	beq.w	800c16c <_dtoa_r+0xb34>
 800b6ce:	f10a 0303 	add.w	r3, sl, #3
 800b6d2:	f000 bd49 	b.w	800c168 <_dtoa_r+0xb30>
 800b6d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	ec51 0b17 	vmov	r0, r1, d7
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b6e6:	f7f5 f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6ea:	4680      	mov	r8, r0
 800b6ec:	b158      	cbz	r0, 800b706 <_dtoa_r+0xce>
 800b6ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6f6:	b113      	cbz	r3, 800b6fe <_dtoa_r+0xc6>
 800b6f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b6fa:	4b84      	ldr	r3, [pc, #528]	@ (800b90c <_dtoa_r+0x2d4>)
 800b6fc:	6013      	str	r3, [r2, #0]
 800b6fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b920 <_dtoa_r+0x2e8>
 800b702:	f000 bd33 	b.w	800c16c <_dtoa_r+0xb34>
 800b706:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b70a:	aa16      	add	r2, sp, #88	@ 0x58
 800b70c:	a917      	add	r1, sp, #92	@ 0x5c
 800b70e:	4658      	mov	r0, fp
 800b710:	f001 f980 	bl	800ca14 <__d2b>
 800b714:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b718:	4681      	mov	r9, r0
 800b71a:	2e00      	cmp	r6, #0
 800b71c:	d077      	beq.n	800b80e <_dtoa_r+0x1d6>
 800b71e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b720:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b72c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b730:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b734:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b738:	4619      	mov	r1, r3
 800b73a:	2200      	movs	r2, #0
 800b73c:	4b74      	ldr	r3, [pc, #464]	@ (800b910 <_dtoa_r+0x2d8>)
 800b73e:	f7f4 fda3 	bl	8000288 <__aeabi_dsub>
 800b742:	a369      	add	r3, pc, #420	@ (adr r3, 800b8e8 <_dtoa_r+0x2b0>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f7f4 ff56 	bl	80005f8 <__aeabi_dmul>
 800b74c:	a368      	add	r3, pc, #416	@ (adr r3, 800b8f0 <_dtoa_r+0x2b8>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fd9b 	bl	800028c <__adddf3>
 800b756:	4604      	mov	r4, r0
 800b758:	4630      	mov	r0, r6
 800b75a:	460d      	mov	r5, r1
 800b75c:	f7f4 fee2 	bl	8000524 <__aeabi_i2d>
 800b760:	a365      	add	r3, pc, #404	@ (adr r3, 800b8f8 <_dtoa_r+0x2c0>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 ff47 	bl	80005f8 <__aeabi_dmul>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	4620      	mov	r0, r4
 800b770:	4629      	mov	r1, r5
 800b772:	f7f4 fd8b 	bl	800028c <__adddf3>
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
 800b77a:	f7f5 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800b77e:	2200      	movs	r2, #0
 800b780:	4607      	mov	r7, r0
 800b782:	2300      	movs	r3, #0
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	f7f5 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800b78c:	b140      	cbz	r0, 800b7a0 <_dtoa_r+0x168>
 800b78e:	4638      	mov	r0, r7
 800b790:	f7f4 fec8 	bl	8000524 <__aeabi_i2d>
 800b794:	4622      	mov	r2, r4
 800b796:	462b      	mov	r3, r5
 800b798:	f7f5 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800b79c:	b900      	cbnz	r0, 800b7a0 <_dtoa_r+0x168>
 800b79e:	3f01      	subs	r7, #1
 800b7a0:	2f16      	cmp	r7, #22
 800b7a2:	d851      	bhi.n	800b848 <_dtoa_r+0x210>
 800b7a4:	4b5b      	ldr	r3, [pc, #364]	@ (800b914 <_dtoa_r+0x2dc>)
 800b7a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7b2:	f7f5 f993 	bl	8000adc <__aeabi_dcmplt>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d048      	beq.n	800b84c <_dtoa_r+0x214>
 800b7ba:	3f01      	subs	r7, #1
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9312      	str	r3, [sp, #72]	@ 0x48
 800b7c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7c2:	1b9b      	subs	r3, r3, r6
 800b7c4:	1e5a      	subs	r2, r3, #1
 800b7c6:	bf44      	itt	mi
 800b7c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b7cc:	2300      	movmi	r3, #0
 800b7ce:	9208      	str	r2, [sp, #32]
 800b7d0:	bf54      	ite	pl
 800b7d2:	f04f 0800 	movpl.w	r8, #0
 800b7d6:	9308      	strmi	r3, [sp, #32]
 800b7d8:	2f00      	cmp	r7, #0
 800b7da:	db39      	blt.n	800b850 <_dtoa_r+0x218>
 800b7dc:	9b08      	ldr	r3, [sp, #32]
 800b7de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b7e0:	443b      	add	r3, r7
 800b7e2:	9308      	str	r3, [sp, #32]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ea:	2b09      	cmp	r3, #9
 800b7ec:	d864      	bhi.n	800b8b8 <_dtoa_r+0x280>
 800b7ee:	2b05      	cmp	r3, #5
 800b7f0:	bfc4      	itt	gt
 800b7f2:	3b04      	subgt	r3, #4
 800b7f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f8:	f1a3 0302 	sub.w	r3, r3, #2
 800b7fc:	bfcc      	ite	gt
 800b7fe:	2400      	movgt	r4, #0
 800b800:	2401      	movle	r4, #1
 800b802:	2b03      	cmp	r3, #3
 800b804:	d863      	bhi.n	800b8ce <_dtoa_r+0x296>
 800b806:	e8df f003 	tbb	[pc, r3]
 800b80a:	372a      	.short	0x372a
 800b80c:	5535      	.short	0x5535
 800b80e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b812:	441e      	add	r6, r3
 800b814:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b818:	2b20      	cmp	r3, #32
 800b81a:	bfc1      	itttt	gt
 800b81c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b820:	409f      	lslgt	r7, r3
 800b822:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b826:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b82a:	bfd6      	itet	le
 800b82c:	f1c3 0320 	rsble	r3, r3, #32
 800b830:	ea47 0003 	orrgt.w	r0, r7, r3
 800b834:	fa04 f003 	lslle.w	r0, r4, r3
 800b838:	f7f4 fe64 	bl	8000504 <__aeabi_ui2d>
 800b83c:	2201      	movs	r2, #1
 800b83e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b842:	3e01      	subs	r6, #1
 800b844:	9214      	str	r2, [sp, #80]	@ 0x50
 800b846:	e777      	b.n	800b738 <_dtoa_r+0x100>
 800b848:	2301      	movs	r3, #1
 800b84a:	e7b8      	b.n	800b7be <_dtoa_r+0x186>
 800b84c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b84e:	e7b7      	b.n	800b7c0 <_dtoa_r+0x188>
 800b850:	427b      	negs	r3, r7
 800b852:	930a      	str	r3, [sp, #40]	@ 0x28
 800b854:	2300      	movs	r3, #0
 800b856:	eba8 0807 	sub.w	r8, r8, r7
 800b85a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b85c:	e7c4      	b.n	800b7e8 <_dtoa_r+0x1b0>
 800b85e:	2300      	movs	r3, #0
 800b860:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b864:	2b00      	cmp	r3, #0
 800b866:	dc35      	bgt.n	800b8d4 <_dtoa_r+0x29c>
 800b868:	2301      	movs	r3, #1
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	9307      	str	r3, [sp, #28]
 800b86e:	461a      	mov	r2, r3
 800b870:	920e      	str	r2, [sp, #56]	@ 0x38
 800b872:	e00b      	b.n	800b88c <_dtoa_r+0x254>
 800b874:	2301      	movs	r3, #1
 800b876:	e7f3      	b.n	800b860 <_dtoa_r+0x228>
 800b878:	2300      	movs	r3, #0
 800b87a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b87c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b87e:	18fb      	adds	r3, r7, r3
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	2b01      	cmp	r3, #1
 800b886:	9307      	str	r3, [sp, #28]
 800b888:	bfb8      	it	lt
 800b88a:	2301      	movlt	r3, #1
 800b88c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b890:	2100      	movs	r1, #0
 800b892:	2204      	movs	r2, #4
 800b894:	f102 0514 	add.w	r5, r2, #20
 800b898:	429d      	cmp	r5, r3
 800b89a:	d91f      	bls.n	800b8dc <_dtoa_r+0x2a4>
 800b89c:	6041      	str	r1, [r0, #4]
 800b89e:	4658      	mov	r0, fp
 800b8a0:	f000 fd8e 	bl	800c3c0 <_Balloc>
 800b8a4:	4682      	mov	sl, r0
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d13c      	bne.n	800b924 <_dtoa_r+0x2ec>
 800b8aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b918 <_dtoa_r+0x2e0>)
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800b8b2:	e6d8      	b.n	800b666 <_dtoa_r+0x2e>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e7e0      	b.n	800b87a <_dtoa_r+0x242>
 800b8b8:	2401      	movs	r4, #1
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	9307      	str	r3, [sp, #28]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	2312      	movs	r3, #18
 800b8cc:	e7d0      	b.n	800b870 <_dtoa_r+0x238>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8d2:	e7f5      	b.n	800b8c0 <_dtoa_r+0x288>
 800b8d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	9307      	str	r3, [sp, #28]
 800b8da:	e7d7      	b.n	800b88c <_dtoa_r+0x254>
 800b8dc:	3101      	adds	r1, #1
 800b8de:	0052      	lsls	r2, r2, #1
 800b8e0:	e7d8      	b.n	800b894 <_dtoa_r+0x25c>
 800b8e2:	bf00      	nop
 800b8e4:	f3af 8000 	nop.w
 800b8e8:	636f4361 	.word	0x636f4361
 800b8ec:	3fd287a7 	.word	0x3fd287a7
 800b8f0:	8b60c8b3 	.word	0x8b60c8b3
 800b8f4:	3fc68a28 	.word	0x3fc68a28
 800b8f8:	509f79fb 	.word	0x509f79fb
 800b8fc:	3fd34413 	.word	0x3fd34413
 800b900:	0800d699 	.word	0x0800d699
 800b904:	0800d6b0 	.word	0x0800d6b0
 800b908:	7ff00000 	.word	0x7ff00000
 800b90c:	0800d669 	.word	0x0800d669
 800b910:	3ff80000 	.word	0x3ff80000
 800b914:	0800d7a8 	.word	0x0800d7a8
 800b918:	0800d708 	.word	0x0800d708
 800b91c:	0800d695 	.word	0x0800d695
 800b920:	0800d668 	.word	0x0800d668
 800b924:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b928:	6018      	str	r0, [r3, #0]
 800b92a:	9b07      	ldr	r3, [sp, #28]
 800b92c:	2b0e      	cmp	r3, #14
 800b92e:	f200 80a4 	bhi.w	800ba7a <_dtoa_r+0x442>
 800b932:	2c00      	cmp	r4, #0
 800b934:	f000 80a1 	beq.w	800ba7a <_dtoa_r+0x442>
 800b938:	2f00      	cmp	r7, #0
 800b93a:	dd33      	ble.n	800b9a4 <_dtoa_r+0x36c>
 800b93c:	4bad      	ldr	r3, [pc, #692]	@ (800bbf4 <_dtoa_r+0x5bc>)
 800b93e:	f007 020f 	and.w	r2, r7, #15
 800b942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b946:	ed93 7b00 	vldr	d7, [r3]
 800b94a:	05f8      	lsls	r0, r7, #23
 800b94c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b950:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b954:	d516      	bpl.n	800b984 <_dtoa_r+0x34c>
 800b956:	4ba8      	ldr	r3, [pc, #672]	@ (800bbf8 <_dtoa_r+0x5c0>)
 800b958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b95c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b960:	f7f4 ff74 	bl	800084c <__aeabi_ddiv>
 800b964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b968:	f004 040f 	and.w	r4, r4, #15
 800b96c:	2603      	movs	r6, #3
 800b96e:	4da2      	ldr	r5, [pc, #648]	@ (800bbf8 <_dtoa_r+0x5c0>)
 800b970:	b954      	cbnz	r4, 800b988 <_dtoa_r+0x350>
 800b972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b97a:	f7f4 ff67 	bl	800084c <__aeabi_ddiv>
 800b97e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b982:	e028      	b.n	800b9d6 <_dtoa_r+0x39e>
 800b984:	2602      	movs	r6, #2
 800b986:	e7f2      	b.n	800b96e <_dtoa_r+0x336>
 800b988:	07e1      	lsls	r1, r4, #31
 800b98a:	d508      	bpl.n	800b99e <_dtoa_r+0x366>
 800b98c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b990:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b994:	f7f4 fe30 	bl	80005f8 <__aeabi_dmul>
 800b998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b99c:	3601      	adds	r6, #1
 800b99e:	1064      	asrs	r4, r4, #1
 800b9a0:	3508      	adds	r5, #8
 800b9a2:	e7e5      	b.n	800b970 <_dtoa_r+0x338>
 800b9a4:	f000 80d2 	beq.w	800bb4c <_dtoa_r+0x514>
 800b9a8:	427c      	negs	r4, r7
 800b9aa:	4b92      	ldr	r3, [pc, #584]	@ (800bbf4 <_dtoa_r+0x5bc>)
 800b9ac:	4d92      	ldr	r5, [pc, #584]	@ (800bbf8 <_dtoa_r+0x5c0>)
 800b9ae:	f004 020f 	and.w	r2, r4, #15
 800b9b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9be:	f7f4 fe1b 	bl	80005f8 <__aeabi_dmul>
 800b9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9c6:	1124      	asrs	r4, r4, #4
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	2602      	movs	r6, #2
 800b9cc:	2c00      	cmp	r4, #0
 800b9ce:	f040 80b2 	bne.w	800bb36 <_dtoa_r+0x4fe>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1d3      	bne.n	800b97e <_dtoa_r+0x346>
 800b9d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 80b7 	beq.w	800bb50 <_dtoa_r+0x518>
 800b9e2:	4b86      	ldr	r3, [pc, #536]	@ (800bbfc <_dtoa_r+0x5c4>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	f7f5 f877 	bl	8000adc <__aeabi_dcmplt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f000 80ae 	beq.w	800bb50 <_dtoa_r+0x518>
 800b9f4:	9b07      	ldr	r3, [sp, #28]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f000 80aa 	beq.w	800bb50 <_dtoa_r+0x518>
 800b9fc:	9b00      	ldr	r3, [sp, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dd37      	ble.n	800ba72 <_dtoa_r+0x43a>
 800ba02:	1e7b      	subs	r3, r7, #1
 800ba04:	9304      	str	r3, [sp, #16]
 800ba06:	4620      	mov	r0, r4
 800ba08:	4b7d      	ldr	r3, [pc, #500]	@ (800bc00 <_dtoa_r+0x5c8>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	f7f4 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ba12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba16:	9c00      	ldr	r4, [sp, #0]
 800ba18:	3601      	adds	r6, #1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f7f4 fd82 	bl	8000524 <__aeabi_i2d>
 800ba20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba24:	f7f4 fde8 	bl	80005f8 <__aeabi_dmul>
 800ba28:	4b76      	ldr	r3, [pc, #472]	@ (800bc04 <_dtoa_r+0x5cc>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f7f4 fc2e 	bl	800028c <__adddf3>
 800ba30:	4605      	mov	r5, r0
 800ba32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba36:	2c00      	cmp	r4, #0
 800ba38:	f040 808d 	bne.w	800bb56 <_dtoa_r+0x51e>
 800ba3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba40:	4b71      	ldr	r3, [pc, #452]	@ (800bc08 <_dtoa_r+0x5d0>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	f7f4 fc20 	bl	8000288 <__aeabi_dsub>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba50:	462a      	mov	r2, r5
 800ba52:	4633      	mov	r3, r6
 800ba54:	f7f5 f860 	bl	8000b18 <__aeabi_dcmpgt>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	f040 828b 	bne.w	800bf74 <_dtoa_r+0x93c>
 800ba5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba62:	462a      	mov	r2, r5
 800ba64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba68:	f7f5 f838 	bl	8000adc <__aeabi_dcmplt>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	f040 8128 	bne.w	800bcc2 <_dtoa_r+0x68a>
 800ba72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ba76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ba7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f2c0 815a 	blt.w	800bd36 <_dtoa_r+0x6fe>
 800ba82:	2f0e      	cmp	r7, #14
 800ba84:	f300 8157 	bgt.w	800bd36 <_dtoa_r+0x6fe>
 800ba88:	4b5a      	ldr	r3, [pc, #360]	@ (800bbf4 <_dtoa_r+0x5bc>)
 800ba8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba8e:	ed93 7b00 	vldr	d7, [r3]
 800ba92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	ed8d 7b00 	vstr	d7, [sp]
 800ba9a:	da03      	bge.n	800baa4 <_dtoa_r+0x46c>
 800ba9c:	9b07      	ldr	r3, [sp, #28]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f340 8101 	ble.w	800bca6 <_dtoa_r+0x66e>
 800baa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800baa8:	4656      	mov	r6, sl
 800baaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f7f4 fecb 	bl	800084c <__aeabi_ddiv>
 800bab6:	f7f5 f84f 	bl	8000b58 <__aeabi_d2iz>
 800baba:	4680      	mov	r8, r0
 800babc:	f7f4 fd32 	bl	8000524 <__aeabi_i2d>
 800bac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bac4:	f7f4 fd98 	bl	80005f8 <__aeabi_dmul>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4620      	mov	r0, r4
 800bace:	4629      	mov	r1, r5
 800bad0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bad4:	f7f4 fbd8 	bl	8000288 <__aeabi_dsub>
 800bad8:	f806 4b01 	strb.w	r4, [r6], #1
 800badc:	9d07      	ldr	r5, [sp, #28]
 800bade:	eba6 040a 	sub.w	r4, r6, sl
 800bae2:	42a5      	cmp	r5, r4
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	f040 8117 	bne.w	800bd1a <_dtoa_r+0x6e2>
 800baec:	f7f4 fbce 	bl	800028c <__adddf3>
 800baf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baf4:	4604      	mov	r4, r0
 800baf6:	460d      	mov	r5, r1
 800baf8:	f7f5 f80e 	bl	8000b18 <__aeabi_dcmpgt>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	f040 80f9 	bne.w	800bcf4 <_dtoa_r+0x6bc>
 800bb02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb0e:	b118      	cbz	r0, 800bb18 <_dtoa_r+0x4e0>
 800bb10:	f018 0f01 	tst.w	r8, #1
 800bb14:	f040 80ee 	bne.w	800bcf4 <_dtoa_r+0x6bc>
 800bb18:	4649      	mov	r1, r9
 800bb1a:	4658      	mov	r0, fp
 800bb1c:	f000 fc90 	bl	800c440 <_Bfree>
 800bb20:	2300      	movs	r3, #0
 800bb22:	7033      	strb	r3, [r6, #0]
 800bb24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb26:	3701      	adds	r7, #1
 800bb28:	601f      	str	r7, [r3, #0]
 800bb2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 831d 	beq.w	800c16c <_dtoa_r+0xb34>
 800bb32:	601e      	str	r6, [r3, #0]
 800bb34:	e31a      	b.n	800c16c <_dtoa_r+0xb34>
 800bb36:	07e2      	lsls	r2, r4, #31
 800bb38:	d505      	bpl.n	800bb46 <_dtoa_r+0x50e>
 800bb3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb3e:	f7f4 fd5b 	bl	80005f8 <__aeabi_dmul>
 800bb42:	3601      	adds	r6, #1
 800bb44:	2301      	movs	r3, #1
 800bb46:	1064      	asrs	r4, r4, #1
 800bb48:	3508      	adds	r5, #8
 800bb4a:	e73f      	b.n	800b9cc <_dtoa_r+0x394>
 800bb4c:	2602      	movs	r6, #2
 800bb4e:	e742      	b.n	800b9d6 <_dtoa_r+0x39e>
 800bb50:	9c07      	ldr	r4, [sp, #28]
 800bb52:	9704      	str	r7, [sp, #16]
 800bb54:	e761      	b.n	800ba1a <_dtoa_r+0x3e2>
 800bb56:	4b27      	ldr	r3, [pc, #156]	@ (800bbf4 <_dtoa_r+0x5bc>)
 800bb58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb62:	4454      	add	r4, sl
 800bb64:	2900      	cmp	r1, #0
 800bb66:	d053      	beq.n	800bc10 <_dtoa_r+0x5d8>
 800bb68:	4928      	ldr	r1, [pc, #160]	@ (800bc0c <_dtoa_r+0x5d4>)
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	f7f4 fe6e 	bl	800084c <__aeabi_ddiv>
 800bb70:	4633      	mov	r3, r6
 800bb72:	462a      	mov	r2, r5
 800bb74:	f7f4 fb88 	bl	8000288 <__aeabi_dsub>
 800bb78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bb7c:	4656      	mov	r6, sl
 800bb7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb82:	f7f4 ffe9 	bl	8000b58 <__aeabi_d2iz>
 800bb86:	4605      	mov	r5, r0
 800bb88:	f7f4 fccc 	bl	8000524 <__aeabi_i2d>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb94:	f7f4 fb78 	bl	8000288 <__aeabi_dsub>
 800bb98:	3530      	adds	r5, #48	@ 0x30
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bba2:	f806 5b01 	strb.w	r5, [r6], #1
 800bba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbaa:	f7f4 ff97 	bl	8000adc <__aeabi_dcmplt>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d171      	bne.n	800bc96 <_dtoa_r+0x65e>
 800bbb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbb6:	4911      	ldr	r1, [pc, #68]	@ (800bbfc <_dtoa_r+0x5c4>)
 800bbb8:	2000      	movs	r0, #0
 800bbba:	f7f4 fb65 	bl	8000288 <__aeabi_dsub>
 800bbbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbc2:	f7f4 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	f040 8095 	bne.w	800bcf6 <_dtoa_r+0x6be>
 800bbcc:	42a6      	cmp	r6, r4
 800bbce:	f43f af50 	beq.w	800ba72 <_dtoa_r+0x43a>
 800bbd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbd6:	4b0a      	ldr	r3, [pc, #40]	@ (800bc00 <_dtoa_r+0x5c8>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f7f4 fd0d 	bl	80005f8 <__aeabi_dmul>
 800bbde:	4b08      	ldr	r3, [pc, #32]	@ (800bc00 <_dtoa_r+0x5c8>)
 800bbe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbea:	f7f4 fd05 	bl	80005f8 <__aeabi_dmul>
 800bbee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf2:	e7c4      	b.n	800bb7e <_dtoa_r+0x546>
 800bbf4:	0800d7a8 	.word	0x0800d7a8
 800bbf8:	0800d780 	.word	0x0800d780
 800bbfc:	3ff00000 	.word	0x3ff00000
 800bc00:	40240000 	.word	0x40240000
 800bc04:	401c0000 	.word	0x401c0000
 800bc08:	40140000 	.word	0x40140000
 800bc0c:	3fe00000 	.word	0x3fe00000
 800bc10:	4631      	mov	r1, r6
 800bc12:	4628      	mov	r0, r5
 800bc14:	f7f4 fcf0 	bl	80005f8 <__aeabi_dmul>
 800bc18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc1c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bc1e:	4656      	mov	r6, sl
 800bc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc24:	f7f4 ff98 	bl	8000b58 <__aeabi_d2iz>
 800bc28:	4605      	mov	r5, r0
 800bc2a:	f7f4 fc7b 	bl	8000524 <__aeabi_i2d>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc36:	f7f4 fb27 	bl	8000288 <__aeabi_dsub>
 800bc3a:	3530      	adds	r5, #48	@ 0x30
 800bc3c:	f806 5b01 	strb.w	r5, [r6], #1
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	42a6      	cmp	r6, r4
 800bc46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc4a:	f04f 0200 	mov.w	r2, #0
 800bc4e:	d124      	bne.n	800bc9a <_dtoa_r+0x662>
 800bc50:	4bac      	ldr	r3, [pc, #688]	@ (800bf04 <_dtoa_r+0x8cc>)
 800bc52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc56:	f7f4 fb19 	bl	800028c <__adddf3>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc62:	f7f4 ff59 	bl	8000b18 <__aeabi_dcmpgt>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d145      	bne.n	800bcf6 <_dtoa_r+0x6be>
 800bc6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc6e:	49a5      	ldr	r1, [pc, #660]	@ (800bf04 <_dtoa_r+0x8cc>)
 800bc70:	2000      	movs	r0, #0
 800bc72:	f7f4 fb09 	bl	8000288 <__aeabi_dsub>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7e:	f7f4 ff2d 	bl	8000adc <__aeabi_dcmplt>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	f43f aef5 	beq.w	800ba72 <_dtoa_r+0x43a>
 800bc88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bc8a:	1e73      	subs	r3, r6, #1
 800bc8c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bc8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc92:	2b30      	cmp	r3, #48	@ 0x30
 800bc94:	d0f8      	beq.n	800bc88 <_dtoa_r+0x650>
 800bc96:	9f04      	ldr	r7, [sp, #16]
 800bc98:	e73e      	b.n	800bb18 <_dtoa_r+0x4e0>
 800bc9a:	4b9b      	ldr	r3, [pc, #620]	@ (800bf08 <_dtoa_r+0x8d0>)
 800bc9c:	f7f4 fcac 	bl	80005f8 <__aeabi_dmul>
 800bca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bca4:	e7bc      	b.n	800bc20 <_dtoa_r+0x5e8>
 800bca6:	d10c      	bne.n	800bcc2 <_dtoa_r+0x68a>
 800bca8:	4b98      	ldr	r3, [pc, #608]	@ (800bf0c <_dtoa_r+0x8d4>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcb0:	f7f4 fca2 	bl	80005f8 <__aeabi_dmul>
 800bcb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcb8:	f7f4 ff24 	bl	8000b04 <__aeabi_dcmpge>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	f000 8157 	beq.w	800bf70 <_dtoa_r+0x938>
 800bcc2:	2400      	movs	r4, #0
 800bcc4:	4625      	mov	r5, r4
 800bcc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcc8:	43db      	mvns	r3, r3
 800bcca:	9304      	str	r3, [sp, #16]
 800bccc:	4656      	mov	r6, sl
 800bcce:	2700      	movs	r7, #0
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4658      	mov	r0, fp
 800bcd4:	f000 fbb4 	bl	800c440 <_Bfree>
 800bcd8:	2d00      	cmp	r5, #0
 800bcda:	d0dc      	beq.n	800bc96 <_dtoa_r+0x65e>
 800bcdc:	b12f      	cbz	r7, 800bcea <_dtoa_r+0x6b2>
 800bcde:	42af      	cmp	r7, r5
 800bce0:	d003      	beq.n	800bcea <_dtoa_r+0x6b2>
 800bce2:	4639      	mov	r1, r7
 800bce4:	4658      	mov	r0, fp
 800bce6:	f000 fbab 	bl	800c440 <_Bfree>
 800bcea:	4629      	mov	r1, r5
 800bcec:	4658      	mov	r0, fp
 800bcee:	f000 fba7 	bl	800c440 <_Bfree>
 800bcf2:	e7d0      	b.n	800bc96 <_dtoa_r+0x65e>
 800bcf4:	9704      	str	r7, [sp, #16]
 800bcf6:	4633      	mov	r3, r6
 800bcf8:	461e      	mov	r6, r3
 800bcfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcfe:	2a39      	cmp	r2, #57	@ 0x39
 800bd00:	d107      	bne.n	800bd12 <_dtoa_r+0x6da>
 800bd02:	459a      	cmp	sl, r3
 800bd04:	d1f8      	bne.n	800bcf8 <_dtoa_r+0x6c0>
 800bd06:	9a04      	ldr	r2, [sp, #16]
 800bd08:	3201      	adds	r2, #1
 800bd0a:	9204      	str	r2, [sp, #16]
 800bd0c:	2230      	movs	r2, #48	@ 0x30
 800bd0e:	f88a 2000 	strb.w	r2, [sl]
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	3201      	adds	r2, #1
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	e7bd      	b.n	800bc96 <_dtoa_r+0x65e>
 800bd1a:	4b7b      	ldr	r3, [pc, #492]	@ (800bf08 <_dtoa_r+0x8d0>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f7f4 fc6b 	bl	80005f8 <__aeabi_dmul>
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	4604      	mov	r4, r0
 800bd28:	460d      	mov	r5, r1
 800bd2a:	f7f4 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	f43f aebb 	beq.w	800baaa <_dtoa_r+0x472>
 800bd34:	e6f0      	b.n	800bb18 <_dtoa_r+0x4e0>
 800bd36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	f000 80db 	beq.w	800bef4 <_dtoa_r+0x8bc>
 800bd3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd40:	2a01      	cmp	r2, #1
 800bd42:	f300 80bf 	bgt.w	800bec4 <_dtoa_r+0x88c>
 800bd46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	f000 80b7 	beq.w	800bebc <_dtoa_r+0x884>
 800bd4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd54:	4646      	mov	r6, r8
 800bd56:	9a08      	ldr	r2, [sp, #32]
 800bd58:	2101      	movs	r1, #1
 800bd5a:	441a      	add	r2, r3
 800bd5c:	4658      	mov	r0, fp
 800bd5e:	4498      	add	r8, r3
 800bd60:	9208      	str	r2, [sp, #32]
 800bd62:	f000 fc21 	bl	800c5a8 <__i2b>
 800bd66:	4605      	mov	r5, r0
 800bd68:	b15e      	cbz	r6, 800bd82 <_dtoa_r+0x74a>
 800bd6a:	9b08      	ldr	r3, [sp, #32]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	dd08      	ble.n	800bd82 <_dtoa_r+0x74a>
 800bd70:	42b3      	cmp	r3, r6
 800bd72:	9a08      	ldr	r2, [sp, #32]
 800bd74:	bfa8      	it	ge
 800bd76:	4633      	movge	r3, r6
 800bd78:	eba8 0803 	sub.w	r8, r8, r3
 800bd7c:	1af6      	subs	r6, r6, r3
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	9308      	str	r3, [sp, #32]
 800bd82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd84:	b1f3      	cbz	r3, 800bdc4 <_dtoa_r+0x78c>
 800bd86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 80b7 	beq.w	800befc <_dtoa_r+0x8c4>
 800bd8e:	b18c      	cbz	r4, 800bdb4 <_dtoa_r+0x77c>
 800bd90:	4629      	mov	r1, r5
 800bd92:	4622      	mov	r2, r4
 800bd94:	4658      	mov	r0, fp
 800bd96:	f000 fcc7 	bl	800c728 <__pow5mult>
 800bd9a:	464a      	mov	r2, r9
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	4605      	mov	r5, r0
 800bda0:	4658      	mov	r0, fp
 800bda2:	f000 fc17 	bl	800c5d4 <__multiply>
 800bda6:	4649      	mov	r1, r9
 800bda8:	9004      	str	r0, [sp, #16]
 800bdaa:	4658      	mov	r0, fp
 800bdac:	f000 fb48 	bl	800c440 <_Bfree>
 800bdb0:	9b04      	ldr	r3, [sp, #16]
 800bdb2:	4699      	mov	r9, r3
 800bdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdb6:	1b1a      	subs	r2, r3, r4
 800bdb8:	d004      	beq.n	800bdc4 <_dtoa_r+0x78c>
 800bdba:	4649      	mov	r1, r9
 800bdbc:	4658      	mov	r0, fp
 800bdbe:	f000 fcb3 	bl	800c728 <__pow5mult>
 800bdc2:	4681      	mov	r9, r0
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	4658      	mov	r0, fp
 800bdc8:	f000 fbee 	bl	800c5a8 <__i2b>
 800bdcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdce:	4604      	mov	r4, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 81cf 	beq.w	800c174 <_dtoa_r+0xb3c>
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	4601      	mov	r1, r0
 800bdda:	4658      	mov	r0, fp
 800bddc:	f000 fca4 	bl	800c728 <__pow5mult>
 800bde0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	4604      	mov	r4, r0
 800bde6:	f300 8095 	bgt.w	800bf14 <_dtoa_r+0x8dc>
 800bdea:	9b02      	ldr	r3, [sp, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f040 8087 	bne.w	800bf00 <_dtoa_r+0x8c8>
 800bdf2:	9b03      	ldr	r3, [sp, #12]
 800bdf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f040 8089 	bne.w	800bf10 <_dtoa_r+0x8d8>
 800bdfe:	9b03      	ldr	r3, [sp, #12]
 800be00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be04:	0d1b      	lsrs	r3, r3, #20
 800be06:	051b      	lsls	r3, r3, #20
 800be08:	b12b      	cbz	r3, 800be16 <_dtoa_r+0x7de>
 800be0a:	9b08      	ldr	r3, [sp, #32]
 800be0c:	3301      	adds	r3, #1
 800be0e:	9308      	str	r3, [sp, #32]
 800be10:	f108 0801 	add.w	r8, r8, #1
 800be14:	2301      	movs	r3, #1
 800be16:	930a      	str	r3, [sp, #40]	@ 0x28
 800be18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 81b0 	beq.w	800c180 <_dtoa_r+0xb48>
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be26:	6918      	ldr	r0, [r3, #16]
 800be28:	f000 fb72 	bl	800c510 <__hi0bits>
 800be2c:	f1c0 0020 	rsb	r0, r0, #32
 800be30:	9b08      	ldr	r3, [sp, #32]
 800be32:	4418      	add	r0, r3
 800be34:	f010 001f 	ands.w	r0, r0, #31
 800be38:	d077      	beq.n	800bf2a <_dtoa_r+0x8f2>
 800be3a:	f1c0 0320 	rsb	r3, r0, #32
 800be3e:	2b04      	cmp	r3, #4
 800be40:	dd6b      	ble.n	800bf1a <_dtoa_r+0x8e2>
 800be42:	9b08      	ldr	r3, [sp, #32]
 800be44:	f1c0 001c 	rsb	r0, r0, #28
 800be48:	4403      	add	r3, r0
 800be4a:	4480      	add	r8, r0
 800be4c:	4406      	add	r6, r0
 800be4e:	9308      	str	r3, [sp, #32]
 800be50:	f1b8 0f00 	cmp.w	r8, #0
 800be54:	dd05      	ble.n	800be62 <_dtoa_r+0x82a>
 800be56:	4649      	mov	r1, r9
 800be58:	4642      	mov	r2, r8
 800be5a:	4658      	mov	r0, fp
 800be5c:	f000 fcbe 	bl	800c7dc <__lshift>
 800be60:	4681      	mov	r9, r0
 800be62:	9b08      	ldr	r3, [sp, #32]
 800be64:	2b00      	cmp	r3, #0
 800be66:	dd05      	ble.n	800be74 <_dtoa_r+0x83c>
 800be68:	4621      	mov	r1, r4
 800be6a:	461a      	mov	r2, r3
 800be6c:	4658      	mov	r0, fp
 800be6e:	f000 fcb5 	bl	800c7dc <__lshift>
 800be72:	4604      	mov	r4, r0
 800be74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be76:	2b00      	cmp	r3, #0
 800be78:	d059      	beq.n	800bf2e <_dtoa_r+0x8f6>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4648      	mov	r0, r9
 800be7e:	f000 fd19 	bl	800c8b4 <__mcmp>
 800be82:	2800      	cmp	r0, #0
 800be84:	da53      	bge.n	800bf2e <_dtoa_r+0x8f6>
 800be86:	1e7b      	subs	r3, r7, #1
 800be88:	9304      	str	r3, [sp, #16]
 800be8a:	4649      	mov	r1, r9
 800be8c:	2300      	movs	r3, #0
 800be8e:	220a      	movs	r2, #10
 800be90:	4658      	mov	r0, fp
 800be92:	f000 faf7 	bl	800c484 <__multadd>
 800be96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be98:	4681      	mov	r9, r0
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 8172 	beq.w	800c184 <_dtoa_r+0xb4c>
 800bea0:	2300      	movs	r3, #0
 800bea2:	4629      	mov	r1, r5
 800bea4:	220a      	movs	r2, #10
 800bea6:	4658      	mov	r0, fp
 800bea8:	f000 faec 	bl	800c484 <__multadd>
 800beac:	9b00      	ldr	r3, [sp, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	4605      	mov	r5, r0
 800beb2:	dc67      	bgt.n	800bf84 <_dtoa_r+0x94c>
 800beb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	dc41      	bgt.n	800bf3e <_dtoa_r+0x906>
 800beba:	e063      	b.n	800bf84 <_dtoa_r+0x94c>
 800bebc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bebe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bec2:	e746      	b.n	800bd52 <_dtoa_r+0x71a>
 800bec4:	9b07      	ldr	r3, [sp, #28]
 800bec6:	1e5c      	subs	r4, r3, #1
 800bec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beca:	42a3      	cmp	r3, r4
 800becc:	bfbf      	itttt	lt
 800bece:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bed0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bed2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bed4:	1ae3      	sublt	r3, r4, r3
 800bed6:	bfb4      	ite	lt
 800bed8:	18d2      	addlt	r2, r2, r3
 800beda:	1b1c      	subge	r4, r3, r4
 800bedc:	9b07      	ldr	r3, [sp, #28]
 800bede:	bfbc      	itt	lt
 800bee0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bee2:	2400      	movlt	r4, #0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bfb5      	itete	lt
 800bee8:	eba8 0603 	sublt.w	r6, r8, r3
 800beec:	9b07      	ldrge	r3, [sp, #28]
 800beee:	2300      	movlt	r3, #0
 800bef0:	4646      	movge	r6, r8
 800bef2:	e730      	b.n	800bd56 <_dtoa_r+0x71e>
 800bef4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bef6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bef8:	4646      	mov	r6, r8
 800befa:	e735      	b.n	800bd68 <_dtoa_r+0x730>
 800befc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800befe:	e75c      	b.n	800bdba <_dtoa_r+0x782>
 800bf00:	2300      	movs	r3, #0
 800bf02:	e788      	b.n	800be16 <_dtoa_r+0x7de>
 800bf04:	3fe00000 	.word	0x3fe00000
 800bf08:	40240000 	.word	0x40240000
 800bf0c:	40140000 	.word	0x40140000
 800bf10:	9b02      	ldr	r3, [sp, #8]
 800bf12:	e780      	b.n	800be16 <_dtoa_r+0x7de>
 800bf14:	2300      	movs	r3, #0
 800bf16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf18:	e782      	b.n	800be20 <_dtoa_r+0x7e8>
 800bf1a:	d099      	beq.n	800be50 <_dtoa_r+0x818>
 800bf1c:	9a08      	ldr	r2, [sp, #32]
 800bf1e:	331c      	adds	r3, #28
 800bf20:	441a      	add	r2, r3
 800bf22:	4498      	add	r8, r3
 800bf24:	441e      	add	r6, r3
 800bf26:	9208      	str	r2, [sp, #32]
 800bf28:	e792      	b.n	800be50 <_dtoa_r+0x818>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	e7f6      	b.n	800bf1c <_dtoa_r+0x8e4>
 800bf2e:	9b07      	ldr	r3, [sp, #28]
 800bf30:	9704      	str	r7, [sp, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	dc20      	bgt.n	800bf78 <_dtoa_r+0x940>
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	dd1e      	ble.n	800bf7c <_dtoa_r+0x944>
 800bf3e:	9b00      	ldr	r3, [sp, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f47f aec0 	bne.w	800bcc6 <_dtoa_r+0x68e>
 800bf46:	4621      	mov	r1, r4
 800bf48:	2205      	movs	r2, #5
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f000 fa9a 	bl	800c484 <__multadd>
 800bf50:	4601      	mov	r1, r0
 800bf52:	4604      	mov	r4, r0
 800bf54:	4648      	mov	r0, r9
 800bf56:	f000 fcad 	bl	800c8b4 <__mcmp>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	f77f aeb3 	ble.w	800bcc6 <_dtoa_r+0x68e>
 800bf60:	4656      	mov	r6, sl
 800bf62:	2331      	movs	r3, #49	@ 0x31
 800bf64:	f806 3b01 	strb.w	r3, [r6], #1
 800bf68:	9b04      	ldr	r3, [sp, #16]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	e6ae      	b.n	800bcce <_dtoa_r+0x696>
 800bf70:	9c07      	ldr	r4, [sp, #28]
 800bf72:	9704      	str	r7, [sp, #16]
 800bf74:	4625      	mov	r5, r4
 800bf76:	e7f3      	b.n	800bf60 <_dtoa_r+0x928>
 800bf78:	9b07      	ldr	r3, [sp, #28]
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f000 8104 	beq.w	800c18c <_dtoa_r+0xb54>
 800bf84:	2e00      	cmp	r6, #0
 800bf86:	dd05      	ble.n	800bf94 <_dtoa_r+0x95c>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	4658      	mov	r0, fp
 800bf8e:	f000 fc25 	bl	800c7dc <__lshift>
 800bf92:	4605      	mov	r5, r0
 800bf94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d05a      	beq.n	800c050 <_dtoa_r+0xa18>
 800bf9a:	6869      	ldr	r1, [r5, #4]
 800bf9c:	4658      	mov	r0, fp
 800bf9e:	f000 fa0f 	bl	800c3c0 <_Balloc>
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	b928      	cbnz	r0, 800bfb2 <_dtoa_r+0x97a>
 800bfa6:	4b84      	ldr	r3, [pc, #528]	@ (800c1b8 <_dtoa_r+0xb80>)
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bfae:	f7ff bb5a 	b.w	800b666 <_dtoa_r+0x2e>
 800bfb2:	692a      	ldr	r2, [r5, #16]
 800bfb4:	3202      	adds	r2, #2
 800bfb6:	0092      	lsls	r2, r2, #2
 800bfb8:	f105 010c 	add.w	r1, r5, #12
 800bfbc:	300c      	adds	r0, #12
 800bfbe:	f7ff faa4 	bl	800b50a <memcpy>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4658      	mov	r0, fp
 800bfc8:	f000 fc08 	bl	800c7dc <__lshift>
 800bfcc:	f10a 0301 	add.w	r3, sl, #1
 800bfd0:	9307      	str	r3, [sp, #28]
 800bfd2:	9b00      	ldr	r3, [sp, #0]
 800bfd4:	4453      	add	r3, sl
 800bfd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfd8:	9b02      	ldr	r3, [sp, #8]
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	462f      	mov	r7, r5
 800bfe0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	4648      	mov	r0, r9
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	f7ff fa9a 	bl	800b526 <quorem>
 800bff2:	4639      	mov	r1, r7
 800bff4:	9002      	str	r0, [sp, #8]
 800bff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bffa:	4648      	mov	r0, r9
 800bffc:	f000 fc5a 	bl	800c8b4 <__mcmp>
 800c000:	462a      	mov	r2, r5
 800c002:	9008      	str	r0, [sp, #32]
 800c004:	4621      	mov	r1, r4
 800c006:	4658      	mov	r0, fp
 800c008:	f000 fc70 	bl	800c8ec <__mdiff>
 800c00c:	68c2      	ldr	r2, [r0, #12]
 800c00e:	4606      	mov	r6, r0
 800c010:	bb02      	cbnz	r2, 800c054 <_dtoa_r+0xa1c>
 800c012:	4601      	mov	r1, r0
 800c014:	4648      	mov	r0, r9
 800c016:	f000 fc4d 	bl	800c8b4 <__mcmp>
 800c01a:	4602      	mov	r2, r0
 800c01c:	4631      	mov	r1, r6
 800c01e:	4658      	mov	r0, fp
 800c020:	920e      	str	r2, [sp, #56]	@ 0x38
 800c022:	f000 fa0d 	bl	800c440 <_Bfree>
 800c026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c02a:	9e07      	ldr	r6, [sp, #28]
 800c02c:	ea43 0102 	orr.w	r1, r3, r2
 800c030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c032:	4319      	orrs	r1, r3
 800c034:	d110      	bne.n	800c058 <_dtoa_r+0xa20>
 800c036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c03a:	d029      	beq.n	800c090 <_dtoa_r+0xa58>
 800c03c:	9b08      	ldr	r3, [sp, #32]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	dd02      	ble.n	800c048 <_dtoa_r+0xa10>
 800c042:	9b02      	ldr	r3, [sp, #8]
 800c044:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	f883 8000 	strb.w	r8, [r3]
 800c04e:	e63f      	b.n	800bcd0 <_dtoa_r+0x698>
 800c050:	4628      	mov	r0, r5
 800c052:	e7bb      	b.n	800bfcc <_dtoa_r+0x994>
 800c054:	2201      	movs	r2, #1
 800c056:	e7e1      	b.n	800c01c <_dtoa_r+0x9e4>
 800c058:	9b08      	ldr	r3, [sp, #32]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	db04      	blt.n	800c068 <_dtoa_r+0xa30>
 800c05e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c060:	430b      	orrs	r3, r1
 800c062:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c064:	430b      	orrs	r3, r1
 800c066:	d120      	bne.n	800c0aa <_dtoa_r+0xa72>
 800c068:	2a00      	cmp	r2, #0
 800c06a:	dded      	ble.n	800c048 <_dtoa_r+0xa10>
 800c06c:	4649      	mov	r1, r9
 800c06e:	2201      	movs	r2, #1
 800c070:	4658      	mov	r0, fp
 800c072:	f000 fbb3 	bl	800c7dc <__lshift>
 800c076:	4621      	mov	r1, r4
 800c078:	4681      	mov	r9, r0
 800c07a:	f000 fc1b 	bl	800c8b4 <__mcmp>
 800c07e:	2800      	cmp	r0, #0
 800c080:	dc03      	bgt.n	800c08a <_dtoa_r+0xa52>
 800c082:	d1e1      	bne.n	800c048 <_dtoa_r+0xa10>
 800c084:	f018 0f01 	tst.w	r8, #1
 800c088:	d0de      	beq.n	800c048 <_dtoa_r+0xa10>
 800c08a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c08e:	d1d8      	bne.n	800c042 <_dtoa_r+0xa0a>
 800c090:	9a00      	ldr	r2, [sp, #0]
 800c092:	2339      	movs	r3, #57	@ 0x39
 800c094:	7013      	strb	r3, [r2, #0]
 800c096:	4633      	mov	r3, r6
 800c098:	461e      	mov	r6, r3
 800c09a:	3b01      	subs	r3, #1
 800c09c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0a0:	2a39      	cmp	r2, #57	@ 0x39
 800c0a2:	d052      	beq.n	800c14a <_dtoa_r+0xb12>
 800c0a4:	3201      	adds	r2, #1
 800c0a6:	701a      	strb	r2, [r3, #0]
 800c0a8:	e612      	b.n	800bcd0 <_dtoa_r+0x698>
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	dd07      	ble.n	800c0be <_dtoa_r+0xa86>
 800c0ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0b2:	d0ed      	beq.n	800c090 <_dtoa_r+0xa58>
 800c0b4:	9a00      	ldr	r2, [sp, #0]
 800c0b6:	f108 0301 	add.w	r3, r8, #1
 800c0ba:	7013      	strb	r3, [r2, #0]
 800c0bc:	e608      	b.n	800bcd0 <_dtoa_r+0x698>
 800c0be:	9b07      	ldr	r3, [sp, #28]
 800c0c0:	9a07      	ldr	r2, [sp, #28]
 800c0c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d028      	beq.n	800c11e <_dtoa_r+0xae6>
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	220a      	movs	r2, #10
 800c0d2:	4658      	mov	r0, fp
 800c0d4:	f000 f9d6 	bl	800c484 <__multadd>
 800c0d8:	42af      	cmp	r7, r5
 800c0da:	4681      	mov	r9, r0
 800c0dc:	f04f 0300 	mov.w	r3, #0
 800c0e0:	f04f 020a 	mov.w	r2, #10
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	d107      	bne.n	800c0fa <_dtoa_r+0xac2>
 800c0ea:	f000 f9cb 	bl	800c484 <__multadd>
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	9b07      	ldr	r3, [sp, #28]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	9307      	str	r3, [sp, #28]
 800c0f8:	e774      	b.n	800bfe4 <_dtoa_r+0x9ac>
 800c0fa:	f000 f9c3 	bl	800c484 <__multadd>
 800c0fe:	4629      	mov	r1, r5
 800c100:	4607      	mov	r7, r0
 800c102:	2300      	movs	r3, #0
 800c104:	220a      	movs	r2, #10
 800c106:	4658      	mov	r0, fp
 800c108:	f000 f9bc 	bl	800c484 <__multadd>
 800c10c:	4605      	mov	r5, r0
 800c10e:	e7f0      	b.n	800c0f2 <_dtoa_r+0xaba>
 800c110:	9b00      	ldr	r3, [sp, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	bfcc      	ite	gt
 800c116:	461e      	movgt	r6, r3
 800c118:	2601      	movle	r6, #1
 800c11a:	4456      	add	r6, sl
 800c11c:	2700      	movs	r7, #0
 800c11e:	4649      	mov	r1, r9
 800c120:	2201      	movs	r2, #1
 800c122:	4658      	mov	r0, fp
 800c124:	f000 fb5a 	bl	800c7dc <__lshift>
 800c128:	4621      	mov	r1, r4
 800c12a:	4681      	mov	r9, r0
 800c12c:	f000 fbc2 	bl	800c8b4 <__mcmp>
 800c130:	2800      	cmp	r0, #0
 800c132:	dcb0      	bgt.n	800c096 <_dtoa_r+0xa5e>
 800c134:	d102      	bne.n	800c13c <_dtoa_r+0xb04>
 800c136:	f018 0f01 	tst.w	r8, #1
 800c13a:	d1ac      	bne.n	800c096 <_dtoa_r+0xa5e>
 800c13c:	4633      	mov	r3, r6
 800c13e:	461e      	mov	r6, r3
 800c140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c144:	2a30      	cmp	r2, #48	@ 0x30
 800c146:	d0fa      	beq.n	800c13e <_dtoa_r+0xb06>
 800c148:	e5c2      	b.n	800bcd0 <_dtoa_r+0x698>
 800c14a:	459a      	cmp	sl, r3
 800c14c:	d1a4      	bne.n	800c098 <_dtoa_r+0xa60>
 800c14e:	9b04      	ldr	r3, [sp, #16]
 800c150:	3301      	adds	r3, #1
 800c152:	9304      	str	r3, [sp, #16]
 800c154:	2331      	movs	r3, #49	@ 0x31
 800c156:	f88a 3000 	strb.w	r3, [sl]
 800c15a:	e5b9      	b.n	800bcd0 <_dtoa_r+0x698>
 800c15c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c15e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c1bc <_dtoa_r+0xb84>
 800c162:	b11b      	cbz	r3, 800c16c <_dtoa_r+0xb34>
 800c164:	f10a 0308 	add.w	r3, sl, #8
 800c168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c16a:	6013      	str	r3, [r2, #0]
 800c16c:	4650      	mov	r0, sl
 800c16e:	b019      	add	sp, #100	@ 0x64
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c176:	2b01      	cmp	r3, #1
 800c178:	f77f ae37 	ble.w	800bdea <_dtoa_r+0x7b2>
 800c17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c180:	2001      	movs	r0, #1
 800c182:	e655      	b.n	800be30 <_dtoa_r+0x7f8>
 800c184:	9b00      	ldr	r3, [sp, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f77f aed6 	ble.w	800bf38 <_dtoa_r+0x900>
 800c18c:	4656      	mov	r6, sl
 800c18e:	4621      	mov	r1, r4
 800c190:	4648      	mov	r0, r9
 800c192:	f7ff f9c8 	bl	800b526 <quorem>
 800c196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c19a:	f806 8b01 	strb.w	r8, [r6], #1
 800c19e:	9b00      	ldr	r3, [sp, #0]
 800c1a0:	eba6 020a 	sub.w	r2, r6, sl
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	ddb3      	ble.n	800c110 <_dtoa_r+0xad8>
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	220a      	movs	r2, #10
 800c1ae:	4658      	mov	r0, fp
 800c1b0:	f000 f968 	bl	800c484 <__multadd>
 800c1b4:	4681      	mov	r9, r0
 800c1b6:	e7ea      	b.n	800c18e <_dtoa_r+0xb56>
 800c1b8:	0800d708 	.word	0x0800d708
 800c1bc:	0800d68c 	.word	0x0800d68c

0800c1c0 <_free_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	2900      	cmp	r1, #0
 800c1c6:	d041      	beq.n	800c24c <_free_r+0x8c>
 800c1c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1cc:	1f0c      	subs	r4, r1, #4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bfb8      	it	lt
 800c1d2:	18e4      	addlt	r4, r4, r3
 800c1d4:	f000 f8e8 	bl	800c3a8 <__malloc_lock>
 800c1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c250 <_free_r+0x90>)
 800c1da:	6813      	ldr	r3, [r2, #0]
 800c1dc:	b933      	cbnz	r3, 800c1ec <_free_r+0x2c>
 800c1de:	6063      	str	r3, [r4, #4]
 800c1e0:	6014      	str	r4, [r2, #0]
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1e8:	f000 b8e4 	b.w	800c3b4 <__malloc_unlock>
 800c1ec:	42a3      	cmp	r3, r4
 800c1ee:	d908      	bls.n	800c202 <_free_r+0x42>
 800c1f0:	6820      	ldr	r0, [r4, #0]
 800c1f2:	1821      	adds	r1, r4, r0
 800c1f4:	428b      	cmp	r3, r1
 800c1f6:	bf01      	itttt	eq
 800c1f8:	6819      	ldreq	r1, [r3, #0]
 800c1fa:	685b      	ldreq	r3, [r3, #4]
 800c1fc:	1809      	addeq	r1, r1, r0
 800c1fe:	6021      	streq	r1, [r4, #0]
 800c200:	e7ed      	b.n	800c1de <_free_r+0x1e>
 800c202:	461a      	mov	r2, r3
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	b10b      	cbz	r3, 800c20c <_free_r+0x4c>
 800c208:	42a3      	cmp	r3, r4
 800c20a:	d9fa      	bls.n	800c202 <_free_r+0x42>
 800c20c:	6811      	ldr	r1, [r2, #0]
 800c20e:	1850      	adds	r0, r2, r1
 800c210:	42a0      	cmp	r0, r4
 800c212:	d10b      	bne.n	800c22c <_free_r+0x6c>
 800c214:	6820      	ldr	r0, [r4, #0]
 800c216:	4401      	add	r1, r0
 800c218:	1850      	adds	r0, r2, r1
 800c21a:	4283      	cmp	r3, r0
 800c21c:	6011      	str	r1, [r2, #0]
 800c21e:	d1e0      	bne.n	800c1e2 <_free_r+0x22>
 800c220:	6818      	ldr	r0, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	6053      	str	r3, [r2, #4]
 800c226:	4408      	add	r0, r1
 800c228:	6010      	str	r0, [r2, #0]
 800c22a:	e7da      	b.n	800c1e2 <_free_r+0x22>
 800c22c:	d902      	bls.n	800c234 <_free_r+0x74>
 800c22e:	230c      	movs	r3, #12
 800c230:	602b      	str	r3, [r5, #0]
 800c232:	e7d6      	b.n	800c1e2 <_free_r+0x22>
 800c234:	6820      	ldr	r0, [r4, #0]
 800c236:	1821      	adds	r1, r4, r0
 800c238:	428b      	cmp	r3, r1
 800c23a:	bf04      	itt	eq
 800c23c:	6819      	ldreq	r1, [r3, #0]
 800c23e:	685b      	ldreq	r3, [r3, #4]
 800c240:	6063      	str	r3, [r4, #4]
 800c242:	bf04      	itt	eq
 800c244:	1809      	addeq	r1, r1, r0
 800c246:	6021      	streq	r1, [r4, #0]
 800c248:	6054      	str	r4, [r2, #4]
 800c24a:	e7ca      	b.n	800c1e2 <_free_r+0x22>
 800c24c:	bd38      	pop	{r3, r4, r5, pc}
 800c24e:	bf00      	nop
 800c250:	20001efc 	.word	0x20001efc

0800c254 <malloc>:
 800c254:	4b02      	ldr	r3, [pc, #8]	@ (800c260 <malloc+0xc>)
 800c256:	4601      	mov	r1, r0
 800c258:	6818      	ldr	r0, [r3, #0]
 800c25a:	f000 b825 	b.w	800c2a8 <_malloc_r>
 800c25e:	bf00      	nop
 800c260:	2000001c 	.word	0x2000001c

0800c264 <sbrk_aligned>:
 800c264:	b570      	push	{r4, r5, r6, lr}
 800c266:	4e0f      	ldr	r6, [pc, #60]	@ (800c2a4 <sbrk_aligned+0x40>)
 800c268:	460c      	mov	r4, r1
 800c26a:	6831      	ldr	r1, [r6, #0]
 800c26c:	4605      	mov	r5, r0
 800c26e:	b911      	cbnz	r1, 800c276 <sbrk_aligned+0x12>
 800c270:	f000 fe46 	bl	800cf00 <_sbrk_r>
 800c274:	6030      	str	r0, [r6, #0]
 800c276:	4621      	mov	r1, r4
 800c278:	4628      	mov	r0, r5
 800c27a:	f000 fe41 	bl	800cf00 <_sbrk_r>
 800c27e:	1c43      	adds	r3, r0, #1
 800c280:	d103      	bne.n	800c28a <sbrk_aligned+0x26>
 800c282:	f04f 34ff 	mov.w	r4, #4294967295
 800c286:	4620      	mov	r0, r4
 800c288:	bd70      	pop	{r4, r5, r6, pc}
 800c28a:	1cc4      	adds	r4, r0, #3
 800c28c:	f024 0403 	bic.w	r4, r4, #3
 800c290:	42a0      	cmp	r0, r4
 800c292:	d0f8      	beq.n	800c286 <sbrk_aligned+0x22>
 800c294:	1a21      	subs	r1, r4, r0
 800c296:	4628      	mov	r0, r5
 800c298:	f000 fe32 	bl	800cf00 <_sbrk_r>
 800c29c:	3001      	adds	r0, #1
 800c29e:	d1f2      	bne.n	800c286 <sbrk_aligned+0x22>
 800c2a0:	e7ef      	b.n	800c282 <sbrk_aligned+0x1e>
 800c2a2:	bf00      	nop
 800c2a4:	20001ef8 	.word	0x20001ef8

0800c2a8 <_malloc_r>:
 800c2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2ac:	1ccd      	adds	r5, r1, #3
 800c2ae:	f025 0503 	bic.w	r5, r5, #3
 800c2b2:	3508      	adds	r5, #8
 800c2b4:	2d0c      	cmp	r5, #12
 800c2b6:	bf38      	it	cc
 800c2b8:	250c      	movcc	r5, #12
 800c2ba:	2d00      	cmp	r5, #0
 800c2bc:	4606      	mov	r6, r0
 800c2be:	db01      	blt.n	800c2c4 <_malloc_r+0x1c>
 800c2c0:	42a9      	cmp	r1, r5
 800c2c2:	d904      	bls.n	800c2ce <_malloc_r+0x26>
 800c2c4:	230c      	movs	r3, #12
 800c2c6:	6033      	str	r3, [r6, #0]
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3a4 <_malloc_r+0xfc>
 800c2d2:	f000 f869 	bl	800c3a8 <__malloc_lock>
 800c2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c2da:	461c      	mov	r4, r3
 800c2dc:	bb44      	cbnz	r4, 800c330 <_malloc_r+0x88>
 800c2de:	4629      	mov	r1, r5
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff ffbf 	bl	800c264 <sbrk_aligned>
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	d158      	bne.n	800c39e <_malloc_r+0xf6>
 800c2ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c2f0:	4627      	mov	r7, r4
 800c2f2:	2f00      	cmp	r7, #0
 800c2f4:	d143      	bne.n	800c37e <_malloc_r+0xd6>
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	d04b      	beq.n	800c392 <_malloc_r+0xea>
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4630      	mov	r0, r6
 800c300:	eb04 0903 	add.w	r9, r4, r3
 800c304:	f000 fdfc 	bl	800cf00 <_sbrk_r>
 800c308:	4581      	cmp	r9, r0
 800c30a:	d142      	bne.n	800c392 <_malloc_r+0xea>
 800c30c:	6821      	ldr	r1, [r4, #0]
 800c30e:	1a6d      	subs	r5, r5, r1
 800c310:	4629      	mov	r1, r5
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff ffa6 	bl	800c264 <sbrk_aligned>
 800c318:	3001      	adds	r0, #1
 800c31a:	d03a      	beq.n	800c392 <_malloc_r+0xea>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	442b      	add	r3, r5
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	f8d8 3000 	ldr.w	r3, [r8]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	bb62      	cbnz	r2, 800c384 <_malloc_r+0xdc>
 800c32a:	f8c8 7000 	str.w	r7, [r8]
 800c32e:	e00f      	b.n	800c350 <_malloc_r+0xa8>
 800c330:	6822      	ldr	r2, [r4, #0]
 800c332:	1b52      	subs	r2, r2, r5
 800c334:	d420      	bmi.n	800c378 <_malloc_r+0xd0>
 800c336:	2a0b      	cmp	r2, #11
 800c338:	d917      	bls.n	800c36a <_malloc_r+0xc2>
 800c33a:	1961      	adds	r1, r4, r5
 800c33c:	42a3      	cmp	r3, r4
 800c33e:	6025      	str	r5, [r4, #0]
 800c340:	bf18      	it	ne
 800c342:	6059      	strne	r1, [r3, #4]
 800c344:	6863      	ldr	r3, [r4, #4]
 800c346:	bf08      	it	eq
 800c348:	f8c8 1000 	streq.w	r1, [r8]
 800c34c:	5162      	str	r2, [r4, r5]
 800c34e:	604b      	str	r3, [r1, #4]
 800c350:	4630      	mov	r0, r6
 800c352:	f000 f82f 	bl	800c3b4 <__malloc_unlock>
 800c356:	f104 000b 	add.w	r0, r4, #11
 800c35a:	1d23      	adds	r3, r4, #4
 800c35c:	f020 0007 	bic.w	r0, r0, #7
 800c360:	1ac2      	subs	r2, r0, r3
 800c362:	bf1c      	itt	ne
 800c364:	1a1b      	subne	r3, r3, r0
 800c366:	50a3      	strne	r3, [r4, r2]
 800c368:	e7af      	b.n	800c2ca <_malloc_r+0x22>
 800c36a:	6862      	ldr	r2, [r4, #4]
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	bf0c      	ite	eq
 800c370:	f8c8 2000 	streq.w	r2, [r8]
 800c374:	605a      	strne	r2, [r3, #4]
 800c376:	e7eb      	b.n	800c350 <_malloc_r+0xa8>
 800c378:	4623      	mov	r3, r4
 800c37a:	6864      	ldr	r4, [r4, #4]
 800c37c:	e7ae      	b.n	800c2dc <_malloc_r+0x34>
 800c37e:	463c      	mov	r4, r7
 800c380:	687f      	ldr	r7, [r7, #4]
 800c382:	e7b6      	b.n	800c2f2 <_malloc_r+0x4a>
 800c384:	461a      	mov	r2, r3
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	42a3      	cmp	r3, r4
 800c38a:	d1fb      	bne.n	800c384 <_malloc_r+0xdc>
 800c38c:	2300      	movs	r3, #0
 800c38e:	6053      	str	r3, [r2, #4]
 800c390:	e7de      	b.n	800c350 <_malloc_r+0xa8>
 800c392:	230c      	movs	r3, #12
 800c394:	6033      	str	r3, [r6, #0]
 800c396:	4630      	mov	r0, r6
 800c398:	f000 f80c 	bl	800c3b4 <__malloc_unlock>
 800c39c:	e794      	b.n	800c2c8 <_malloc_r+0x20>
 800c39e:	6005      	str	r5, [r0, #0]
 800c3a0:	e7d6      	b.n	800c350 <_malloc_r+0xa8>
 800c3a2:	bf00      	nop
 800c3a4:	20001efc 	.word	0x20001efc

0800c3a8 <__malloc_lock>:
 800c3a8:	4801      	ldr	r0, [pc, #4]	@ (800c3b0 <__malloc_lock+0x8>)
 800c3aa:	f7ff b8ac 	b.w	800b506 <__retarget_lock_acquire_recursive>
 800c3ae:	bf00      	nop
 800c3b0:	20001ef4 	.word	0x20001ef4

0800c3b4 <__malloc_unlock>:
 800c3b4:	4801      	ldr	r0, [pc, #4]	@ (800c3bc <__malloc_unlock+0x8>)
 800c3b6:	f7ff b8a7 	b.w	800b508 <__retarget_lock_release_recursive>
 800c3ba:	bf00      	nop
 800c3bc:	20001ef4 	.word	0x20001ef4

0800c3c0 <_Balloc>:
 800c3c0:	b570      	push	{r4, r5, r6, lr}
 800c3c2:	69c6      	ldr	r6, [r0, #28]
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	460d      	mov	r5, r1
 800c3c8:	b976      	cbnz	r6, 800c3e8 <_Balloc+0x28>
 800c3ca:	2010      	movs	r0, #16
 800c3cc:	f7ff ff42 	bl	800c254 <malloc>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	61e0      	str	r0, [r4, #28]
 800c3d4:	b920      	cbnz	r0, 800c3e0 <_Balloc+0x20>
 800c3d6:	4b18      	ldr	r3, [pc, #96]	@ (800c438 <_Balloc+0x78>)
 800c3d8:	4818      	ldr	r0, [pc, #96]	@ (800c43c <_Balloc+0x7c>)
 800c3da:	216b      	movs	r1, #107	@ 0x6b
 800c3dc:	f000 fda0 	bl	800cf20 <__assert_func>
 800c3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e4:	6006      	str	r6, [r0, #0]
 800c3e6:	60c6      	str	r6, [r0, #12]
 800c3e8:	69e6      	ldr	r6, [r4, #28]
 800c3ea:	68f3      	ldr	r3, [r6, #12]
 800c3ec:	b183      	cbz	r3, 800c410 <_Balloc+0x50>
 800c3ee:	69e3      	ldr	r3, [r4, #28]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3f6:	b9b8      	cbnz	r0, 800c428 <_Balloc+0x68>
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	fa01 f605 	lsl.w	r6, r1, r5
 800c3fe:	1d72      	adds	r2, r6, #5
 800c400:	0092      	lsls	r2, r2, #2
 800c402:	4620      	mov	r0, r4
 800c404:	f000 fdaa 	bl	800cf5c <_calloc_r>
 800c408:	b160      	cbz	r0, 800c424 <_Balloc+0x64>
 800c40a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c40e:	e00e      	b.n	800c42e <_Balloc+0x6e>
 800c410:	2221      	movs	r2, #33	@ 0x21
 800c412:	2104      	movs	r1, #4
 800c414:	4620      	mov	r0, r4
 800c416:	f000 fda1 	bl	800cf5c <_calloc_r>
 800c41a:	69e3      	ldr	r3, [r4, #28]
 800c41c:	60f0      	str	r0, [r6, #12]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e4      	bne.n	800c3ee <_Balloc+0x2e>
 800c424:	2000      	movs	r0, #0
 800c426:	bd70      	pop	{r4, r5, r6, pc}
 800c428:	6802      	ldr	r2, [r0, #0]
 800c42a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c42e:	2300      	movs	r3, #0
 800c430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c434:	e7f7      	b.n	800c426 <_Balloc+0x66>
 800c436:	bf00      	nop
 800c438:	0800d699 	.word	0x0800d699
 800c43c:	0800d719 	.word	0x0800d719

0800c440 <_Bfree>:
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	69c6      	ldr	r6, [r0, #28]
 800c444:	4605      	mov	r5, r0
 800c446:	460c      	mov	r4, r1
 800c448:	b976      	cbnz	r6, 800c468 <_Bfree+0x28>
 800c44a:	2010      	movs	r0, #16
 800c44c:	f7ff ff02 	bl	800c254 <malloc>
 800c450:	4602      	mov	r2, r0
 800c452:	61e8      	str	r0, [r5, #28]
 800c454:	b920      	cbnz	r0, 800c460 <_Bfree+0x20>
 800c456:	4b09      	ldr	r3, [pc, #36]	@ (800c47c <_Bfree+0x3c>)
 800c458:	4809      	ldr	r0, [pc, #36]	@ (800c480 <_Bfree+0x40>)
 800c45a:	218f      	movs	r1, #143	@ 0x8f
 800c45c:	f000 fd60 	bl	800cf20 <__assert_func>
 800c460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c464:	6006      	str	r6, [r0, #0]
 800c466:	60c6      	str	r6, [r0, #12]
 800c468:	b13c      	cbz	r4, 800c47a <_Bfree+0x3a>
 800c46a:	69eb      	ldr	r3, [r5, #28]
 800c46c:	6862      	ldr	r2, [r4, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c474:	6021      	str	r1, [r4, #0]
 800c476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	0800d699 	.word	0x0800d699
 800c480:	0800d719 	.word	0x0800d719

0800c484 <__multadd>:
 800c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c488:	690d      	ldr	r5, [r1, #16]
 800c48a:	4607      	mov	r7, r0
 800c48c:	460c      	mov	r4, r1
 800c48e:	461e      	mov	r6, r3
 800c490:	f101 0c14 	add.w	ip, r1, #20
 800c494:	2000      	movs	r0, #0
 800c496:	f8dc 3000 	ldr.w	r3, [ip]
 800c49a:	b299      	uxth	r1, r3
 800c49c:	fb02 6101 	mla	r1, r2, r1, r6
 800c4a0:	0c1e      	lsrs	r6, r3, #16
 800c4a2:	0c0b      	lsrs	r3, r1, #16
 800c4a4:	fb02 3306 	mla	r3, r2, r6, r3
 800c4a8:	b289      	uxth	r1, r1
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4b0:	4285      	cmp	r5, r0
 800c4b2:	f84c 1b04 	str.w	r1, [ip], #4
 800c4b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4ba:	dcec      	bgt.n	800c496 <__multadd+0x12>
 800c4bc:	b30e      	cbz	r6, 800c502 <__multadd+0x7e>
 800c4be:	68a3      	ldr	r3, [r4, #8]
 800c4c0:	42ab      	cmp	r3, r5
 800c4c2:	dc19      	bgt.n	800c4f8 <__multadd+0x74>
 800c4c4:	6861      	ldr	r1, [r4, #4]
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	3101      	adds	r1, #1
 800c4ca:	f7ff ff79 	bl	800c3c0 <_Balloc>
 800c4ce:	4680      	mov	r8, r0
 800c4d0:	b928      	cbnz	r0, 800c4de <__multadd+0x5a>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c508 <__multadd+0x84>)
 800c4d6:	480d      	ldr	r0, [pc, #52]	@ (800c50c <__multadd+0x88>)
 800c4d8:	21ba      	movs	r1, #186	@ 0xba
 800c4da:	f000 fd21 	bl	800cf20 <__assert_func>
 800c4de:	6922      	ldr	r2, [r4, #16]
 800c4e0:	3202      	adds	r2, #2
 800c4e2:	f104 010c 	add.w	r1, r4, #12
 800c4e6:	0092      	lsls	r2, r2, #2
 800c4e8:	300c      	adds	r0, #12
 800c4ea:	f7ff f80e 	bl	800b50a <memcpy>
 800c4ee:	4621      	mov	r1, r4
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	f7ff ffa5 	bl	800c440 <_Bfree>
 800c4f6:	4644      	mov	r4, r8
 800c4f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4fc:	3501      	adds	r5, #1
 800c4fe:	615e      	str	r6, [r3, #20]
 800c500:	6125      	str	r5, [r4, #16]
 800c502:	4620      	mov	r0, r4
 800c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c508:	0800d708 	.word	0x0800d708
 800c50c:	0800d719 	.word	0x0800d719

0800c510 <__hi0bits>:
 800c510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c514:	4603      	mov	r3, r0
 800c516:	bf36      	itet	cc
 800c518:	0403      	lslcc	r3, r0, #16
 800c51a:	2000      	movcs	r0, #0
 800c51c:	2010      	movcc	r0, #16
 800c51e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c522:	bf3c      	itt	cc
 800c524:	021b      	lslcc	r3, r3, #8
 800c526:	3008      	addcc	r0, #8
 800c528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c52c:	bf3c      	itt	cc
 800c52e:	011b      	lslcc	r3, r3, #4
 800c530:	3004      	addcc	r0, #4
 800c532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c536:	bf3c      	itt	cc
 800c538:	009b      	lslcc	r3, r3, #2
 800c53a:	3002      	addcc	r0, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	db05      	blt.n	800c54c <__hi0bits+0x3c>
 800c540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c544:	f100 0001 	add.w	r0, r0, #1
 800c548:	bf08      	it	eq
 800c54a:	2020      	moveq	r0, #32
 800c54c:	4770      	bx	lr

0800c54e <__lo0bits>:
 800c54e:	6803      	ldr	r3, [r0, #0]
 800c550:	4602      	mov	r2, r0
 800c552:	f013 0007 	ands.w	r0, r3, #7
 800c556:	d00b      	beq.n	800c570 <__lo0bits+0x22>
 800c558:	07d9      	lsls	r1, r3, #31
 800c55a:	d421      	bmi.n	800c5a0 <__lo0bits+0x52>
 800c55c:	0798      	lsls	r0, r3, #30
 800c55e:	bf49      	itett	mi
 800c560:	085b      	lsrmi	r3, r3, #1
 800c562:	089b      	lsrpl	r3, r3, #2
 800c564:	2001      	movmi	r0, #1
 800c566:	6013      	strmi	r3, [r2, #0]
 800c568:	bf5c      	itt	pl
 800c56a:	6013      	strpl	r3, [r2, #0]
 800c56c:	2002      	movpl	r0, #2
 800c56e:	4770      	bx	lr
 800c570:	b299      	uxth	r1, r3
 800c572:	b909      	cbnz	r1, 800c578 <__lo0bits+0x2a>
 800c574:	0c1b      	lsrs	r3, r3, #16
 800c576:	2010      	movs	r0, #16
 800c578:	b2d9      	uxtb	r1, r3
 800c57a:	b909      	cbnz	r1, 800c580 <__lo0bits+0x32>
 800c57c:	3008      	adds	r0, #8
 800c57e:	0a1b      	lsrs	r3, r3, #8
 800c580:	0719      	lsls	r1, r3, #28
 800c582:	bf04      	itt	eq
 800c584:	091b      	lsreq	r3, r3, #4
 800c586:	3004      	addeq	r0, #4
 800c588:	0799      	lsls	r1, r3, #30
 800c58a:	bf04      	itt	eq
 800c58c:	089b      	lsreq	r3, r3, #2
 800c58e:	3002      	addeq	r0, #2
 800c590:	07d9      	lsls	r1, r3, #31
 800c592:	d403      	bmi.n	800c59c <__lo0bits+0x4e>
 800c594:	085b      	lsrs	r3, r3, #1
 800c596:	f100 0001 	add.w	r0, r0, #1
 800c59a:	d003      	beq.n	800c5a4 <__lo0bits+0x56>
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	4770      	bx	lr
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	4770      	bx	lr
 800c5a4:	2020      	movs	r0, #32
 800c5a6:	4770      	bx	lr

0800c5a8 <__i2b>:
 800c5a8:	b510      	push	{r4, lr}
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	f7ff ff07 	bl	800c3c0 <_Balloc>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	b928      	cbnz	r0, 800c5c2 <__i2b+0x1a>
 800c5b6:	4b05      	ldr	r3, [pc, #20]	@ (800c5cc <__i2b+0x24>)
 800c5b8:	4805      	ldr	r0, [pc, #20]	@ (800c5d0 <__i2b+0x28>)
 800c5ba:	f240 1145 	movw	r1, #325	@ 0x145
 800c5be:	f000 fcaf 	bl	800cf20 <__assert_func>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	6144      	str	r4, [r0, #20]
 800c5c6:	6103      	str	r3, [r0, #16]
 800c5c8:	bd10      	pop	{r4, pc}
 800c5ca:	bf00      	nop
 800c5cc:	0800d708 	.word	0x0800d708
 800c5d0:	0800d719 	.word	0x0800d719

0800c5d4 <__multiply>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	4614      	mov	r4, r2
 800c5da:	690a      	ldr	r2, [r1, #16]
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	bfa8      	it	ge
 800c5e2:	4623      	movge	r3, r4
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	bfa4      	itt	ge
 800c5e8:	460c      	movge	r4, r1
 800c5ea:	461f      	movge	r7, r3
 800c5ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c5f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c5f4:	68a3      	ldr	r3, [r4, #8]
 800c5f6:	6861      	ldr	r1, [r4, #4]
 800c5f8:	eb0a 0609 	add.w	r6, sl, r9
 800c5fc:	42b3      	cmp	r3, r6
 800c5fe:	b085      	sub	sp, #20
 800c600:	bfb8      	it	lt
 800c602:	3101      	addlt	r1, #1
 800c604:	f7ff fedc 	bl	800c3c0 <_Balloc>
 800c608:	b930      	cbnz	r0, 800c618 <__multiply+0x44>
 800c60a:	4602      	mov	r2, r0
 800c60c:	4b44      	ldr	r3, [pc, #272]	@ (800c720 <__multiply+0x14c>)
 800c60e:	4845      	ldr	r0, [pc, #276]	@ (800c724 <__multiply+0x150>)
 800c610:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c614:	f000 fc84 	bl	800cf20 <__assert_func>
 800c618:	f100 0514 	add.w	r5, r0, #20
 800c61c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c620:	462b      	mov	r3, r5
 800c622:	2200      	movs	r2, #0
 800c624:	4543      	cmp	r3, r8
 800c626:	d321      	bcc.n	800c66c <__multiply+0x98>
 800c628:	f107 0114 	add.w	r1, r7, #20
 800c62c:	f104 0214 	add.w	r2, r4, #20
 800c630:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c634:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	1b13      	subs	r3, r2, r4
 800c63c:	3b15      	subs	r3, #21
 800c63e:	f023 0303 	bic.w	r3, r3, #3
 800c642:	3304      	adds	r3, #4
 800c644:	f104 0715 	add.w	r7, r4, #21
 800c648:	42ba      	cmp	r2, r7
 800c64a:	bf38      	it	cc
 800c64c:	2304      	movcc	r3, #4
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	9103      	str	r1, [sp, #12]
 800c654:	428b      	cmp	r3, r1
 800c656:	d80c      	bhi.n	800c672 <__multiply+0x9e>
 800c658:	2e00      	cmp	r6, #0
 800c65a:	dd03      	ble.n	800c664 <__multiply+0x90>
 800c65c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c660:	2b00      	cmp	r3, #0
 800c662:	d05b      	beq.n	800c71c <__multiply+0x148>
 800c664:	6106      	str	r6, [r0, #16]
 800c666:	b005      	add	sp, #20
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66c:	f843 2b04 	str.w	r2, [r3], #4
 800c670:	e7d8      	b.n	800c624 <__multiply+0x50>
 800c672:	f8b1 a000 	ldrh.w	sl, [r1]
 800c676:	f1ba 0f00 	cmp.w	sl, #0
 800c67a:	d024      	beq.n	800c6c6 <__multiply+0xf2>
 800c67c:	f104 0e14 	add.w	lr, r4, #20
 800c680:	46a9      	mov	r9, r5
 800c682:	f04f 0c00 	mov.w	ip, #0
 800c686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c68a:	f8d9 3000 	ldr.w	r3, [r9]
 800c68e:	fa1f fb87 	uxth.w	fp, r7
 800c692:	b29b      	uxth	r3, r3
 800c694:	fb0a 330b 	mla	r3, sl, fp, r3
 800c698:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c69c:	f8d9 7000 	ldr.w	r7, [r9]
 800c6a0:	4463      	add	r3, ip
 800c6a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c6aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6b4:	4572      	cmp	r2, lr
 800c6b6:	f849 3b04 	str.w	r3, [r9], #4
 800c6ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c6be:	d8e2      	bhi.n	800c686 <__multiply+0xb2>
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	f845 c003 	str.w	ip, [r5, r3]
 800c6c6:	9b03      	ldr	r3, [sp, #12]
 800c6c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6cc:	3104      	adds	r1, #4
 800c6ce:	f1b9 0f00 	cmp.w	r9, #0
 800c6d2:	d021      	beq.n	800c718 <__multiply+0x144>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	f104 0c14 	add.w	ip, r4, #20
 800c6da:	46ae      	mov	lr, r5
 800c6dc:	f04f 0a00 	mov.w	sl, #0
 800c6e0:	f8bc b000 	ldrh.w	fp, [ip]
 800c6e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c6e8:	fb09 770b 	mla	r7, r9, fp, r7
 800c6ec:	4457      	add	r7, sl
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c6f4:	f84e 3b04 	str.w	r3, [lr], #4
 800c6f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c6fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c700:	f8be 3000 	ldrh.w	r3, [lr]
 800c704:	fb09 330a 	mla	r3, r9, sl, r3
 800c708:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c70c:	4562      	cmp	r2, ip
 800c70e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c712:	d8e5      	bhi.n	800c6e0 <__multiply+0x10c>
 800c714:	9f01      	ldr	r7, [sp, #4]
 800c716:	51eb      	str	r3, [r5, r7]
 800c718:	3504      	adds	r5, #4
 800c71a:	e799      	b.n	800c650 <__multiply+0x7c>
 800c71c:	3e01      	subs	r6, #1
 800c71e:	e79b      	b.n	800c658 <__multiply+0x84>
 800c720:	0800d708 	.word	0x0800d708
 800c724:	0800d719 	.word	0x0800d719

0800c728 <__pow5mult>:
 800c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c72c:	4615      	mov	r5, r2
 800c72e:	f012 0203 	ands.w	r2, r2, #3
 800c732:	4607      	mov	r7, r0
 800c734:	460e      	mov	r6, r1
 800c736:	d007      	beq.n	800c748 <__pow5mult+0x20>
 800c738:	4c25      	ldr	r4, [pc, #148]	@ (800c7d0 <__pow5mult+0xa8>)
 800c73a:	3a01      	subs	r2, #1
 800c73c:	2300      	movs	r3, #0
 800c73e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c742:	f7ff fe9f 	bl	800c484 <__multadd>
 800c746:	4606      	mov	r6, r0
 800c748:	10ad      	asrs	r5, r5, #2
 800c74a:	d03d      	beq.n	800c7c8 <__pow5mult+0xa0>
 800c74c:	69fc      	ldr	r4, [r7, #28]
 800c74e:	b97c      	cbnz	r4, 800c770 <__pow5mult+0x48>
 800c750:	2010      	movs	r0, #16
 800c752:	f7ff fd7f 	bl	800c254 <malloc>
 800c756:	4602      	mov	r2, r0
 800c758:	61f8      	str	r0, [r7, #28]
 800c75a:	b928      	cbnz	r0, 800c768 <__pow5mult+0x40>
 800c75c:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d4 <__pow5mult+0xac>)
 800c75e:	481e      	ldr	r0, [pc, #120]	@ (800c7d8 <__pow5mult+0xb0>)
 800c760:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c764:	f000 fbdc 	bl	800cf20 <__assert_func>
 800c768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c76c:	6004      	str	r4, [r0, #0]
 800c76e:	60c4      	str	r4, [r0, #12]
 800c770:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c778:	b94c      	cbnz	r4, 800c78e <__pow5mult+0x66>
 800c77a:	f240 2171 	movw	r1, #625	@ 0x271
 800c77e:	4638      	mov	r0, r7
 800c780:	f7ff ff12 	bl	800c5a8 <__i2b>
 800c784:	2300      	movs	r3, #0
 800c786:	f8c8 0008 	str.w	r0, [r8, #8]
 800c78a:	4604      	mov	r4, r0
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	f04f 0900 	mov.w	r9, #0
 800c792:	07eb      	lsls	r3, r5, #31
 800c794:	d50a      	bpl.n	800c7ac <__pow5mult+0x84>
 800c796:	4631      	mov	r1, r6
 800c798:	4622      	mov	r2, r4
 800c79a:	4638      	mov	r0, r7
 800c79c:	f7ff ff1a 	bl	800c5d4 <__multiply>
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4680      	mov	r8, r0
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	f7ff fe4b 	bl	800c440 <_Bfree>
 800c7aa:	4646      	mov	r6, r8
 800c7ac:	106d      	asrs	r5, r5, #1
 800c7ae:	d00b      	beq.n	800c7c8 <__pow5mult+0xa0>
 800c7b0:	6820      	ldr	r0, [r4, #0]
 800c7b2:	b938      	cbnz	r0, 800c7c4 <__pow5mult+0x9c>
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff ff0b 	bl	800c5d4 <__multiply>
 800c7be:	6020      	str	r0, [r4, #0]
 800c7c0:	f8c0 9000 	str.w	r9, [r0]
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	e7e4      	b.n	800c792 <__pow5mult+0x6a>
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ce:	bf00      	nop
 800c7d0:	0800d774 	.word	0x0800d774
 800c7d4:	0800d699 	.word	0x0800d699
 800c7d8:	0800d719 	.word	0x0800d719

0800c7dc <__lshift>:
 800c7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	6849      	ldr	r1, [r1, #4]
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7f4:	f108 0601 	add.w	r6, r8, #1
 800c7f8:	42b3      	cmp	r3, r6
 800c7fa:	db0b      	blt.n	800c814 <__lshift+0x38>
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7ff fddf 	bl	800c3c0 <_Balloc>
 800c802:	4605      	mov	r5, r0
 800c804:	b948      	cbnz	r0, 800c81a <__lshift+0x3e>
 800c806:	4602      	mov	r2, r0
 800c808:	4b28      	ldr	r3, [pc, #160]	@ (800c8ac <__lshift+0xd0>)
 800c80a:	4829      	ldr	r0, [pc, #164]	@ (800c8b0 <__lshift+0xd4>)
 800c80c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c810:	f000 fb86 	bl	800cf20 <__assert_func>
 800c814:	3101      	adds	r1, #1
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	e7ee      	b.n	800c7f8 <__lshift+0x1c>
 800c81a:	2300      	movs	r3, #0
 800c81c:	f100 0114 	add.w	r1, r0, #20
 800c820:	f100 0210 	add.w	r2, r0, #16
 800c824:	4618      	mov	r0, r3
 800c826:	4553      	cmp	r3, sl
 800c828:	db33      	blt.n	800c892 <__lshift+0xb6>
 800c82a:	6920      	ldr	r0, [r4, #16]
 800c82c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c830:	f104 0314 	add.w	r3, r4, #20
 800c834:	f019 091f 	ands.w	r9, r9, #31
 800c838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c83c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c840:	d02b      	beq.n	800c89a <__lshift+0xbe>
 800c842:	f1c9 0e20 	rsb	lr, r9, #32
 800c846:	468a      	mov	sl, r1
 800c848:	2200      	movs	r2, #0
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	fa00 f009 	lsl.w	r0, r0, r9
 800c850:	4310      	orrs	r0, r2
 800c852:	f84a 0b04 	str.w	r0, [sl], #4
 800c856:	f853 2b04 	ldr.w	r2, [r3], #4
 800c85a:	459c      	cmp	ip, r3
 800c85c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c860:	d8f3      	bhi.n	800c84a <__lshift+0x6e>
 800c862:	ebac 0304 	sub.w	r3, ip, r4
 800c866:	3b15      	subs	r3, #21
 800c868:	f023 0303 	bic.w	r3, r3, #3
 800c86c:	3304      	adds	r3, #4
 800c86e:	f104 0015 	add.w	r0, r4, #21
 800c872:	4584      	cmp	ip, r0
 800c874:	bf38      	it	cc
 800c876:	2304      	movcc	r3, #4
 800c878:	50ca      	str	r2, [r1, r3]
 800c87a:	b10a      	cbz	r2, 800c880 <__lshift+0xa4>
 800c87c:	f108 0602 	add.w	r6, r8, #2
 800c880:	3e01      	subs	r6, #1
 800c882:	4638      	mov	r0, r7
 800c884:	612e      	str	r6, [r5, #16]
 800c886:	4621      	mov	r1, r4
 800c888:	f7ff fdda 	bl	800c440 <_Bfree>
 800c88c:	4628      	mov	r0, r5
 800c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c892:	f842 0f04 	str.w	r0, [r2, #4]!
 800c896:	3301      	adds	r3, #1
 800c898:	e7c5      	b.n	800c826 <__lshift+0x4a>
 800c89a:	3904      	subs	r1, #4
 800c89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8a4:	459c      	cmp	ip, r3
 800c8a6:	d8f9      	bhi.n	800c89c <__lshift+0xc0>
 800c8a8:	e7ea      	b.n	800c880 <__lshift+0xa4>
 800c8aa:	bf00      	nop
 800c8ac:	0800d708 	.word	0x0800d708
 800c8b0:	0800d719 	.word	0x0800d719

0800c8b4 <__mcmp>:
 800c8b4:	690a      	ldr	r2, [r1, #16]
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	6900      	ldr	r0, [r0, #16]
 800c8ba:	1a80      	subs	r0, r0, r2
 800c8bc:	b530      	push	{r4, r5, lr}
 800c8be:	d10e      	bne.n	800c8de <__mcmp+0x2a>
 800c8c0:	3314      	adds	r3, #20
 800c8c2:	3114      	adds	r1, #20
 800c8c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8d4:	4295      	cmp	r5, r2
 800c8d6:	d003      	beq.n	800c8e0 <__mcmp+0x2c>
 800c8d8:	d205      	bcs.n	800c8e6 <__mcmp+0x32>
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	bd30      	pop	{r4, r5, pc}
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d3f3      	bcc.n	800c8cc <__mcmp+0x18>
 800c8e4:	e7fb      	b.n	800c8de <__mcmp+0x2a>
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	e7f9      	b.n	800c8de <__mcmp+0x2a>
	...

0800c8ec <__mdiff>:
 800c8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	4689      	mov	r9, r1
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4648      	mov	r0, r9
 800c8f8:	4614      	mov	r4, r2
 800c8fa:	f7ff ffdb 	bl	800c8b4 <__mcmp>
 800c8fe:	1e05      	subs	r5, r0, #0
 800c900:	d112      	bne.n	800c928 <__mdiff+0x3c>
 800c902:	4629      	mov	r1, r5
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff fd5b 	bl	800c3c0 <_Balloc>
 800c90a:	4602      	mov	r2, r0
 800c90c:	b928      	cbnz	r0, 800c91a <__mdiff+0x2e>
 800c90e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca0c <__mdiff+0x120>)
 800c910:	f240 2137 	movw	r1, #567	@ 0x237
 800c914:	483e      	ldr	r0, [pc, #248]	@ (800ca10 <__mdiff+0x124>)
 800c916:	f000 fb03 	bl	800cf20 <__assert_func>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c920:	4610      	mov	r0, r2
 800c922:	b003      	add	sp, #12
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	bfbc      	itt	lt
 800c92a:	464b      	movlt	r3, r9
 800c92c:	46a1      	movlt	r9, r4
 800c92e:	4630      	mov	r0, r6
 800c930:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c934:	bfba      	itte	lt
 800c936:	461c      	movlt	r4, r3
 800c938:	2501      	movlt	r5, #1
 800c93a:	2500      	movge	r5, #0
 800c93c:	f7ff fd40 	bl	800c3c0 <_Balloc>
 800c940:	4602      	mov	r2, r0
 800c942:	b918      	cbnz	r0, 800c94c <__mdiff+0x60>
 800c944:	4b31      	ldr	r3, [pc, #196]	@ (800ca0c <__mdiff+0x120>)
 800c946:	f240 2145 	movw	r1, #581	@ 0x245
 800c94a:	e7e3      	b.n	800c914 <__mdiff+0x28>
 800c94c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c950:	6926      	ldr	r6, [r4, #16]
 800c952:	60c5      	str	r5, [r0, #12]
 800c954:	f109 0310 	add.w	r3, r9, #16
 800c958:	f109 0514 	add.w	r5, r9, #20
 800c95c:	f104 0e14 	add.w	lr, r4, #20
 800c960:	f100 0b14 	add.w	fp, r0, #20
 800c964:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c968:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	46d9      	mov	r9, fp
 800c970:	f04f 0c00 	mov.w	ip, #0
 800c974:	9b01      	ldr	r3, [sp, #4]
 800c976:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c97a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	fa1f f38a 	uxth.w	r3, sl
 800c984:	4619      	mov	r1, r3
 800c986:	b283      	uxth	r3, r0
 800c988:	1acb      	subs	r3, r1, r3
 800c98a:	0c00      	lsrs	r0, r0, #16
 800c98c:	4463      	add	r3, ip
 800c98e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c992:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c996:	b29b      	uxth	r3, r3
 800c998:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c99c:	4576      	cmp	r6, lr
 800c99e:	f849 3b04 	str.w	r3, [r9], #4
 800c9a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9a6:	d8e5      	bhi.n	800c974 <__mdiff+0x88>
 800c9a8:	1b33      	subs	r3, r6, r4
 800c9aa:	3b15      	subs	r3, #21
 800c9ac:	f023 0303 	bic.w	r3, r3, #3
 800c9b0:	3415      	adds	r4, #21
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	42a6      	cmp	r6, r4
 800c9b6:	bf38      	it	cc
 800c9b8:	2304      	movcc	r3, #4
 800c9ba:	441d      	add	r5, r3
 800c9bc:	445b      	add	r3, fp
 800c9be:	461e      	mov	r6, r3
 800c9c0:	462c      	mov	r4, r5
 800c9c2:	4544      	cmp	r4, r8
 800c9c4:	d30e      	bcc.n	800c9e4 <__mdiff+0xf8>
 800c9c6:	f108 0103 	add.w	r1, r8, #3
 800c9ca:	1b49      	subs	r1, r1, r5
 800c9cc:	f021 0103 	bic.w	r1, r1, #3
 800c9d0:	3d03      	subs	r5, #3
 800c9d2:	45a8      	cmp	r8, r5
 800c9d4:	bf38      	it	cc
 800c9d6:	2100      	movcc	r1, #0
 800c9d8:	440b      	add	r3, r1
 800c9da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9de:	b191      	cbz	r1, 800ca06 <__mdiff+0x11a>
 800c9e0:	6117      	str	r7, [r2, #16]
 800c9e2:	e79d      	b.n	800c920 <__mdiff+0x34>
 800c9e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9e8:	46e6      	mov	lr, ip
 800c9ea:	0c08      	lsrs	r0, r1, #16
 800c9ec:	fa1c fc81 	uxtah	ip, ip, r1
 800c9f0:	4471      	add	r1, lr
 800c9f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9f6:	b289      	uxth	r1, r1
 800c9f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9fc:	f846 1b04 	str.w	r1, [r6], #4
 800ca00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca04:	e7dd      	b.n	800c9c2 <__mdiff+0xd6>
 800ca06:	3f01      	subs	r7, #1
 800ca08:	e7e7      	b.n	800c9da <__mdiff+0xee>
 800ca0a:	bf00      	nop
 800ca0c:	0800d708 	.word	0x0800d708
 800ca10:	0800d719 	.word	0x0800d719

0800ca14 <__d2b>:
 800ca14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca18:	460f      	mov	r7, r1
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	ec59 8b10 	vmov	r8, r9, d0
 800ca20:	4616      	mov	r6, r2
 800ca22:	f7ff fccd 	bl	800c3c0 <_Balloc>
 800ca26:	4604      	mov	r4, r0
 800ca28:	b930      	cbnz	r0, 800ca38 <__d2b+0x24>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	4b23      	ldr	r3, [pc, #140]	@ (800cabc <__d2b+0xa8>)
 800ca2e:	4824      	ldr	r0, [pc, #144]	@ (800cac0 <__d2b+0xac>)
 800ca30:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca34:	f000 fa74 	bl	800cf20 <__assert_func>
 800ca38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca40:	b10d      	cbz	r5, 800ca46 <__d2b+0x32>
 800ca42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca46:	9301      	str	r3, [sp, #4]
 800ca48:	f1b8 0300 	subs.w	r3, r8, #0
 800ca4c:	d023      	beq.n	800ca96 <__d2b+0x82>
 800ca4e:	4668      	mov	r0, sp
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	f7ff fd7c 	bl	800c54e <__lo0bits>
 800ca56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca5a:	b1d0      	cbz	r0, 800ca92 <__d2b+0x7e>
 800ca5c:	f1c0 0320 	rsb	r3, r0, #32
 800ca60:	fa02 f303 	lsl.w	r3, r2, r3
 800ca64:	430b      	orrs	r3, r1
 800ca66:	40c2      	lsrs	r2, r0
 800ca68:	6163      	str	r3, [r4, #20]
 800ca6a:	9201      	str	r2, [sp, #4]
 800ca6c:	9b01      	ldr	r3, [sp, #4]
 800ca6e:	61a3      	str	r3, [r4, #24]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	bf0c      	ite	eq
 800ca74:	2201      	moveq	r2, #1
 800ca76:	2202      	movne	r2, #2
 800ca78:	6122      	str	r2, [r4, #16]
 800ca7a:	b1a5      	cbz	r5, 800caa6 <__d2b+0x92>
 800ca7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca80:	4405      	add	r5, r0
 800ca82:	603d      	str	r5, [r7, #0]
 800ca84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca88:	6030      	str	r0, [r6, #0]
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	b003      	add	sp, #12
 800ca8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca92:	6161      	str	r1, [r4, #20]
 800ca94:	e7ea      	b.n	800ca6c <__d2b+0x58>
 800ca96:	a801      	add	r0, sp, #4
 800ca98:	f7ff fd59 	bl	800c54e <__lo0bits>
 800ca9c:	9b01      	ldr	r3, [sp, #4]
 800ca9e:	6163      	str	r3, [r4, #20]
 800caa0:	3020      	adds	r0, #32
 800caa2:	2201      	movs	r2, #1
 800caa4:	e7e8      	b.n	800ca78 <__d2b+0x64>
 800caa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800caaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800caae:	6038      	str	r0, [r7, #0]
 800cab0:	6918      	ldr	r0, [r3, #16]
 800cab2:	f7ff fd2d 	bl	800c510 <__hi0bits>
 800cab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caba:	e7e5      	b.n	800ca88 <__d2b+0x74>
 800cabc:	0800d708 	.word	0x0800d708
 800cac0:	0800d719 	.word	0x0800d719

0800cac4 <__ssputs_r>:
 800cac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cac8:	688e      	ldr	r6, [r1, #8]
 800caca:	461f      	mov	r7, r3
 800cacc:	42be      	cmp	r6, r7
 800cace:	680b      	ldr	r3, [r1, #0]
 800cad0:	4682      	mov	sl, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	4690      	mov	r8, r2
 800cad6:	d82d      	bhi.n	800cb34 <__ssputs_r+0x70>
 800cad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cadc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cae0:	d026      	beq.n	800cb30 <__ssputs_r+0x6c>
 800cae2:	6965      	ldr	r5, [r4, #20]
 800cae4:	6909      	ldr	r1, [r1, #16]
 800cae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800caea:	eba3 0901 	sub.w	r9, r3, r1
 800caee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800caf2:	1c7b      	adds	r3, r7, #1
 800caf4:	444b      	add	r3, r9
 800caf6:	106d      	asrs	r5, r5, #1
 800caf8:	429d      	cmp	r5, r3
 800cafa:	bf38      	it	cc
 800cafc:	461d      	movcc	r5, r3
 800cafe:	0553      	lsls	r3, r2, #21
 800cb00:	d527      	bpl.n	800cb52 <__ssputs_r+0x8e>
 800cb02:	4629      	mov	r1, r5
 800cb04:	f7ff fbd0 	bl	800c2a8 <_malloc_r>
 800cb08:	4606      	mov	r6, r0
 800cb0a:	b360      	cbz	r0, 800cb66 <__ssputs_r+0xa2>
 800cb0c:	6921      	ldr	r1, [r4, #16]
 800cb0e:	464a      	mov	r2, r9
 800cb10:	f7fe fcfb 	bl	800b50a <memcpy>
 800cb14:	89a3      	ldrh	r3, [r4, #12]
 800cb16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb1e:	81a3      	strh	r3, [r4, #12]
 800cb20:	6126      	str	r6, [r4, #16]
 800cb22:	6165      	str	r5, [r4, #20]
 800cb24:	444e      	add	r6, r9
 800cb26:	eba5 0509 	sub.w	r5, r5, r9
 800cb2a:	6026      	str	r6, [r4, #0]
 800cb2c:	60a5      	str	r5, [r4, #8]
 800cb2e:	463e      	mov	r6, r7
 800cb30:	42be      	cmp	r6, r7
 800cb32:	d900      	bls.n	800cb36 <__ssputs_r+0x72>
 800cb34:	463e      	mov	r6, r7
 800cb36:	6820      	ldr	r0, [r4, #0]
 800cb38:	4632      	mov	r2, r6
 800cb3a:	4641      	mov	r1, r8
 800cb3c:	f000 f9c6 	bl	800cecc <memmove>
 800cb40:	68a3      	ldr	r3, [r4, #8]
 800cb42:	1b9b      	subs	r3, r3, r6
 800cb44:	60a3      	str	r3, [r4, #8]
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	4433      	add	r3, r6
 800cb4a:	6023      	str	r3, [r4, #0]
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	462a      	mov	r2, r5
 800cb54:	f000 fa28 	bl	800cfa8 <_realloc_r>
 800cb58:	4606      	mov	r6, r0
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d1e0      	bne.n	800cb20 <__ssputs_r+0x5c>
 800cb5e:	6921      	ldr	r1, [r4, #16]
 800cb60:	4650      	mov	r0, sl
 800cb62:	f7ff fb2d 	bl	800c1c0 <_free_r>
 800cb66:	230c      	movs	r3, #12
 800cb68:	f8ca 3000 	str.w	r3, [sl]
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb72:	81a3      	strh	r3, [r4, #12]
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	e7e9      	b.n	800cb4e <__ssputs_r+0x8a>
	...

0800cb7c <_svfiprintf_r>:
 800cb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb80:	4698      	mov	r8, r3
 800cb82:	898b      	ldrh	r3, [r1, #12]
 800cb84:	061b      	lsls	r3, r3, #24
 800cb86:	b09d      	sub	sp, #116	@ 0x74
 800cb88:	4607      	mov	r7, r0
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	4614      	mov	r4, r2
 800cb8e:	d510      	bpl.n	800cbb2 <_svfiprintf_r+0x36>
 800cb90:	690b      	ldr	r3, [r1, #16]
 800cb92:	b973      	cbnz	r3, 800cbb2 <_svfiprintf_r+0x36>
 800cb94:	2140      	movs	r1, #64	@ 0x40
 800cb96:	f7ff fb87 	bl	800c2a8 <_malloc_r>
 800cb9a:	6028      	str	r0, [r5, #0]
 800cb9c:	6128      	str	r0, [r5, #16]
 800cb9e:	b930      	cbnz	r0, 800cbae <_svfiprintf_r+0x32>
 800cba0:	230c      	movs	r3, #12
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	f04f 30ff 	mov.w	r0, #4294967295
 800cba8:	b01d      	add	sp, #116	@ 0x74
 800cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	2340      	movs	r3, #64	@ 0x40
 800cbb0:	616b      	str	r3, [r5, #20]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbb6:	2320      	movs	r3, #32
 800cbb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbc0:	2330      	movs	r3, #48	@ 0x30
 800cbc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd60 <_svfiprintf_r+0x1e4>
 800cbc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbca:	f04f 0901 	mov.w	r9, #1
 800cbce:	4623      	mov	r3, r4
 800cbd0:	469a      	mov	sl, r3
 800cbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbd6:	b10a      	cbz	r2, 800cbdc <_svfiprintf_r+0x60>
 800cbd8:	2a25      	cmp	r2, #37	@ 0x25
 800cbda:	d1f9      	bne.n	800cbd0 <_svfiprintf_r+0x54>
 800cbdc:	ebba 0b04 	subs.w	fp, sl, r4
 800cbe0:	d00b      	beq.n	800cbfa <_svfiprintf_r+0x7e>
 800cbe2:	465b      	mov	r3, fp
 800cbe4:	4622      	mov	r2, r4
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	4638      	mov	r0, r7
 800cbea:	f7ff ff6b 	bl	800cac4 <__ssputs_r>
 800cbee:	3001      	adds	r0, #1
 800cbf0:	f000 80a7 	beq.w	800cd42 <_svfiprintf_r+0x1c6>
 800cbf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf6:	445a      	add	r2, fp
 800cbf8:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 809f 	beq.w	800cd42 <_svfiprintf_r+0x1c6>
 800cc04:	2300      	movs	r3, #0
 800cc06:	f04f 32ff 	mov.w	r2, #4294967295
 800cc0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc0e:	f10a 0a01 	add.w	sl, sl, #1
 800cc12:	9304      	str	r3, [sp, #16]
 800cc14:	9307      	str	r3, [sp, #28]
 800cc16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc1c:	4654      	mov	r4, sl
 800cc1e:	2205      	movs	r2, #5
 800cc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc24:	484e      	ldr	r0, [pc, #312]	@ (800cd60 <_svfiprintf_r+0x1e4>)
 800cc26:	f7f3 fad3 	bl	80001d0 <memchr>
 800cc2a:	9a04      	ldr	r2, [sp, #16]
 800cc2c:	b9d8      	cbnz	r0, 800cc66 <_svfiprintf_r+0xea>
 800cc2e:	06d0      	lsls	r0, r2, #27
 800cc30:	bf44      	itt	mi
 800cc32:	2320      	movmi	r3, #32
 800cc34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc38:	0711      	lsls	r1, r2, #28
 800cc3a:	bf44      	itt	mi
 800cc3c:	232b      	movmi	r3, #43	@ 0x2b
 800cc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc42:	f89a 3000 	ldrb.w	r3, [sl]
 800cc46:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc48:	d015      	beq.n	800cc76 <_svfiprintf_r+0xfa>
 800cc4a:	9a07      	ldr	r2, [sp, #28]
 800cc4c:	4654      	mov	r4, sl
 800cc4e:	2000      	movs	r0, #0
 800cc50:	f04f 0c0a 	mov.w	ip, #10
 800cc54:	4621      	mov	r1, r4
 800cc56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc5a:	3b30      	subs	r3, #48	@ 0x30
 800cc5c:	2b09      	cmp	r3, #9
 800cc5e:	d94b      	bls.n	800ccf8 <_svfiprintf_r+0x17c>
 800cc60:	b1b0      	cbz	r0, 800cc90 <_svfiprintf_r+0x114>
 800cc62:	9207      	str	r2, [sp, #28]
 800cc64:	e014      	b.n	800cc90 <_svfiprintf_r+0x114>
 800cc66:	eba0 0308 	sub.w	r3, r0, r8
 800cc6a:	fa09 f303 	lsl.w	r3, r9, r3
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	46a2      	mov	sl, r4
 800cc74:	e7d2      	b.n	800cc1c <_svfiprintf_r+0xa0>
 800cc76:	9b03      	ldr	r3, [sp, #12]
 800cc78:	1d19      	adds	r1, r3, #4
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	9103      	str	r1, [sp, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	bfbb      	ittet	lt
 800cc82:	425b      	neglt	r3, r3
 800cc84:	f042 0202 	orrlt.w	r2, r2, #2
 800cc88:	9307      	strge	r3, [sp, #28]
 800cc8a:	9307      	strlt	r3, [sp, #28]
 800cc8c:	bfb8      	it	lt
 800cc8e:	9204      	strlt	r2, [sp, #16]
 800cc90:	7823      	ldrb	r3, [r4, #0]
 800cc92:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc94:	d10a      	bne.n	800ccac <_svfiprintf_r+0x130>
 800cc96:	7863      	ldrb	r3, [r4, #1]
 800cc98:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc9a:	d132      	bne.n	800cd02 <_svfiprintf_r+0x186>
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	1d1a      	adds	r2, r3, #4
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	9203      	str	r2, [sp, #12]
 800cca4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cca8:	3402      	adds	r4, #2
 800ccaa:	9305      	str	r3, [sp, #20]
 800ccac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd70 <_svfiprintf_r+0x1f4>
 800ccb0:	7821      	ldrb	r1, [r4, #0]
 800ccb2:	2203      	movs	r2, #3
 800ccb4:	4650      	mov	r0, sl
 800ccb6:	f7f3 fa8b 	bl	80001d0 <memchr>
 800ccba:	b138      	cbz	r0, 800cccc <_svfiprintf_r+0x150>
 800ccbc:	9b04      	ldr	r3, [sp, #16]
 800ccbe:	eba0 000a 	sub.w	r0, r0, sl
 800ccc2:	2240      	movs	r2, #64	@ 0x40
 800ccc4:	4082      	lsls	r2, r0
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	3401      	adds	r4, #1
 800ccca:	9304      	str	r3, [sp, #16]
 800cccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd0:	4824      	ldr	r0, [pc, #144]	@ (800cd64 <_svfiprintf_r+0x1e8>)
 800ccd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccd6:	2206      	movs	r2, #6
 800ccd8:	f7f3 fa7a 	bl	80001d0 <memchr>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d036      	beq.n	800cd4e <_svfiprintf_r+0x1d2>
 800cce0:	4b21      	ldr	r3, [pc, #132]	@ (800cd68 <_svfiprintf_r+0x1ec>)
 800cce2:	bb1b      	cbnz	r3, 800cd2c <_svfiprintf_r+0x1b0>
 800cce4:	9b03      	ldr	r3, [sp, #12]
 800cce6:	3307      	adds	r3, #7
 800cce8:	f023 0307 	bic.w	r3, r3, #7
 800ccec:	3308      	adds	r3, #8
 800ccee:	9303      	str	r3, [sp, #12]
 800ccf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf2:	4433      	add	r3, r6
 800ccf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccf6:	e76a      	b.n	800cbce <_svfiprintf_r+0x52>
 800ccf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	2001      	movs	r0, #1
 800cd00:	e7a8      	b.n	800cc54 <_svfiprintf_r+0xd8>
 800cd02:	2300      	movs	r3, #0
 800cd04:	3401      	adds	r4, #1
 800cd06:	9305      	str	r3, [sp, #20]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	f04f 0c0a 	mov.w	ip, #10
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd14:	3a30      	subs	r2, #48	@ 0x30
 800cd16:	2a09      	cmp	r2, #9
 800cd18:	d903      	bls.n	800cd22 <_svfiprintf_r+0x1a6>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0c6      	beq.n	800ccac <_svfiprintf_r+0x130>
 800cd1e:	9105      	str	r1, [sp, #20]
 800cd20:	e7c4      	b.n	800ccac <_svfiprintf_r+0x130>
 800cd22:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd26:	4604      	mov	r4, r0
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e7f0      	b.n	800cd0e <_svfiprintf_r+0x192>
 800cd2c:	ab03      	add	r3, sp, #12
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	462a      	mov	r2, r5
 800cd32:	4b0e      	ldr	r3, [pc, #56]	@ (800cd6c <_svfiprintf_r+0x1f0>)
 800cd34:	a904      	add	r1, sp, #16
 800cd36:	4638      	mov	r0, r7
 800cd38:	f7fd fe76 	bl	800aa28 <_printf_float>
 800cd3c:	1c42      	adds	r2, r0, #1
 800cd3e:	4606      	mov	r6, r0
 800cd40:	d1d6      	bne.n	800ccf0 <_svfiprintf_r+0x174>
 800cd42:	89ab      	ldrh	r3, [r5, #12]
 800cd44:	065b      	lsls	r3, r3, #25
 800cd46:	f53f af2d 	bmi.w	800cba4 <_svfiprintf_r+0x28>
 800cd4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd4c:	e72c      	b.n	800cba8 <_svfiprintf_r+0x2c>
 800cd4e:	ab03      	add	r3, sp, #12
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	462a      	mov	r2, r5
 800cd54:	4b05      	ldr	r3, [pc, #20]	@ (800cd6c <_svfiprintf_r+0x1f0>)
 800cd56:	a904      	add	r1, sp, #16
 800cd58:	4638      	mov	r0, r7
 800cd5a:	f7fe f8fd 	bl	800af58 <_printf_i>
 800cd5e:	e7ed      	b.n	800cd3c <_svfiprintf_r+0x1c0>
 800cd60:	0800d870 	.word	0x0800d870
 800cd64:	0800d87a 	.word	0x0800d87a
 800cd68:	0800aa29 	.word	0x0800aa29
 800cd6c:	0800cac5 	.word	0x0800cac5
 800cd70:	0800d876 	.word	0x0800d876

0800cd74 <__sflush_r>:
 800cd74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7c:	0716      	lsls	r6, r2, #28
 800cd7e:	4605      	mov	r5, r0
 800cd80:	460c      	mov	r4, r1
 800cd82:	d454      	bmi.n	800ce2e <__sflush_r+0xba>
 800cd84:	684b      	ldr	r3, [r1, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	dc02      	bgt.n	800cd90 <__sflush_r+0x1c>
 800cd8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	dd48      	ble.n	800ce22 <__sflush_r+0xae>
 800cd90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd92:	2e00      	cmp	r6, #0
 800cd94:	d045      	beq.n	800ce22 <__sflush_r+0xae>
 800cd96:	2300      	movs	r3, #0
 800cd98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd9c:	682f      	ldr	r7, [r5, #0]
 800cd9e:	6a21      	ldr	r1, [r4, #32]
 800cda0:	602b      	str	r3, [r5, #0]
 800cda2:	d030      	beq.n	800ce06 <__sflush_r+0x92>
 800cda4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	0759      	lsls	r1, r3, #29
 800cdaa:	d505      	bpl.n	800cdb8 <__sflush_r+0x44>
 800cdac:	6863      	ldr	r3, [r4, #4]
 800cdae:	1ad2      	subs	r2, r2, r3
 800cdb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cdb2:	b10b      	cbz	r3, 800cdb8 <__sflush_r+0x44>
 800cdb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdb6:	1ad2      	subs	r2, r2, r3
 800cdb8:	2300      	movs	r3, #0
 800cdba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdbc:	6a21      	ldr	r1, [r4, #32]
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	47b0      	blx	r6
 800cdc2:	1c43      	adds	r3, r0, #1
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	d106      	bne.n	800cdd6 <__sflush_r+0x62>
 800cdc8:	6829      	ldr	r1, [r5, #0]
 800cdca:	291d      	cmp	r1, #29
 800cdcc:	d82b      	bhi.n	800ce26 <__sflush_r+0xb2>
 800cdce:	4a2a      	ldr	r2, [pc, #168]	@ (800ce78 <__sflush_r+0x104>)
 800cdd0:	410a      	asrs	r2, r1
 800cdd2:	07d6      	lsls	r6, r2, #31
 800cdd4:	d427      	bmi.n	800ce26 <__sflush_r+0xb2>
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	6062      	str	r2, [r4, #4]
 800cdda:	04d9      	lsls	r1, r3, #19
 800cddc:	6922      	ldr	r2, [r4, #16]
 800cdde:	6022      	str	r2, [r4, #0]
 800cde0:	d504      	bpl.n	800cdec <__sflush_r+0x78>
 800cde2:	1c42      	adds	r2, r0, #1
 800cde4:	d101      	bne.n	800cdea <__sflush_r+0x76>
 800cde6:	682b      	ldr	r3, [r5, #0]
 800cde8:	b903      	cbnz	r3, 800cdec <__sflush_r+0x78>
 800cdea:	6560      	str	r0, [r4, #84]	@ 0x54
 800cdec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdee:	602f      	str	r7, [r5, #0]
 800cdf0:	b1b9      	cbz	r1, 800ce22 <__sflush_r+0xae>
 800cdf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdf6:	4299      	cmp	r1, r3
 800cdf8:	d002      	beq.n	800ce00 <__sflush_r+0x8c>
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f7ff f9e0 	bl	800c1c0 <_free_r>
 800ce00:	2300      	movs	r3, #0
 800ce02:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce04:	e00d      	b.n	800ce22 <__sflush_r+0xae>
 800ce06:	2301      	movs	r3, #1
 800ce08:	4628      	mov	r0, r5
 800ce0a:	47b0      	blx	r6
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	1c50      	adds	r0, r2, #1
 800ce10:	d1c9      	bne.n	800cda6 <__sflush_r+0x32>
 800ce12:	682b      	ldr	r3, [r5, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d0c6      	beq.n	800cda6 <__sflush_r+0x32>
 800ce18:	2b1d      	cmp	r3, #29
 800ce1a:	d001      	beq.n	800ce20 <__sflush_r+0xac>
 800ce1c:	2b16      	cmp	r3, #22
 800ce1e:	d11e      	bne.n	800ce5e <__sflush_r+0xea>
 800ce20:	602f      	str	r7, [r5, #0]
 800ce22:	2000      	movs	r0, #0
 800ce24:	e022      	b.n	800ce6c <__sflush_r+0xf8>
 800ce26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce2a:	b21b      	sxth	r3, r3
 800ce2c:	e01b      	b.n	800ce66 <__sflush_r+0xf2>
 800ce2e:	690f      	ldr	r7, [r1, #16]
 800ce30:	2f00      	cmp	r7, #0
 800ce32:	d0f6      	beq.n	800ce22 <__sflush_r+0xae>
 800ce34:	0793      	lsls	r3, r2, #30
 800ce36:	680e      	ldr	r6, [r1, #0]
 800ce38:	bf08      	it	eq
 800ce3a:	694b      	ldreq	r3, [r1, #20]
 800ce3c:	600f      	str	r7, [r1, #0]
 800ce3e:	bf18      	it	ne
 800ce40:	2300      	movne	r3, #0
 800ce42:	eba6 0807 	sub.w	r8, r6, r7
 800ce46:	608b      	str	r3, [r1, #8]
 800ce48:	f1b8 0f00 	cmp.w	r8, #0
 800ce4c:	dde9      	ble.n	800ce22 <__sflush_r+0xae>
 800ce4e:	6a21      	ldr	r1, [r4, #32]
 800ce50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce52:	4643      	mov	r3, r8
 800ce54:	463a      	mov	r2, r7
 800ce56:	4628      	mov	r0, r5
 800ce58:	47b0      	blx	r6
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	dc08      	bgt.n	800ce70 <__sflush_r+0xfc>
 800ce5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce70:	4407      	add	r7, r0
 800ce72:	eba8 0800 	sub.w	r8, r8, r0
 800ce76:	e7e7      	b.n	800ce48 <__sflush_r+0xd4>
 800ce78:	dfbffffe 	.word	0xdfbffffe

0800ce7c <_fflush_r>:
 800ce7c:	b538      	push	{r3, r4, r5, lr}
 800ce7e:	690b      	ldr	r3, [r1, #16]
 800ce80:	4605      	mov	r5, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	b913      	cbnz	r3, 800ce8c <_fflush_r+0x10>
 800ce86:	2500      	movs	r5, #0
 800ce88:	4628      	mov	r0, r5
 800ce8a:	bd38      	pop	{r3, r4, r5, pc}
 800ce8c:	b118      	cbz	r0, 800ce96 <_fflush_r+0x1a>
 800ce8e:	6a03      	ldr	r3, [r0, #32]
 800ce90:	b90b      	cbnz	r3, 800ce96 <_fflush_r+0x1a>
 800ce92:	f7fe fa0d 	bl	800b2b0 <__sinit>
 800ce96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d0f3      	beq.n	800ce86 <_fflush_r+0xa>
 800ce9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cea0:	07d0      	lsls	r0, r2, #31
 800cea2:	d404      	bmi.n	800ceae <_fflush_r+0x32>
 800cea4:	0599      	lsls	r1, r3, #22
 800cea6:	d402      	bmi.n	800ceae <_fflush_r+0x32>
 800cea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceaa:	f7fe fb2c 	bl	800b506 <__retarget_lock_acquire_recursive>
 800ceae:	4628      	mov	r0, r5
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	f7ff ff5f 	bl	800cd74 <__sflush_r>
 800ceb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ceb8:	07da      	lsls	r2, r3, #31
 800ceba:	4605      	mov	r5, r0
 800cebc:	d4e4      	bmi.n	800ce88 <_fflush_r+0xc>
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	059b      	lsls	r3, r3, #22
 800cec2:	d4e1      	bmi.n	800ce88 <_fflush_r+0xc>
 800cec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cec6:	f7fe fb1f 	bl	800b508 <__retarget_lock_release_recursive>
 800ceca:	e7dd      	b.n	800ce88 <_fflush_r+0xc>

0800cecc <memmove>:
 800cecc:	4288      	cmp	r0, r1
 800cece:	b510      	push	{r4, lr}
 800ced0:	eb01 0402 	add.w	r4, r1, r2
 800ced4:	d902      	bls.n	800cedc <memmove+0x10>
 800ced6:	4284      	cmp	r4, r0
 800ced8:	4623      	mov	r3, r4
 800ceda:	d807      	bhi.n	800ceec <memmove+0x20>
 800cedc:	1e43      	subs	r3, r0, #1
 800cede:	42a1      	cmp	r1, r4
 800cee0:	d008      	beq.n	800cef4 <memmove+0x28>
 800cee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceea:	e7f8      	b.n	800cede <memmove+0x12>
 800ceec:	4402      	add	r2, r0
 800ceee:	4601      	mov	r1, r0
 800cef0:	428a      	cmp	r2, r1
 800cef2:	d100      	bne.n	800cef6 <memmove+0x2a>
 800cef4:	bd10      	pop	{r4, pc}
 800cef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cefa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cefe:	e7f7      	b.n	800cef0 <memmove+0x24>

0800cf00 <_sbrk_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d06      	ldr	r5, [pc, #24]	@ (800cf1c <_sbrk_r+0x1c>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	f7f5 f8fe 	bl	800210c <_sbrk>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_sbrk_r+0x1a>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_sbrk_r+0x1a>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	20001ef0 	.word	0x20001ef0

0800cf20 <__assert_func>:
 800cf20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf22:	4614      	mov	r4, r2
 800cf24:	461a      	mov	r2, r3
 800cf26:	4b09      	ldr	r3, [pc, #36]	@ (800cf4c <__assert_func+0x2c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	68d8      	ldr	r0, [r3, #12]
 800cf2e:	b954      	cbnz	r4, 800cf46 <__assert_func+0x26>
 800cf30:	4b07      	ldr	r3, [pc, #28]	@ (800cf50 <__assert_func+0x30>)
 800cf32:	461c      	mov	r4, r3
 800cf34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf38:	9100      	str	r1, [sp, #0]
 800cf3a:	462b      	mov	r3, r5
 800cf3c:	4905      	ldr	r1, [pc, #20]	@ (800cf54 <__assert_func+0x34>)
 800cf3e:	f000 f86f 	bl	800d020 <fiprintf>
 800cf42:	f000 f87f 	bl	800d044 <abort>
 800cf46:	4b04      	ldr	r3, [pc, #16]	@ (800cf58 <__assert_func+0x38>)
 800cf48:	e7f4      	b.n	800cf34 <__assert_func+0x14>
 800cf4a:	bf00      	nop
 800cf4c:	2000001c 	.word	0x2000001c
 800cf50:	0800d8c6 	.word	0x0800d8c6
 800cf54:	0800d898 	.word	0x0800d898
 800cf58:	0800d88b 	.word	0x0800d88b

0800cf5c <_calloc_r>:
 800cf5c:	b570      	push	{r4, r5, r6, lr}
 800cf5e:	fba1 5402 	umull	r5, r4, r1, r2
 800cf62:	b93c      	cbnz	r4, 800cf74 <_calloc_r+0x18>
 800cf64:	4629      	mov	r1, r5
 800cf66:	f7ff f99f 	bl	800c2a8 <_malloc_r>
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	b928      	cbnz	r0, 800cf7a <_calloc_r+0x1e>
 800cf6e:	2600      	movs	r6, #0
 800cf70:	4630      	mov	r0, r6
 800cf72:	bd70      	pop	{r4, r5, r6, pc}
 800cf74:	220c      	movs	r2, #12
 800cf76:	6002      	str	r2, [r0, #0]
 800cf78:	e7f9      	b.n	800cf6e <_calloc_r+0x12>
 800cf7a:	462a      	mov	r2, r5
 800cf7c:	4621      	mov	r1, r4
 800cf7e:	f7fe fa44 	bl	800b40a <memset>
 800cf82:	e7f5      	b.n	800cf70 <_calloc_r+0x14>

0800cf84 <__ascii_mbtowc>:
 800cf84:	b082      	sub	sp, #8
 800cf86:	b901      	cbnz	r1, 800cf8a <__ascii_mbtowc+0x6>
 800cf88:	a901      	add	r1, sp, #4
 800cf8a:	b142      	cbz	r2, 800cf9e <__ascii_mbtowc+0x1a>
 800cf8c:	b14b      	cbz	r3, 800cfa2 <__ascii_mbtowc+0x1e>
 800cf8e:	7813      	ldrb	r3, [r2, #0]
 800cf90:	600b      	str	r3, [r1, #0]
 800cf92:	7812      	ldrb	r2, [r2, #0]
 800cf94:	1e10      	subs	r0, r2, #0
 800cf96:	bf18      	it	ne
 800cf98:	2001      	movne	r0, #1
 800cf9a:	b002      	add	sp, #8
 800cf9c:	4770      	bx	lr
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	e7fb      	b.n	800cf9a <__ascii_mbtowc+0x16>
 800cfa2:	f06f 0001 	mvn.w	r0, #1
 800cfa6:	e7f8      	b.n	800cf9a <__ascii_mbtowc+0x16>

0800cfa8 <_realloc_r>:
 800cfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	4680      	mov	r8, r0
 800cfae:	4615      	mov	r5, r2
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	b921      	cbnz	r1, 800cfbe <_realloc_r+0x16>
 800cfb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb8:	4611      	mov	r1, r2
 800cfba:	f7ff b975 	b.w	800c2a8 <_malloc_r>
 800cfbe:	b92a      	cbnz	r2, 800cfcc <_realloc_r+0x24>
 800cfc0:	f7ff f8fe 	bl	800c1c0 <_free_r>
 800cfc4:	2400      	movs	r4, #0
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfcc:	f000 f841 	bl	800d052 <_malloc_usable_size_r>
 800cfd0:	4285      	cmp	r5, r0
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	d802      	bhi.n	800cfdc <_realloc_r+0x34>
 800cfd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cfda:	d8f4      	bhi.n	800cfc6 <_realloc_r+0x1e>
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4640      	mov	r0, r8
 800cfe0:	f7ff f962 	bl	800c2a8 <_malloc_r>
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d0ec      	beq.n	800cfc4 <_realloc_r+0x1c>
 800cfea:	42b5      	cmp	r5, r6
 800cfec:	462a      	mov	r2, r5
 800cfee:	4621      	mov	r1, r4
 800cff0:	bf28      	it	cs
 800cff2:	4632      	movcs	r2, r6
 800cff4:	f7fe fa89 	bl	800b50a <memcpy>
 800cff8:	4621      	mov	r1, r4
 800cffa:	4640      	mov	r0, r8
 800cffc:	f7ff f8e0 	bl	800c1c0 <_free_r>
 800d000:	463c      	mov	r4, r7
 800d002:	e7e0      	b.n	800cfc6 <_realloc_r+0x1e>

0800d004 <__ascii_wctomb>:
 800d004:	4603      	mov	r3, r0
 800d006:	4608      	mov	r0, r1
 800d008:	b141      	cbz	r1, 800d01c <__ascii_wctomb+0x18>
 800d00a:	2aff      	cmp	r2, #255	@ 0xff
 800d00c:	d904      	bls.n	800d018 <__ascii_wctomb+0x14>
 800d00e:	228a      	movs	r2, #138	@ 0x8a
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	f04f 30ff 	mov.w	r0, #4294967295
 800d016:	4770      	bx	lr
 800d018:	700a      	strb	r2, [r1, #0]
 800d01a:	2001      	movs	r0, #1
 800d01c:	4770      	bx	lr
	...

0800d020 <fiprintf>:
 800d020:	b40e      	push	{r1, r2, r3}
 800d022:	b503      	push	{r0, r1, lr}
 800d024:	4601      	mov	r1, r0
 800d026:	ab03      	add	r3, sp, #12
 800d028:	4805      	ldr	r0, [pc, #20]	@ (800d040 <fiprintf+0x20>)
 800d02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d02e:	6800      	ldr	r0, [r0, #0]
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	f000 f83f 	bl	800d0b4 <_vfiprintf_r>
 800d036:	b002      	add	sp, #8
 800d038:	f85d eb04 	ldr.w	lr, [sp], #4
 800d03c:	b003      	add	sp, #12
 800d03e:	4770      	bx	lr
 800d040:	2000001c 	.word	0x2000001c

0800d044 <abort>:
 800d044:	b508      	push	{r3, lr}
 800d046:	2006      	movs	r0, #6
 800d048:	f000 fa08 	bl	800d45c <raise>
 800d04c:	2001      	movs	r0, #1
 800d04e:	f7f4 ffe5 	bl	800201c <_exit>

0800d052 <_malloc_usable_size_r>:
 800d052:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d056:	1f18      	subs	r0, r3, #4
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bfbc      	itt	lt
 800d05c:	580b      	ldrlt	r3, [r1, r0]
 800d05e:	18c0      	addlt	r0, r0, r3
 800d060:	4770      	bx	lr

0800d062 <__sfputc_r>:
 800d062:	6893      	ldr	r3, [r2, #8]
 800d064:	3b01      	subs	r3, #1
 800d066:	2b00      	cmp	r3, #0
 800d068:	b410      	push	{r4}
 800d06a:	6093      	str	r3, [r2, #8]
 800d06c:	da08      	bge.n	800d080 <__sfputc_r+0x1e>
 800d06e:	6994      	ldr	r4, [r2, #24]
 800d070:	42a3      	cmp	r3, r4
 800d072:	db01      	blt.n	800d078 <__sfputc_r+0x16>
 800d074:	290a      	cmp	r1, #10
 800d076:	d103      	bne.n	800d080 <__sfputc_r+0x1e>
 800d078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d07c:	f000 b932 	b.w	800d2e4 <__swbuf_r>
 800d080:	6813      	ldr	r3, [r2, #0]
 800d082:	1c58      	adds	r0, r3, #1
 800d084:	6010      	str	r0, [r2, #0]
 800d086:	7019      	strb	r1, [r3, #0]
 800d088:	4608      	mov	r0, r1
 800d08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <__sfputs_r>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	4606      	mov	r6, r0
 800d094:	460f      	mov	r7, r1
 800d096:	4614      	mov	r4, r2
 800d098:	18d5      	adds	r5, r2, r3
 800d09a:	42ac      	cmp	r4, r5
 800d09c:	d101      	bne.n	800d0a2 <__sfputs_r+0x12>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e007      	b.n	800d0b2 <__sfputs_r+0x22>
 800d0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a6:	463a      	mov	r2, r7
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7ff ffda 	bl	800d062 <__sfputc_r>
 800d0ae:	1c43      	adds	r3, r0, #1
 800d0b0:	d1f3      	bne.n	800d09a <__sfputs_r+0xa>
 800d0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0b4 <_vfiprintf_r>:
 800d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b8:	460d      	mov	r5, r1
 800d0ba:	b09d      	sub	sp, #116	@ 0x74
 800d0bc:	4614      	mov	r4, r2
 800d0be:	4698      	mov	r8, r3
 800d0c0:	4606      	mov	r6, r0
 800d0c2:	b118      	cbz	r0, 800d0cc <_vfiprintf_r+0x18>
 800d0c4:	6a03      	ldr	r3, [r0, #32]
 800d0c6:	b90b      	cbnz	r3, 800d0cc <_vfiprintf_r+0x18>
 800d0c8:	f7fe f8f2 	bl	800b2b0 <__sinit>
 800d0cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0ce:	07d9      	lsls	r1, r3, #31
 800d0d0:	d405      	bmi.n	800d0de <_vfiprintf_r+0x2a>
 800d0d2:	89ab      	ldrh	r3, [r5, #12]
 800d0d4:	059a      	lsls	r2, r3, #22
 800d0d6:	d402      	bmi.n	800d0de <_vfiprintf_r+0x2a>
 800d0d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0da:	f7fe fa14 	bl	800b506 <__retarget_lock_acquire_recursive>
 800d0de:	89ab      	ldrh	r3, [r5, #12]
 800d0e0:	071b      	lsls	r3, r3, #28
 800d0e2:	d501      	bpl.n	800d0e8 <_vfiprintf_r+0x34>
 800d0e4:	692b      	ldr	r3, [r5, #16]
 800d0e6:	b99b      	cbnz	r3, 800d110 <_vfiprintf_r+0x5c>
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f000 f938 	bl	800d360 <__swsetup_r>
 800d0f0:	b170      	cbz	r0, 800d110 <_vfiprintf_r+0x5c>
 800d0f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0f4:	07dc      	lsls	r4, r3, #31
 800d0f6:	d504      	bpl.n	800d102 <_vfiprintf_r+0x4e>
 800d0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0fc:	b01d      	add	sp, #116	@ 0x74
 800d0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d102:	89ab      	ldrh	r3, [r5, #12]
 800d104:	0598      	lsls	r0, r3, #22
 800d106:	d4f7      	bmi.n	800d0f8 <_vfiprintf_r+0x44>
 800d108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d10a:	f7fe f9fd 	bl	800b508 <__retarget_lock_release_recursive>
 800d10e:	e7f3      	b.n	800d0f8 <_vfiprintf_r+0x44>
 800d110:	2300      	movs	r3, #0
 800d112:	9309      	str	r3, [sp, #36]	@ 0x24
 800d114:	2320      	movs	r3, #32
 800d116:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d11a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d11e:	2330      	movs	r3, #48	@ 0x30
 800d120:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d2d0 <_vfiprintf_r+0x21c>
 800d124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d128:	f04f 0901 	mov.w	r9, #1
 800d12c:	4623      	mov	r3, r4
 800d12e:	469a      	mov	sl, r3
 800d130:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d134:	b10a      	cbz	r2, 800d13a <_vfiprintf_r+0x86>
 800d136:	2a25      	cmp	r2, #37	@ 0x25
 800d138:	d1f9      	bne.n	800d12e <_vfiprintf_r+0x7a>
 800d13a:	ebba 0b04 	subs.w	fp, sl, r4
 800d13e:	d00b      	beq.n	800d158 <_vfiprintf_r+0xa4>
 800d140:	465b      	mov	r3, fp
 800d142:	4622      	mov	r2, r4
 800d144:	4629      	mov	r1, r5
 800d146:	4630      	mov	r0, r6
 800d148:	f7ff ffa2 	bl	800d090 <__sfputs_r>
 800d14c:	3001      	adds	r0, #1
 800d14e:	f000 80a7 	beq.w	800d2a0 <_vfiprintf_r+0x1ec>
 800d152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d154:	445a      	add	r2, fp
 800d156:	9209      	str	r2, [sp, #36]	@ 0x24
 800d158:	f89a 3000 	ldrb.w	r3, [sl]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 809f 	beq.w	800d2a0 <_vfiprintf_r+0x1ec>
 800d162:	2300      	movs	r3, #0
 800d164:	f04f 32ff 	mov.w	r2, #4294967295
 800d168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d16c:	f10a 0a01 	add.w	sl, sl, #1
 800d170:	9304      	str	r3, [sp, #16]
 800d172:	9307      	str	r3, [sp, #28]
 800d174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d178:	931a      	str	r3, [sp, #104]	@ 0x68
 800d17a:	4654      	mov	r4, sl
 800d17c:	2205      	movs	r2, #5
 800d17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d182:	4853      	ldr	r0, [pc, #332]	@ (800d2d0 <_vfiprintf_r+0x21c>)
 800d184:	f7f3 f824 	bl	80001d0 <memchr>
 800d188:	9a04      	ldr	r2, [sp, #16]
 800d18a:	b9d8      	cbnz	r0, 800d1c4 <_vfiprintf_r+0x110>
 800d18c:	06d1      	lsls	r1, r2, #27
 800d18e:	bf44      	itt	mi
 800d190:	2320      	movmi	r3, #32
 800d192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d196:	0713      	lsls	r3, r2, #28
 800d198:	bf44      	itt	mi
 800d19a:	232b      	movmi	r3, #43	@ 0x2b
 800d19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1a6:	d015      	beq.n	800d1d4 <_vfiprintf_r+0x120>
 800d1a8:	9a07      	ldr	r2, [sp, #28]
 800d1aa:	4654      	mov	r4, sl
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	f04f 0c0a 	mov.w	ip, #10
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1b8:	3b30      	subs	r3, #48	@ 0x30
 800d1ba:	2b09      	cmp	r3, #9
 800d1bc:	d94b      	bls.n	800d256 <_vfiprintf_r+0x1a2>
 800d1be:	b1b0      	cbz	r0, 800d1ee <_vfiprintf_r+0x13a>
 800d1c0:	9207      	str	r2, [sp, #28]
 800d1c2:	e014      	b.n	800d1ee <_vfiprintf_r+0x13a>
 800d1c4:	eba0 0308 	sub.w	r3, r0, r8
 800d1c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	9304      	str	r3, [sp, #16]
 800d1d0:	46a2      	mov	sl, r4
 800d1d2:	e7d2      	b.n	800d17a <_vfiprintf_r+0xc6>
 800d1d4:	9b03      	ldr	r3, [sp, #12]
 800d1d6:	1d19      	adds	r1, r3, #4
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	9103      	str	r1, [sp, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	bfbb      	ittet	lt
 800d1e0:	425b      	neglt	r3, r3
 800d1e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d1e6:	9307      	strge	r3, [sp, #28]
 800d1e8:	9307      	strlt	r3, [sp, #28]
 800d1ea:	bfb8      	it	lt
 800d1ec:	9204      	strlt	r2, [sp, #16]
 800d1ee:	7823      	ldrb	r3, [r4, #0]
 800d1f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1f2:	d10a      	bne.n	800d20a <_vfiprintf_r+0x156>
 800d1f4:	7863      	ldrb	r3, [r4, #1]
 800d1f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1f8:	d132      	bne.n	800d260 <_vfiprintf_r+0x1ac>
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	1d1a      	adds	r2, r3, #4
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	9203      	str	r2, [sp, #12]
 800d202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d206:	3402      	adds	r4, #2
 800d208:	9305      	str	r3, [sp, #20]
 800d20a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2e0 <_vfiprintf_r+0x22c>
 800d20e:	7821      	ldrb	r1, [r4, #0]
 800d210:	2203      	movs	r2, #3
 800d212:	4650      	mov	r0, sl
 800d214:	f7f2 ffdc 	bl	80001d0 <memchr>
 800d218:	b138      	cbz	r0, 800d22a <_vfiprintf_r+0x176>
 800d21a:	9b04      	ldr	r3, [sp, #16]
 800d21c:	eba0 000a 	sub.w	r0, r0, sl
 800d220:	2240      	movs	r2, #64	@ 0x40
 800d222:	4082      	lsls	r2, r0
 800d224:	4313      	orrs	r3, r2
 800d226:	3401      	adds	r4, #1
 800d228:	9304      	str	r3, [sp, #16]
 800d22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d22e:	4829      	ldr	r0, [pc, #164]	@ (800d2d4 <_vfiprintf_r+0x220>)
 800d230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d234:	2206      	movs	r2, #6
 800d236:	f7f2 ffcb 	bl	80001d0 <memchr>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d03f      	beq.n	800d2be <_vfiprintf_r+0x20a>
 800d23e:	4b26      	ldr	r3, [pc, #152]	@ (800d2d8 <_vfiprintf_r+0x224>)
 800d240:	bb1b      	cbnz	r3, 800d28a <_vfiprintf_r+0x1d6>
 800d242:	9b03      	ldr	r3, [sp, #12]
 800d244:	3307      	adds	r3, #7
 800d246:	f023 0307 	bic.w	r3, r3, #7
 800d24a:	3308      	adds	r3, #8
 800d24c:	9303      	str	r3, [sp, #12]
 800d24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d250:	443b      	add	r3, r7
 800d252:	9309      	str	r3, [sp, #36]	@ 0x24
 800d254:	e76a      	b.n	800d12c <_vfiprintf_r+0x78>
 800d256:	fb0c 3202 	mla	r2, ip, r2, r3
 800d25a:	460c      	mov	r4, r1
 800d25c:	2001      	movs	r0, #1
 800d25e:	e7a8      	b.n	800d1b2 <_vfiprintf_r+0xfe>
 800d260:	2300      	movs	r3, #0
 800d262:	3401      	adds	r4, #1
 800d264:	9305      	str	r3, [sp, #20]
 800d266:	4619      	mov	r1, r3
 800d268:	f04f 0c0a 	mov.w	ip, #10
 800d26c:	4620      	mov	r0, r4
 800d26e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d272:	3a30      	subs	r2, #48	@ 0x30
 800d274:	2a09      	cmp	r2, #9
 800d276:	d903      	bls.n	800d280 <_vfiprintf_r+0x1cc>
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0c6      	beq.n	800d20a <_vfiprintf_r+0x156>
 800d27c:	9105      	str	r1, [sp, #20]
 800d27e:	e7c4      	b.n	800d20a <_vfiprintf_r+0x156>
 800d280:	fb0c 2101 	mla	r1, ip, r1, r2
 800d284:	4604      	mov	r4, r0
 800d286:	2301      	movs	r3, #1
 800d288:	e7f0      	b.n	800d26c <_vfiprintf_r+0x1b8>
 800d28a:	ab03      	add	r3, sp, #12
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	462a      	mov	r2, r5
 800d290:	4b12      	ldr	r3, [pc, #72]	@ (800d2dc <_vfiprintf_r+0x228>)
 800d292:	a904      	add	r1, sp, #16
 800d294:	4630      	mov	r0, r6
 800d296:	f7fd fbc7 	bl	800aa28 <_printf_float>
 800d29a:	4607      	mov	r7, r0
 800d29c:	1c78      	adds	r0, r7, #1
 800d29e:	d1d6      	bne.n	800d24e <_vfiprintf_r+0x19a>
 800d2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2a2:	07d9      	lsls	r1, r3, #31
 800d2a4:	d405      	bmi.n	800d2b2 <_vfiprintf_r+0x1fe>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	059a      	lsls	r2, r3, #22
 800d2aa:	d402      	bmi.n	800d2b2 <_vfiprintf_r+0x1fe>
 800d2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ae:	f7fe f92b 	bl	800b508 <__retarget_lock_release_recursive>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	065b      	lsls	r3, r3, #25
 800d2b6:	f53f af1f 	bmi.w	800d0f8 <_vfiprintf_r+0x44>
 800d2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2bc:	e71e      	b.n	800d0fc <_vfiprintf_r+0x48>
 800d2be:	ab03      	add	r3, sp, #12
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	462a      	mov	r2, r5
 800d2c4:	4b05      	ldr	r3, [pc, #20]	@ (800d2dc <_vfiprintf_r+0x228>)
 800d2c6:	a904      	add	r1, sp, #16
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f7fd fe45 	bl	800af58 <_printf_i>
 800d2ce:	e7e4      	b.n	800d29a <_vfiprintf_r+0x1e6>
 800d2d0:	0800d870 	.word	0x0800d870
 800d2d4:	0800d87a 	.word	0x0800d87a
 800d2d8:	0800aa29 	.word	0x0800aa29
 800d2dc:	0800d091 	.word	0x0800d091
 800d2e0:	0800d876 	.word	0x0800d876

0800d2e4 <__swbuf_r>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	460e      	mov	r6, r1
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	b118      	cbz	r0, 800d2f6 <__swbuf_r+0x12>
 800d2ee:	6a03      	ldr	r3, [r0, #32]
 800d2f0:	b90b      	cbnz	r3, 800d2f6 <__swbuf_r+0x12>
 800d2f2:	f7fd ffdd 	bl	800b2b0 <__sinit>
 800d2f6:	69a3      	ldr	r3, [r4, #24]
 800d2f8:	60a3      	str	r3, [r4, #8]
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	071a      	lsls	r2, r3, #28
 800d2fe:	d501      	bpl.n	800d304 <__swbuf_r+0x20>
 800d300:	6923      	ldr	r3, [r4, #16]
 800d302:	b943      	cbnz	r3, 800d316 <__swbuf_r+0x32>
 800d304:	4621      	mov	r1, r4
 800d306:	4628      	mov	r0, r5
 800d308:	f000 f82a 	bl	800d360 <__swsetup_r>
 800d30c:	b118      	cbz	r0, 800d316 <__swbuf_r+0x32>
 800d30e:	f04f 37ff 	mov.w	r7, #4294967295
 800d312:	4638      	mov	r0, r7
 800d314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	6922      	ldr	r2, [r4, #16]
 800d31a:	1a98      	subs	r0, r3, r2
 800d31c:	6963      	ldr	r3, [r4, #20]
 800d31e:	b2f6      	uxtb	r6, r6
 800d320:	4283      	cmp	r3, r0
 800d322:	4637      	mov	r7, r6
 800d324:	dc05      	bgt.n	800d332 <__swbuf_r+0x4e>
 800d326:	4621      	mov	r1, r4
 800d328:	4628      	mov	r0, r5
 800d32a:	f7ff fda7 	bl	800ce7c <_fflush_r>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d1ed      	bne.n	800d30e <__swbuf_r+0x2a>
 800d332:	68a3      	ldr	r3, [r4, #8]
 800d334:	3b01      	subs	r3, #1
 800d336:	60a3      	str	r3, [r4, #8]
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	6022      	str	r2, [r4, #0]
 800d33e:	701e      	strb	r6, [r3, #0]
 800d340:	6962      	ldr	r2, [r4, #20]
 800d342:	1c43      	adds	r3, r0, #1
 800d344:	429a      	cmp	r2, r3
 800d346:	d004      	beq.n	800d352 <__swbuf_r+0x6e>
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	07db      	lsls	r3, r3, #31
 800d34c:	d5e1      	bpl.n	800d312 <__swbuf_r+0x2e>
 800d34e:	2e0a      	cmp	r6, #10
 800d350:	d1df      	bne.n	800d312 <__swbuf_r+0x2e>
 800d352:	4621      	mov	r1, r4
 800d354:	4628      	mov	r0, r5
 800d356:	f7ff fd91 	bl	800ce7c <_fflush_r>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d0d9      	beq.n	800d312 <__swbuf_r+0x2e>
 800d35e:	e7d6      	b.n	800d30e <__swbuf_r+0x2a>

0800d360 <__swsetup_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	4b29      	ldr	r3, [pc, #164]	@ (800d408 <__swsetup_r+0xa8>)
 800d364:	4605      	mov	r5, r0
 800d366:	6818      	ldr	r0, [r3, #0]
 800d368:	460c      	mov	r4, r1
 800d36a:	b118      	cbz	r0, 800d374 <__swsetup_r+0x14>
 800d36c:	6a03      	ldr	r3, [r0, #32]
 800d36e:	b90b      	cbnz	r3, 800d374 <__swsetup_r+0x14>
 800d370:	f7fd ff9e 	bl	800b2b0 <__sinit>
 800d374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d378:	0719      	lsls	r1, r3, #28
 800d37a:	d422      	bmi.n	800d3c2 <__swsetup_r+0x62>
 800d37c:	06da      	lsls	r2, r3, #27
 800d37e:	d407      	bmi.n	800d390 <__swsetup_r+0x30>
 800d380:	2209      	movs	r2, #9
 800d382:	602a      	str	r2, [r5, #0]
 800d384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d388:	81a3      	strh	r3, [r4, #12]
 800d38a:	f04f 30ff 	mov.w	r0, #4294967295
 800d38e:	e033      	b.n	800d3f8 <__swsetup_r+0x98>
 800d390:	0758      	lsls	r0, r3, #29
 800d392:	d512      	bpl.n	800d3ba <__swsetup_r+0x5a>
 800d394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d396:	b141      	cbz	r1, 800d3aa <__swsetup_r+0x4a>
 800d398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d39c:	4299      	cmp	r1, r3
 800d39e:	d002      	beq.n	800d3a6 <__swsetup_r+0x46>
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	f7fe ff0d 	bl	800c1c0 <_free_r>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3aa:	89a3      	ldrh	r3, [r4, #12]
 800d3ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3b0:	81a3      	strh	r3, [r4, #12]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	6063      	str	r3, [r4, #4]
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	f043 0308 	orr.w	r3, r3, #8
 800d3c0:	81a3      	strh	r3, [r4, #12]
 800d3c2:	6923      	ldr	r3, [r4, #16]
 800d3c4:	b94b      	cbnz	r3, 800d3da <__swsetup_r+0x7a>
 800d3c6:	89a3      	ldrh	r3, [r4, #12]
 800d3c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3d0:	d003      	beq.n	800d3da <__swsetup_r+0x7a>
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	f000 f883 	bl	800d4e0 <__smakebuf_r>
 800d3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3de:	f013 0201 	ands.w	r2, r3, #1
 800d3e2:	d00a      	beq.n	800d3fa <__swsetup_r+0x9a>
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	60a2      	str	r2, [r4, #8]
 800d3e8:	6962      	ldr	r2, [r4, #20]
 800d3ea:	4252      	negs	r2, r2
 800d3ec:	61a2      	str	r2, [r4, #24]
 800d3ee:	6922      	ldr	r2, [r4, #16]
 800d3f0:	b942      	cbnz	r2, 800d404 <__swsetup_r+0xa4>
 800d3f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d3f6:	d1c5      	bne.n	800d384 <__swsetup_r+0x24>
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	0799      	lsls	r1, r3, #30
 800d3fc:	bf58      	it	pl
 800d3fe:	6962      	ldrpl	r2, [r4, #20]
 800d400:	60a2      	str	r2, [r4, #8]
 800d402:	e7f4      	b.n	800d3ee <__swsetup_r+0x8e>
 800d404:	2000      	movs	r0, #0
 800d406:	e7f7      	b.n	800d3f8 <__swsetup_r+0x98>
 800d408:	2000001c 	.word	0x2000001c

0800d40c <_raise_r>:
 800d40c:	291f      	cmp	r1, #31
 800d40e:	b538      	push	{r3, r4, r5, lr}
 800d410:	4605      	mov	r5, r0
 800d412:	460c      	mov	r4, r1
 800d414:	d904      	bls.n	800d420 <_raise_r+0x14>
 800d416:	2316      	movs	r3, #22
 800d418:	6003      	str	r3, [r0, #0]
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d422:	b112      	cbz	r2, 800d42a <_raise_r+0x1e>
 800d424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d428:	b94b      	cbnz	r3, 800d43e <_raise_r+0x32>
 800d42a:	4628      	mov	r0, r5
 800d42c:	f000 f830 	bl	800d490 <_getpid_r>
 800d430:	4622      	mov	r2, r4
 800d432:	4601      	mov	r1, r0
 800d434:	4628      	mov	r0, r5
 800d436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d43a:	f000 b817 	b.w	800d46c <_kill_r>
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d00a      	beq.n	800d458 <_raise_r+0x4c>
 800d442:	1c59      	adds	r1, r3, #1
 800d444:	d103      	bne.n	800d44e <_raise_r+0x42>
 800d446:	2316      	movs	r3, #22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	2001      	movs	r0, #1
 800d44c:	e7e7      	b.n	800d41e <_raise_r+0x12>
 800d44e:	2100      	movs	r1, #0
 800d450:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d454:	4620      	mov	r0, r4
 800d456:	4798      	blx	r3
 800d458:	2000      	movs	r0, #0
 800d45a:	e7e0      	b.n	800d41e <_raise_r+0x12>

0800d45c <raise>:
 800d45c:	4b02      	ldr	r3, [pc, #8]	@ (800d468 <raise+0xc>)
 800d45e:	4601      	mov	r1, r0
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	f7ff bfd3 	b.w	800d40c <_raise_r>
 800d466:	bf00      	nop
 800d468:	2000001c 	.word	0x2000001c

0800d46c <_kill_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	4d07      	ldr	r5, [pc, #28]	@ (800d48c <_kill_r+0x20>)
 800d470:	2300      	movs	r3, #0
 800d472:	4604      	mov	r4, r0
 800d474:	4608      	mov	r0, r1
 800d476:	4611      	mov	r1, r2
 800d478:	602b      	str	r3, [r5, #0]
 800d47a:	f7f4 fdbf 	bl	8001ffc <_kill>
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d102      	bne.n	800d488 <_kill_r+0x1c>
 800d482:	682b      	ldr	r3, [r5, #0]
 800d484:	b103      	cbz	r3, 800d488 <_kill_r+0x1c>
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	bd38      	pop	{r3, r4, r5, pc}
 800d48a:	bf00      	nop
 800d48c:	20001ef0 	.word	0x20001ef0

0800d490 <_getpid_r>:
 800d490:	f7f4 bdac 	b.w	8001fec <_getpid>

0800d494 <__swhatbuf_r>:
 800d494:	b570      	push	{r4, r5, r6, lr}
 800d496:	460c      	mov	r4, r1
 800d498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d49c:	2900      	cmp	r1, #0
 800d49e:	b096      	sub	sp, #88	@ 0x58
 800d4a0:	4615      	mov	r5, r2
 800d4a2:	461e      	mov	r6, r3
 800d4a4:	da0d      	bge.n	800d4c2 <__swhatbuf_r+0x2e>
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4ac:	f04f 0100 	mov.w	r1, #0
 800d4b0:	bf14      	ite	ne
 800d4b2:	2340      	movne	r3, #64	@ 0x40
 800d4b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	6031      	str	r1, [r6, #0]
 800d4bc:	602b      	str	r3, [r5, #0]
 800d4be:	b016      	add	sp, #88	@ 0x58
 800d4c0:	bd70      	pop	{r4, r5, r6, pc}
 800d4c2:	466a      	mov	r2, sp
 800d4c4:	f000 f848 	bl	800d558 <_fstat_r>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	dbec      	blt.n	800d4a6 <__swhatbuf_r+0x12>
 800d4cc:	9901      	ldr	r1, [sp, #4]
 800d4ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d4d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d4d6:	4259      	negs	r1, r3
 800d4d8:	4159      	adcs	r1, r3
 800d4da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4de:	e7eb      	b.n	800d4b8 <__swhatbuf_r+0x24>

0800d4e0 <__smakebuf_r>:
 800d4e0:	898b      	ldrh	r3, [r1, #12]
 800d4e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4e4:	079d      	lsls	r5, r3, #30
 800d4e6:	4606      	mov	r6, r0
 800d4e8:	460c      	mov	r4, r1
 800d4ea:	d507      	bpl.n	800d4fc <__smakebuf_r+0x1c>
 800d4ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d4f0:	6023      	str	r3, [r4, #0]
 800d4f2:	6123      	str	r3, [r4, #16]
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	6163      	str	r3, [r4, #20]
 800d4f8:	b003      	add	sp, #12
 800d4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fc:	ab01      	add	r3, sp, #4
 800d4fe:	466a      	mov	r2, sp
 800d500:	f7ff ffc8 	bl	800d494 <__swhatbuf_r>
 800d504:	9f00      	ldr	r7, [sp, #0]
 800d506:	4605      	mov	r5, r0
 800d508:	4639      	mov	r1, r7
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7fe fecc 	bl	800c2a8 <_malloc_r>
 800d510:	b948      	cbnz	r0, 800d526 <__smakebuf_r+0x46>
 800d512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d516:	059a      	lsls	r2, r3, #22
 800d518:	d4ee      	bmi.n	800d4f8 <__smakebuf_r+0x18>
 800d51a:	f023 0303 	bic.w	r3, r3, #3
 800d51e:	f043 0302 	orr.w	r3, r3, #2
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	e7e2      	b.n	800d4ec <__smakebuf_r+0xc>
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	6020      	str	r0, [r4, #0]
 800d52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d52e:	81a3      	strh	r3, [r4, #12]
 800d530:	9b01      	ldr	r3, [sp, #4]
 800d532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d536:	b15b      	cbz	r3, 800d550 <__smakebuf_r+0x70>
 800d538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d53c:	4630      	mov	r0, r6
 800d53e:	f000 f81d 	bl	800d57c <_isatty_r>
 800d542:	b128      	cbz	r0, 800d550 <__smakebuf_r+0x70>
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	f023 0303 	bic.w	r3, r3, #3
 800d54a:	f043 0301 	orr.w	r3, r3, #1
 800d54e:	81a3      	strh	r3, [r4, #12]
 800d550:	89a3      	ldrh	r3, [r4, #12]
 800d552:	431d      	orrs	r5, r3
 800d554:	81a5      	strh	r5, [r4, #12]
 800d556:	e7cf      	b.n	800d4f8 <__smakebuf_r+0x18>

0800d558 <_fstat_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d07      	ldr	r5, [pc, #28]	@ (800d578 <_fstat_r+0x20>)
 800d55c:	2300      	movs	r3, #0
 800d55e:	4604      	mov	r4, r0
 800d560:	4608      	mov	r0, r1
 800d562:	4611      	mov	r1, r2
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	f7f4 fda9 	bl	80020bc <_fstat>
 800d56a:	1c43      	adds	r3, r0, #1
 800d56c:	d102      	bne.n	800d574 <_fstat_r+0x1c>
 800d56e:	682b      	ldr	r3, [r5, #0]
 800d570:	b103      	cbz	r3, 800d574 <_fstat_r+0x1c>
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	bf00      	nop
 800d578:	20001ef0 	.word	0x20001ef0

0800d57c <_isatty_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	4d06      	ldr	r5, [pc, #24]	@ (800d598 <_isatty_r+0x1c>)
 800d580:	2300      	movs	r3, #0
 800d582:	4604      	mov	r4, r0
 800d584:	4608      	mov	r0, r1
 800d586:	602b      	str	r3, [r5, #0]
 800d588:	f7f4 fda8 	bl	80020dc <_isatty>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d102      	bne.n	800d596 <_isatty_r+0x1a>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	b103      	cbz	r3, 800d596 <_isatty_r+0x1a>
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	bd38      	pop	{r3, r4, r5, pc}
 800d598:	20001ef0 	.word	0x20001ef0

0800d59c <_init>:
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	bf00      	nop
 800d5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5a2:	bc08      	pop	{r3}
 800d5a4:	469e      	mov	lr, r3
 800d5a6:	4770      	bx	lr

0800d5a8 <_fini>:
 800d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5aa:	bf00      	nop
 800d5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ae:	bc08      	pop	{r3}
 800d5b0:	469e      	mov	lr, r3
 800d5b2:	4770      	bx	lr
